/*
 * Infobip Client API Libraries OpenAPI Specification
 * OpenAPI specification containing public endpoints supported in client API libraries.
 *
 * Contact: support@infobip.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;

namespace Infobip.Api.Client.Model
{
    /// <summary>
    ///     SmsResponseDetails
    /// </summary>
    [DataContract(Name = "SmsResponseDetails")]
    public class SmsResponseDetails : IEquatable<SmsResponseDetails>
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="SmsResponseDetails" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public SmsResponseDetails()
        {
        }

        /// <summary>
        ///     The ID that uniquely identifies the message sent.
        /// </summary>
        /// <value>The ID that uniquely identifies the message sent.</value>
        [DataMember(Name = "messageId", EmitDefaultValue = false)]
        public string MessageId { get; private set; }

        /// <summary>
        ///     Indicates whether the message is successfully sent, not sent, delivered, not delivered, waiting for delivery or any
        ///     other possible status.
        /// </summary>
        /// <value>
        ///     Indicates whether the message is successfully sent, not sent, delivered, not delivered, waiting for delivery or
        ///     any other possible status.
        /// </value>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public SmsStatus Status { get; private set; }

        /// <summary>
        ///     The message destination address.
        /// </summary>
        /// <value>The message destination address.</value>
        [DataMember(Name = "to", EmitDefaultValue = false)]
        public string To { get; private set; }

        /// <summary>
        ///     Returns false as MessageId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeMessageId()
        {
            return false;
        }

        /// <summary>
        ///     Returns false as Status should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeStatus()
        {
            return false;
        }

        /// <summary>
        ///     Returns false as To should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeTo()
        {
            return false;
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SmsResponseDetails {\n");
            sb.Append("  MessageId: ").Append(MessageId).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  To: ").Append(To).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as SmsResponseDetails);
        }

        /// <summary>
        ///     Returns true if SmsResponseDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of SmsResponseDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SmsResponseDetails input)
        {
            if (input == null)
                return false;

            return
                (
                    MessageId == input.MessageId ||
                    MessageId != null &&
                    MessageId.Equals(input.MessageId)
                ) &&
                (
                    Status == input.Status ||
                    Status != null &&
                    Status.Equals(input.Status)
                ) &&
                (
                    To == input.To ||
                    To != null &&
                    To.Equals(input.To)
                );
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (MessageId != null)
                    hashCode = hashCode * 59 + MessageId.GetHashCode();
                if (Status != null)
                    hashCode = hashCode * 59 + Status.GetHashCode();
                if (To != null)
                    hashCode = hashCode * 59 + To.GetHashCode();
                return hashCode;
            }
        }
    }
}