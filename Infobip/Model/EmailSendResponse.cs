/*
 * Infobip Client API Libraries OpenAPI Specification
 * OpenAPI specification containing public endpoints supported in client API libraries.
 *
 * Contact: support@infobip.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;

namespace Infobip.Api.Client.Model
{
    /// <summary>
    ///     EmailSendResponse
    /// </summary>
    [DataContract(Name = "EmailSendResponse")]
    public class EmailSendResponse : IEquatable<EmailSendResponse>
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="EmailSendResponse" /> class.
        /// </summary>
        /// <param name="bulkId">bulkId.</param>
        /// <param name="messages">messages.</param>
        public EmailSendResponse(string bulkId = default(string),
            List<EmailMessageInfo> messages = default(List<EmailMessageInfo>))
        {
            BulkId = bulkId;
            Messages = messages;
        }

        /// <summary>
        ///     Gets or Sets BulkId
        /// </summary>
        [DataMember(Name = "bulkId", EmitDefaultValue = false)]
        public string BulkId { get; set; }

        /// <summary>
        ///     Gets or Sets Messages
        /// </summary>
        [DataMember(Name = "messages", EmitDefaultValue = false)]
        public List<EmailMessageInfo> Messages { get; set; }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EmailSendResponse {\n");
            sb.Append("  BulkId: ").Append(BulkId).Append("\n");
            sb.Append("  Messages: ").Append(Messages).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as EmailSendResponse);
        }

        /// <summary>
        ///     Returns true if EmailSendResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of EmailSendResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EmailSendResponse input)
        {
            if (input == null)
                return false;

            return
                (
                    BulkId == input.BulkId ||
                    BulkId != null &&
                    BulkId.Equals(input.BulkId)
                ) &&
                (
                    Messages == input.Messages ||
                    Messages != null &&
                    input.Messages != null &&
                    Messages.SequenceEqual(input.Messages)
                );
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (BulkId != null)
                    hashCode = hashCode * 59 + BulkId.GetHashCode();
                if (Messages != null)
                    hashCode = hashCode * 59 + Messages.GetHashCode();
                return hashCode;
            }
        }
    }
}