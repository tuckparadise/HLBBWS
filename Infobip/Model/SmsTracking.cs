/*
 * Infobip Client API Libraries OpenAPI Specification
 * OpenAPI specification containing public endpoints supported in client API libraries.
 *
 * Contact: support@infobip.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;

namespace Infobip.Api.Client.Model
{
    /// <summary>
    ///     SmsTracking
    /// </summary>
    [DataContract(Name = "SmsTracking")]
    public class SmsTracking : IEquatable<SmsTracking>
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="SmsTracking" /> class.
        /// </summary>
        /// <param name="baseUrl">
        ///     Custom base url used for shortening links from SMS text in &#x60;URL&#x60; Conversion rate
        ///     tracking use-case..
        /// </param>
        /// <param name="processKey">Key that uniquely identifies Conversion tracking process..</param>
        /// <param name="track">
        ///     Indicates if the message has to be tracked for Conversion rates. Possible values: &#x60;SMS&#x60;
        ///     and &#x60;URL&#x60;.
        /// </param>
        /// <param name="type">
        ///     User-defined type of the Conversion tracking process or flow type or message type, etc. Example:
        ///     &#x60;ONE_TIME_PIN or SOCIAL_INVITES&#x60;..
        /// </param>
        public SmsTracking(string baseUrl = default(string), string processKey = default(string),
            string track = default(string), string type = default(string))
        {
            BaseUrl = baseUrl;
            ProcessKey = processKey;
            Track = track;
            Type = type;
        }

        /// <summary>
        ///     Custom base url used for shortening links from SMS text in &#x60;URL&#x60; Conversion rate tracking use-case.
        /// </summary>
        /// <value>Custom base url used for shortening links from SMS text in &#x60;URL&#x60; Conversion rate tracking use-case.</value>
        [DataMember(Name = "baseUrl", EmitDefaultValue = false)]
        public string BaseUrl { get; set; }

        /// <summary>
        ///     Key that uniquely identifies Conversion tracking process.
        /// </summary>
        /// <value>Key that uniquely identifies Conversion tracking process.</value>
        [DataMember(Name = "processKey", EmitDefaultValue = false)]
        public string ProcessKey { get; set; }

        /// <summary>
        ///     Indicates if the message has to be tracked for Conversion rates. Possible values: &#x60;SMS&#x60; and &#x60;URL
        ///     &#x60;
        /// </summary>
        /// <value>
        ///     Indicates if the message has to be tracked for Conversion rates. Possible values: &#x60;SMS&#x60; and &#x60;URL
        ///     &#x60;
        /// </value>
        [DataMember(Name = "track", EmitDefaultValue = false)]
        public string Track { get; set; }

        /// <summary>
        ///     User-defined type of the Conversion tracking process or flow type or message type, etc. Example: &#x60;ONE_TIME_PIN
        ///     or SOCIAL_INVITES&#x60;.
        /// </summary>
        /// <value>
        ///     User-defined type of the Conversion tracking process or flow type or message type, etc. Example: &#x60;
        ///     ONE_TIME_PIN or SOCIAL_INVITES&#x60;.
        /// </value>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public string Type { get; set; }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SmsTracking {\n");
            sb.Append("  BaseUrl: ").Append(BaseUrl).Append("\n");
            sb.Append("  ProcessKey: ").Append(ProcessKey).Append("\n");
            sb.Append("  Track: ").Append(Track).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as SmsTracking);
        }

        /// <summary>
        ///     Returns true if SmsTracking instances are equal
        /// </summary>
        /// <param name="input">Instance of SmsTracking to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SmsTracking input)
        {
            if (input == null)
                return false;

            return
                (
                    BaseUrl == input.BaseUrl ||
                    BaseUrl != null &&
                    BaseUrl.Equals(input.BaseUrl)
                ) &&
                (
                    ProcessKey == input.ProcessKey ||
                    ProcessKey != null &&
                    ProcessKey.Equals(input.ProcessKey)
                ) &&
                (
                    Track == input.Track ||
                    Track != null &&
                    Track.Equals(input.Track)
                ) &&
                (
                    Type == input.Type ||
                    Type != null &&
                    Type.Equals(input.Type)
                );
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (BaseUrl != null)
                    hashCode = hashCode * 59 + BaseUrl.GetHashCode();
                if (ProcessKey != null)
                    hashCode = hashCode * 59 + ProcessKey.GetHashCode();
                if (Track != null)
                    hashCode = hashCode * 59 + Track.GetHashCode();
                if (Type != null)
                    hashCode = hashCode * 59 + Type.GetHashCode();
                return hashCode;
            }
        }
    }
}