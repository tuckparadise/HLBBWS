/*
 * Infobip Client API Libraries OpenAPI Specification
 * OpenAPI specification containing public endpoints supported in client API libraries.
 *
 * Contact: support@infobip.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;

namespace Infobip.Api.Client.Model
{
    /// <summary>
    ///     SmsAdvancedTextualRequest
    /// </summary>
    [DataContract(Name = "SmsAdvancedTextualRequest")]
    public class SmsAdvancedTextualRequest : IEquatable<SmsAdvancedTextualRequest>
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="SmsAdvancedTextualRequest" /> class.
        /// </summary>
        /// <param name="bulkId">
        ///     The ID which uniquely identifies the request. Bulk ID will be received only when you send a
        ///     message to more than one destination address..
        /// </param>
        /// <param name="messages">messages.</param>
        /// <param name="sendingSpeedLimit">
        ///     Limit the sending speed for message bulks. In some use cases, you might want to reduce
        ///     message sending speed if your message call to action involves visiting a website, calling your contact center or
        ///     similar recipient activity, in which you can handle a limited amount of load. This setting helps you to spread the
        ///     delivery of the messages over a longer period, allowing your systems or agents to handle incoming traffic in
        ///     real-time, resulting in better customer satisfaction..
        /// </param>
        /// <param name="tracking">tracking.</param>
        public SmsAdvancedTextualRequest(string bulkId = default(string),
            List<SmsTextualMessage> messages = default(List<SmsTextualMessage>),
            SmsSendingSpeedLimit sendingSpeedLimit = default, SmsTracking tracking = default)
        {
            BulkId = bulkId;
            Messages = messages;
            SendingSpeedLimit = sendingSpeedLimit;
            Tracking = tracking;
        }

        /// <summary>
        ///     The ID which uniquely identifies the request. Bulk ID will be received only when you send a message to more than
        ///     one destination address.
        /// </summary>
        /// <value>
        ///     The ID which uniquely identifies the request. Bulk ID will be received only when you send a message to more than
        ///     one destination address.
        /// </value>
        [DataMember(Name = "bulkId", EmitDefaultValue = false)]
        public string BulkId { get; set; }

        /// <summary>
        ///     Gets or Sets Messages
        /// </summary>
        [DataMember(Name = "messages", EmitDefaultValue = false)]
        public List<SmsTextualMessage> Messages { get; set; }

        /// <summary>
        ///     Limit the sending speed for message bulks. In some use cases, you might want to reduce message sending speed if
        ///     your message call to action involves visiting a website, calling your contact center or similar recipient activity,
        ///     in which you can handle a limited amount of load. This setting helps you to spread the delivery of the messages
        ///     over a longer period, allowing your systems or agents to handle incoming traffic in real-time, resulting in better
        ///     customer satisfaction.
        /// </summary>
        /// <value>
        ///     Limit the sending speed for message bulks. In some use cases, you might want to reduce message sending speed if
        ///     your message call to action involves visiting a website, calling your contact center or similar recipient activity,
        ///     in which you can handle a limited amount of load. This setting helps you to spread the delivery of the messages
        ///     over a longer period, allowing your systems or agents to handle incoming traffic in real-time, resulting in better
        ///     customer satisfaction.
        /// </value>
        [DataMember(Name = "sendingSpeedLimit", EmitDefaultValue = false)]
        public SmsSendingSpeedLimit SendingSpeedLimit { get; set; }

        /// <summary>
        ///     Gets or Sets Tracking
        /// </summary>
        [DataMember(Name = "tracking", EmitDefaultValue = false)]
        public SmsTracking Tracking { get; set; }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SmsAdvancedTextualRequest {\n");
            sb.Append("  BulkId: ").Append(BulkId).Append("\n");
            sb.Append("  Messages: ").Append(Messages).Append("\n");
            sb.Append("  SendingSpeedLimit: ").Append(SendingSpeedLimit).Append("\n");
            sb.Append("  Tracking: ").Append(Tracking).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as SmsAdvancedTextualRequest);
        }

        /// <summary>
        ///     Returns true if SmsAdvancedTextualRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of SmsAdvancedTextualRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SmsAdvancedTextualRequest input)
        {
            if (input == null)
                return false;

            return
                (
                    BulkId == input.BulkId ||
                    BulkId != null &&
                    BulkId.Equals(input.BulkId)
                ) &&
                (
                    Messages == input.Messages ||
                    Messages != null &&
                    input.Messages != null &&
                    Messages.SequenceEqual(input.Messages)
                ) &&
                (
                    SendingSpeedLimit == input.SendingSpeedLimit ||
                    SendingSpeedLimit != null &&
                    SendingSpeedLimit.Equals(input.SendingSpeedLimit)
                ) &&
                (
                    Tracking == input.Tracking ||
                    Tracking != null &&
                    Tracking.Equals(input.Tracking)
                );
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (BulkId != null)
                    hashCode = hashCode * 59 + BulkId.GetHashCode();
                if (Messages != null)
                    hashCode = hashCode * 59 + Messages.GetHashCode();
                if (SendingSpeedLimit != null)
                    hashCode = hashCode * 59 + SendingSpeedLimit.GetHashCode();
                if (Tracking != null)
                    hashCode = hashCode * 59 + Tracking.GetHashCode();
                return hashCode;
            }
        }
    }
}