/*
 * Infobip Client API Libraries OpenAPI Specification
 * OpenAPI specification containing public endpoints supported in client API libraries.
 *
 * Contact: support@infobip.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;

namespace Infobip.Api.Client.Model
{
    /// <summary>
    ///     SmsSendingSpeedLimit
    /// </summary>
    [DataContract(Name = "SmsSendingSpeedLimit")]
    public class SmsSendingSpeedLimit : IEquatable<SmsSendingSpeedLimit>
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="SmsSendingSpeedLimit" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SmsSendingSpeedLimit()
        {
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="SmsSendingSpeedLimit" /> class.
        /// </summary>
        /// <param name="amount">
        ///     The number of messages to send per time unit. By default, Infobip sends your messages as fast as
        ///     the infrastructure allows. Use this parameter to reduce the traffic if you find the default sending speed too fast
        ///     for your use case. Note that boosting this parameter will not result in faster sending speeds beyond infrastructure
        ///     capabilities. (required).
        /// </param>
        /// <param name="timeUnit">
        ///     The time unit in which the defined message amount will be sent. The default value is &#x60;
        ///     MINUTE&#x60;..
        /// </param>
        public SmsSendingSpeedLimit(int amount = default(int),
            SmsSpeedLimitTimeUnit? timeUnit = default(SmsSpeedLimitTimeUnit?))
        {
            Amount = amount;
            TimeUnit = timeUnit;
        }

        /// <summary>
        ///     The time unit in which the defined message amount will be sent. The default value is &#x60;MINUTE&#x60;.
        /// </summary>
        /// <value>The time unit in which the defined message amount will be sent. The default value is &#x60;MINUTE&#x60;.</value>
        [DataMember(Name = "timeUnit", EmitDefaultValue = false)]
        public SmsSpeedLimitTimeUnit? TimeUnit { get; set; }

        /// <summary>
        ///     The number of messages to send per time unit. By default, Infobip sends your messages as fast as the infrastructure
        ///     allows. Use this parameter to reduce the traffic if you find the default sending speed too fast for your use case.
        ///     Note that boosting this parameter will not result in faster sending speeds beyond infrastructure capabilities.
        /// </summary>
        /// <value>
        ///     The number of messages to send per time unit. By default, Infobip sends your messages as fast as the
        ///     infrastructure allows. Use this parameter to reduce the traffic if you find the default sending speed too fast for
        ///     your use case. Note that boosting this parameter will not result in faster sending speeds beyond infrastructure
        ///     capabilities.
        /// </value>
        [DataMember(Name = "amount", IsRequired = true, EmitDefaultValue = false)]
        public int Amount { get; set; }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SmsSendingSpeedLimit {\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  TimeUnit: ").Append(TimeUnit).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as SmsSendingSpeedLimit);
        }

        /// <summary>
        ///     Returns true if SmsSendingSpeedLimit instances are equal
        /// </summary>
        /// <param name="input">Instance of SmsSendingSpeedLimit to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SmsSendingSpeedLimit input)
        {
            if (input == null)
                return false;

            return
                (
                    Amount == input.Amount ||
                    Amount.Equals(input.Amount)
                ) &&
                (
                    TimeUnit == input.TimeUnit ||
                    TimeUnit.Equals(input.TimeUnit)
                );
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + Amount.GetHashCode();
                hashCode = hashCode * 59 + TimeUnit.GetHashCode();
                return hashCode;
            }
        }
    }
}