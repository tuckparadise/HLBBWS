/*
 * Infobip Client API Libraries OpenAPI Specification
 * OpenAPI specification containing public endpoints supported in client API libraries.
 *
 * Contact: support@infobip.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;

namespace Infobip.Api.Client.Model
{
    /// <summary>
    ///     EmailValidationResponse
    /// </summary>
    [DataContract(Name = "EmailValidationResponse")]
    public class EmailValidationResponse : IEquatable<EmailValidationResponse>
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="EmailValidationResponse" /> class.
        /// </summary>
        /// <param name="to">to.</param>
        /// <param name="validMailbox">validMailbox.</param>
        /// <param name="validSyntax">validSyntax.</param>
        /// <param name="catchAll">catchAll.</param>
        /// <param name="didYouMean">didYouMean.</param>
        /// <param name="disposable">disposable.</param>
        /// <param name="roleBased">roleBased.</param>
        public EmailValidationResponse(string to = default(string), string validMailbox = default(string),
            bool validSyntax = default(bool), bool catchAll = default(bool), string didYouMean = default(string),
            bool disposable = default(bool), bool roleBased = default(bool))
        {
            To = to;
            ValidMailbox = validMailbox;
            ValidSyntax = validSyntax;
            CatchAll = catchAll;
            DidYouMean = didYouMean;
            Disposable = disposable;
            RoleBased = roleBased;
        }

        /// <summary>
        ///     Gets or Sets To
        /// </summary>
        [DataMember(Name = "to", EmitDefaultValue = false)]
        public string To { get; set; }

        /// <summary>
        ///     Gets or Sets ValidMailbox
        /// </summary>
        [DataMember(Name = "validMailbox", EmitDefaultValue = false)]
        public string ValidMailbox { get; set; }

        /// <summary>
        ///     Gets or Sets ValidSyntax
        /// </summary>
        [DataMember(Name = "validSyntax", EmitDefaultValue = true)]
        public bool ValidSyntax { get; set; }

        /// <summary>
        ///     Gets or Sets CatchAll
        /// </summary>
        [DataMember(Name = "catchAll", EmitDefaultValue = true)]
        public bool CatchAll { get; set; }

        /// <summary>
        ///     Gets or Sets DidYouMean
        /// </summary>
        [DataMember(Name = "didYouMean", EmitDefaultValue = false)]
        public string DidYouMean { get; set; }

        /// <summary>
        ///     Gets or Sets Disposable
        /// </summary>
        [DataMember(Name = "disposable", EmitDefaultValue = true)]
        public bool Disposable { get; set; }

        /// <summary>
        ///     Gets or Sets RoleBased
        /// </summary>
        [DataMember(Name = "roleBased", EmitDefaultValue = true)]
        public bool RoleBased { get; set; }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EmailValidationResponse {\n");
            sb.Append("  To: ").Append(To).Append("\n");
            sb.Append("  ValidMailbox: ").Append(ValidMailbox).Append("\n");
            sb.Append("  ValidSyntax: ").Append(ValidSyntax).Append("\n");
            sb.Append("  CatchAll: ").Append(CatchAll).Append("\n");
            sb.Append("  DidYouMean: ").Append(DidYouMean).Append("\n");
            sb.Append("  Disposable: ").Append(Disposable).Append("\n");
            sb.Append("  RoleBased: ").Append(RoleBased).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as EmailValidationResponse);
        }

        /// <summary>
        ///     Returns true if EmailValidationResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of EmailValidationResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EmailValidationResponse input)
        {
            if (input == null)
                return false;

            return
                (
                    To == input.To ||
                    To != null &&
                    To.Equals(input.To)
                ) &&
                (
                    ValidMailbox == input.ValidMailbox ||
                    ValidMailbox != null &&
                    ValidMailbox.Equals(input.ValidMailbox)
                ) &&
                (
                    ValidSyntax == input.ValidSyntax ||
                    ValidSyntax.Equals(input.ValidSyntax)
                ) &&
                (
                    CatchAll == input.CatchAll ||
                    CatchAll.Equals(input.CatchAll)
                ) &&
                (
                    DidYouMean == input.DidYouMean ||
                    DidYouMean != null &&
                    DidYouMean.Equals(input.DidYouMean)
                ) &&
                (
                    Disposable == input.Disposable ||
                    Disposable.Equals(input.Disposable)
                ) &&
                (
                    RoleBased == input.RoleBased ||
                    RoleBased.Equals(input.RoleBased)
                );
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (To != null)
                    hashCode = hashCode * 59 + To.GetHashCode();
                if (ValidMailbox != null)
                    hashCode = hashCode * 59 + ValidMailbox.GetHashCode();
                hashCode = hashCode * 59 + ValidSyntax.GetHashCode();
                hashCode = hashCode * 59 + CatchAll.GetHashCode();
                if (DidYouMean != null)
                    hashCode = hashCode * 59 + DidYouMean.GetHashCode();
                hashCode = hashCode * 59 + Disposable.GetHashCode();
                hashCode = hashCode * 59 + RoleBased.GetHashCode();
                return hashCode;
            }
        }
    }
}