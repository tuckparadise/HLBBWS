/*
 * Infobip Client API Libraries OpenAPI Specification
 * OpenAPI specification containing public endpoints supported in client API libraries.
 *
 * Contact: support@infobip.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;

namespace Infobip.Api.Client.Model
{
    /// <summary>
    ///     SmsPrice
    /// </summary>
    [DataContract(Name = "SmsPrice")]
    public class SmsPrice : IEquatable<SmsPrice>
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="SmsPrice" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public SmsPrice()
        {
        }

        /// <summary>
        ///     The currency in which the price is expressed.
        /// </summary>
        /// <value>The currency in which the price is expressed.</value>
        [DataMember(Name = "currency", EmitDefaultValue = false)]
        public string Currency { get; private set; }

        /// <summary>
        ///     Price per one SMS.
        /// </summary>
        /// <value>Price per one SMS.</value>
        [DataMember(Name = "pricePerMessage", EmitDefaultValue = false)]
        public double PricePerMessage { get; private set; }

        /// <summary>
        ///     Returns false as Currency should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCurrency()
        {
            return false;
        }

        /// <summary>
        ///     Returns false as PricePerMessage should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePricePerMessage()
        {
            return false;
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SmsPrice {\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  PricePerMessage: ").Append(PricePerMessage).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as SmsPrice);
        }

        /// <summary>
        ///     Returns true if SmsPrice instances are equal
        /// </summary>
        /// <param name="input">Instance of SmsPrice to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SmsPrice input)
        {
            if (input == null)
                return false;

            return
                (
                    Currency == input.Currency ||
                    Currency != null &&
                    Currency.Equals(input.Currency)
                ) &&
                (
                    PricePerMessage == input.PricePerMessage ||
                    PricePerMessage.Equals(input.PricePerMessage)
                );
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (Currency != null)
                    hashCode = hashCode * 59 + Currency.GetHashCode();
                hashCode = hashCode * 59 + PricePerMessage.GetHashCode();
                return hashCode;
            }
        }
    }
}