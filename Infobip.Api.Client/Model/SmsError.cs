/*
 * Infobip Client API Libraries OpenAPI Specification
 * OpenAPI specification containing public endpoints supported in client API libraries.
 *
 * Contact: support@infobip.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;

namespace Infobip.Api.Client.Model
{
    /// <summary>
    ///     SmsError
    /// </summary>
    [DataContract(Name = "SmsError")]
    public class SmsError : IEquatable<SmsError>
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="SmsError" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public SmsError()
        {
        }

        /// <summary>
        ///     Human-readable description of the error..
        /// </summary>
        /// <value>Human-readable description of the error..</value>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; private set; }

        /// <summary>
        ///     Error group ID.
        /// </summary>
        /// <value>Error group ID.</value>
        [DataMember(Name = "groupId", EmitDefaultValue = false)]
        public int GroupId { get; private set; }

        /// <summary>
        ///     Error group name.
        /// </summary>
        /// <value>Error group name.</value>
        [DataMember(Name = "groupName", EmitDefaultValue = false)]
        public string GroupName { get; private set; }

        /// <summary>
        ///     Error ID.
        /// </summary>
        /// <value>Error ID.</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public int Id { get; private set; }

        /// <summary>
        ///     Error name.
        /// </summary>
        /// <value>Error name.</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; private set; }

        /// <summary>
        ///     Tells if the error is permanent.
        /// </summary>
        /// <value>Tells if the error is permanent.</value>
        [DataMember(Name = "permanent", EmitDefaultValue = true)]
        public bool Permanent { get; private set; }

        /// <summary>
        ///     Returns false as Description should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDescription()
        {
            return false;
        }

        /// <summary>
        ///     Returns false as GroupId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeGroupId()
        {
            return false;
        }

        /// <summary>
        ///     Returns false as GroupName should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeGroupName()
        {
            return false;
        }

        /// <summary>
        ///     Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return false;
        }

        /// <summary>
        ///     Returns false as Name should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeName()
        {
            return false;
        }

        /// <summary>
        ///     Returns false as Permanent should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePermanent()
        {
            return false;
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SmsError {\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  GroupId: ").Append(GroupId).Append("\n");
            sb.Append("  GroupName: ").Append(GroupName).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Permanent: ").Append(Permanent).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as SmsError);
        }

        /// <summary>
        ///     Returns true if SmsError instances are equal
        /// </summary>
        /// <param name="input">Instance of SmsError to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SmsError input)
        {
            if (input == null)
                return false;

            return
                (
                    Description == input.Description ||
                    Description != null &&
                    Description.Equals(input.Description)
                ) &&
                (
                    GroupId == input.GroupId ||
                    GroupId.Equals(input.GroupId)
                ) &&
                (
                    GroupName == input.GroupName ||
                    GroupName != null &&
                    GroupName.Equals(input.GroupName)
                ) &&
                (
                    Id == input.Id ||
                    Id.Equals(input.Id)
                ) &&
                (
                    Name == input.Name ||
                    Name != null &&
                    Name.Equals(input.Name)
                ) &&
                (
                    Permanent == input.Permanent ||
                    Permanent.Equals(input.Permanent)
                );
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                hashCode = hashCode * 59 + GroupId.GetHashCode();
                if (GroupName != null)
                    hashCode = hashCode * 59 + GroupName.GetHashCode();
                hashCode = hashCode * 59 + Id.GetHashCode();
                if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                hashCode = hashCode * 59 + Permanent.GetHashCode();
                return hashCode;
            }
        }
    }
}