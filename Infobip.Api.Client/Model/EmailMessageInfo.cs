/*
 * Infobip Client API Libraries OpenAPI Specification
 * OpenAPI specification containing public endpoints supported in client API libraries.
 *
 * Contact: support@infobip.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;

namespace Infobip.Api.Client.Model
{
    /// <summary>
    ///     EmailMessageInfo
    /// </summary>
    [DataContract(Name = "EmailMessageInfo")]
    public class EmailMessageInfo : IEquatable<EmailMessageInfo>
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="EmailMessageInfo" /> class.
        /// </summary>
        /// <param name="messageCount">messageCount.</param>
        /// <param name="messageId">messageId.</param>
        /// <param name="status">status.</param>
        /// <param name="to">to.</param>
        public EmailMessageInfo(int messageCount = default(int), string messageId = default(string),
            EmailMessageStatus status = default, string to = default(string))
        {
            MessageCount = messageCount;
            MessageId = messageId;
            Status = status;
            To = to;
        }

        /// <summary>
        ///     Gets or Sets MessageCount
        /// </summary>
        [DataMember(Name = "messageCount", EmitDefaultValue = false)]
        public int MessageCount { get; set; }

        /// <summary>
        ///     Gets or Sets MessageId
        /// </summary>
        [DataMember(Name = "messageId", EmitDefaultValue = false)]
        public string MessageId { get; set; }

        /// <summary>
        ///     Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public EmailMessageStatus Status { get; set; }

        /// <summary>
        ///     Gets or Sets To
        /// </summary>
        [DataMember(Name = "to", EmitDefaultValue = false)]
        public string To { get; set; }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EmailMessageInfo {\n");
            sb.Append("  MessageCount: ").Append(MessageCount).Append("\n");
            sb.Append("  MessageId: ").Append(MessageId).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  To: ").Append(To).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as EmailMessageInfo);
        }

        /// <summary>
        ///     Returns true if EmailMessageInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of EmailMessageInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EmailMessageInfo input)
        {
            if (input == null)
                return false;

            return
                (
                    MessageCount == input.MessageCount ||
                    MessageCount.Equals(input.MessageCount)
                ) &&
                (
                    MessageId == input.MessageId ||
                    MessageId != null &&
                    MessageId.Equals(input.MessageId)
                ) &&
                (
                    Status == input.Status ||
                    Status != null &&
                    Status.Equals(input.Status)
                ) &&
                (
                    To == input.To ||
                    To != null &&
                    To.Equals(input.To)
                );
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + MessageCount.GetHashCode();
                if (MessageId != null)
                    hashCode = hashCode * 59 + MessageId.GetHashCode();
                if (Status != null)
                    hashCode = hashCode * 59 + Status.GetHashCode();
                if (To != null)
                    hashCode = hashCode * 59 + To.GetHashCode();
                return hashCode;
            }
        }
    }
}