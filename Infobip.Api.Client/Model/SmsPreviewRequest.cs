/*
 * Infobip Client API Libraries OpenAPI Specification
 * OpenAPI specification containing public endpoints supported in client API libraries.
 *
 * Contact: support@infobip.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;

namespace Infobip.Api.Client.Model
{
    /// <summary>
    ///     SmsPreviewRequest
    /// </summary>
    [DataContract(Name = "SmsPreviewRequest")]
    public class SmsPreviewRequest : IEquatable<SmsPreviewRequest>
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="SmsPreviewRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SmsPreviewRequest()
        {
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="SmsPreviewRequest" /> class.
        /// </summary>
        /// <param name="languageCode">
        ///     Code for language character set of a message text. Possible values: &#x60;TR&#x60; for
        ///     Turkish, &#x60;ES&#x60; for Spanish, &#x60;PT&#x60; for Portuguese and &#x60;AUTODETECT&#x60; to let platform pick
        ///     character set automatically based on the message text..
        /// </param>
        /// <param name="text">Message text to preview. (required).</param>
        /// <param name="transliteration">
        ///     Conversion of a message text from one script to another. Possible values: &#x60;TURKISH
        ///     &#x60;, &#x60;GREEK&#x60;, &#x60;CYRILLIC&#x60;, &#x60;SERBIAN_CYRILLIC&#x60;, &#x60;CENTRAL_EUROPEAN&#x60;, &#x60;
        ///     BALTIC&#x60; and &#x60;NON_UNICODE&#x60;..
        /// </param>
        public SmsPreviewRequest(string languageCode = default(string), string text = default(string),
            string transliteration = default(string))
        {
            // to ensure "text" is required (not null)
            Text = text ?? throw new ArgumentNullException("text");
            LanguageCode = languageCode;
            Transliteration = transliteration;
        }

        /// <summary>
        ///     Code for language character set of a message text. Possible values: &#x60;TR&#x60; for Turkish, &#x60;ES&#x60; for
        ///     Spanish, &#x60;PT&#x60; for Portuguese and &#x60;AUTODETECT&#x60; to let platform pick character set automatically
        ///     based on the message text.
        /// </summary>
        /// <value>
        ///     Code for language character set of a message text. Possible values: &#x60;TR&#x60; for Turkish, &#x60;ES&#x60;
        ///     for Spanish, &#x60;PT&#x60; for Portuguese and &#x60;AUTODETECT&#x60; to let platform pick character set
        ///     automatically based on the message text.
        /// </value>
        [DataMember(Name = "languageCode", EmitDefaultValue = false)]
        public string LanguageCode { get; set; }

        /// <summary>
        ///     Message text to preview.
        /// </summary>
        /// <value>Message text to preview.</value>
        [DataMember(Name = "text", IsRequired = true, EmitDefaultValue = false)]
        public string Text { get; set; }

        /// <summary>
        ///     Conversion of a message text from one script to another. Possible values: &#x60;TURKISH&#x60;, &#x60;GREEK&#x60;,
        ///     &#x60;CYRILLIC&#x60;, &#x60;SERBIAN_CYRILLIC&#x60;, &#x60;CENTRAL_EUROPEAN&#x60;, &#x60;BALTIC&#x60; and &#x60;
        ///     NON_UNICODE&#x60;.
        /// </summary>
        /// <value>
        ///     Conversion of a message text from one script to another. Possible values: &#x60;TURKISH&#x60;, &#x60;GREEK&#x60;
        ///     , &#x60;CYRILLIC&#x60;, &#x60;SERBIAN_CYRILLIC&#x60;, &#x60;CENTRAL_EUROPEAN&#x60;, &#x60;BALTIC&#x60; and &#x60;
        ///     NON_UNICODE&#x60;.
        /// </value>
        [DataMember(Name = "transliteration", EmitDefaultValue = false)]
        public string Transliteration { get; set; }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SmsPreviewRequest {\n");
            sb.Append("  LanguageCode: ").Append(LanguageCode).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  Transliteration: ").Append(Transliteration).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as SmsPreviewRequest);
        }

        /// <summary>
        ///     Returns true if SmsPreviewRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of SmsPreviewRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SmsPreviewRequest input)
        {
            if (input == null)
                return false;

            return
                (
                    LanguageCode == input.LanguageCode ||
                    LanguageCode != null &&
                    LanguageCode.Equals(input.LanguageCode)
                ) &&
                (
                    Text == input.Text ||
                    Text != null &&
                    Text.Equals(input.Text)
                ) &&
                (
                    Transliteration == input.Transliteration ||
                    Transliteration != null &&
                    Transliteration.Equals(input.Transliteration)
                );
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (LanguageCode != null)
                    hashCode = hashCode * 59 + LanguageCode.GetHashCode();
                if (Text != null)
                    hashCode = hashCode * 59 + Text.GetHashCode();
                if (Transliteration != null)
                    hashCode = hashCode * 59 + Transliteration.GetHashCode();
                return hashCode;
            }
        }
    }
}