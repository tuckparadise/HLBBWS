/*
 * Infobip Client API Libraries OpenAPI Specification
 * OpenAPI specification containing public endpoints supported in client API libraries.
 *
 * Contact: support@infobip.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;

namespace Infobip.Api.Client.Model
{
    /// <summary>
    ///     SmsReport
    /// </summary>
    [DataContract(Name = "SmsReport")]
    public class SmsReport : IEquatable<SmsReport>
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="SmsReport" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public SmsReport()
        {
        }

        /// <summary>
        ///     Bulk ID.
        /// </summary>
        /// <value>Bulk ID.</value>
        [DataMember(Name = "bulkId", EmitDefaultValue = false)]
        public string BulkId { get; private set; }

        /// <summary>
        ///     Callback data sent through &#x60;callbackData&#x60; field in fully featured SMS message.
        /// </summary>
        /// <value>Callback data sent through &#x60;callbackData&#x60; field in fully featured SMS message.</value>
        [DataMember(Name = "callbackData", EmitDefaultValue = false)]
        public string CallbackData { get; private set; }

        /// <summary>
        ///     Tells when the SMS was finished processing by Infobip (i.e., delivered to the destination, delivered to the
        ///     destination network, etc.). Has the following format: &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;.
        /// </summary>
        /// <value>
        ///     Tells when the SMS was finished processing by Infobip (i.e., delivered to the destination, delivered to the
        ///     destination network, etc.). Has the following format: &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;.
        /// </value>
        [DataMember(Name = "doneAt", EmitDefaultValue = false)]
        public DateTimeOffset DoneAt { get; private set; }

        /// <summary>
        ///     Indicates whether the error occurred during the query execution.
        /// </summary>
        /// <value>Indicates whether the error occurred during the query execution.</value>
        [DataMember(Name = "error", EmitDefaultValue = false)]
        public SmsError Error { get; private set; }

        /// <summary>
        ///     Sender ID that can be alphanumeric or numeric.
        /// </summary>
        /// <value>Sender ID that can be alphanumeric or numeric.</value>
        [DataMember(Name = "from", EmitDefaultValue = false)]
        public string From { get; private set; }

        /// <summary>
        ///     Mobile country and network codes.
        /// </summary>
        /// <value>Mobile country and network codes.</value>
        [DataMember(Name = "mccMnc", EmitDefaultValue = false)]
        public string MccMnc { get; private set; }

        /// <summary>
        ///     Message ID.
        /// </summary>
        /// <value>Message ID.</value>
        [DataMember(Name = "messageId", EmitDefaultValue = false)]
        public string MessageId { get; private set; }

        /// <summary>
        ///     Sent SMS price.
        /// </summary>
        /// <value>Sent SMS price.</value>
        [DataMember(Name = "price", EmitDefaultValue = false)]
        public SmsPrice Price { get; private set; }

        /// <summary>
        ///     Tells when the SMS was sent. Has the following format: &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;.
        /// </summary>
        /// <value>Tells when the SMS was sent. Has the following format: &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;.</value>
        [DataMember(Name = "sentAt", EmitDefaultValue = false)]
        public DateTimeOffset SentAt { get; private set; }

        /// <summary>
        ///     The number of parts the sent SMS was split into.
        /// </summary>
        /// <value>The number of parts the sent SMS was split into.</value>
        [DataMember(Name = "smsCount", EmitDefaultValue = false)]
        public int SmsCount { get; private set; }

        /// <summary>
        ///     Indicates whether the message is successfully sent, not sent, delivered, not delivered, waiting for delivery or any
        ///     other possible status.
        /// </summary>
        /// <value>
        ///     Indicates whether the message is successfully sent, not sent, delivered, not delivered, waiting for delivery or
        ///     any other possible status.
        /// </value>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public SmsStatus Status { get; private set; }

        /// <summary>
        ///     Destination address.
        /// </summary>
        /// <value>Destination address.</value>
        [DataMember(Name = "to", EmitDefaultValue = false)]
        public string To { get; private set; }

        /// <summary>
        ///     Returns false as BulkId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeBulkId()
        {
            return false;
        }

        /// <summary>
        ///     Returns false as CallbackData should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCallbackData()
        {
            return false;
        }

        /// <summary>
        ///     Returns false as DoneAt should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDoneAt()
        {
            return false;
        }

        /// <summary>
        ///     Returns false as Error should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeError()
        {
            return false;
        }

        /// <summary>
        ///     Returns false as From should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeFrom()
        {
            return false;
        }

        /// <summary>
        ///     Returns false as MccMnc should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeMccMnc()
        {
            return false;
        }

        /// <summary>
        ///     Returns false as MessageId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeMessageId()
        {
            return false;
        }

        /// <summary>
        ///     Returns false as Price should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePrice()
        {
            return false;
        }

        /// <summary>
        ///     Returns false as SentAt should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeSentAt()
        {
            return false;
        }

        /// <summary>
        ///     Returns false as SmsCount should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeSmsCount()
        {
            return false;
        }

        /// <summary>
        ///     Returns false as Status should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeStatus()
        {
            return false;
        }

        /// <summary>
        ///     Returns false as To should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeTo()
        {
            return false;
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SmsReport {\n");
            sb.Append("  BulkId: ").Append(BulkId).Append("\n");
            sb.Append("  CallbackData: ").Append(CallbackData).Append("\n");
            sb.Append("  DoneAt: ").Append(DoneAt).Append("\n");
            sb.Append("  Error: ").Append(Error).Append("\n");
            sb.Append("  From: ").Append(From).Append("\n");
            sb.Append("  MccMnc: ").Append(MccMnc).Append("\n");
            sb.Append("  MessageId: ").Append(MessageId).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  SentAt: ").Append(SentAt).Append("\n");
            sb.Append("  SmsCount: ").Append(SmsCount).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  To: ").Append(To).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as SmsReport);
        }

        /// <summary>
        ///     Returns true if SmsReport instances are equal
        /// </summary>
        /// <param name="input">Instance of SmsReport to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SmsReport input)
        {
            if (input == null)
                return false;

            return
                (
                    BulkId == input.BulkId ||
                    BulkId != null &&
                    BulkId.Equals(input.BulkId)
                ) &&
                (
                    CallbackData == input.CallbackData ||
                    CallbackData != null &&
                    CallbackData.Equals(input.CallbackData)
                ) &&
                (
                    DoneAt == input.DoneAt ||
                    DoneAt != null &&
                    DoneAt.Equals(input.DoneAt)
                ) &&
                (
                    Error == input.Error ||
                    Error != null &&
                    Error.Equals(input.Error)
                ) &&
                (
                    From == input.From ||
                    From != null &&
                    From.Equals(input.From)
                ) &&
                (
                    MccMnc == input.MccMnc ||
                    MccMnc != null &&
                    MccMnc.Equals(input.MccMnc)
                ) &&
                (
                    MessageId == input.MessageId ||
                    MessageId != null &&
                    MessageId.Equals(input.MessageId)
                ) &&
                (
                    Price == input.Price ||
                    Price != null &&
                    Price.Equals(input.Price)
                ) &&
                (
                    SentAt == input.SentAt ||
                    SentAt != null &&
                    SentAt.Equals(input.SentAt)
                ) &&
                (
                    SmsCount == input.SmsCount ||
                    SmsCount.Equals(input.SmsCount)
                ) &&
                (
                    Status == input.Status ||
                    Status != null &&
                    Status.Equals(input.Status)
                ) &&
                (
                    To == input.To ||
                    To != null &&
                    To.Equals(input.To)
                );
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (BulkId != null)
                    hashCode = hashCode * 59 + BulkId.GetHashCode();
                if (CallbackData != null)
                    hashCode = hashCode * 59 + CallbackData.GetHashCode();
                if (DoneAt != null)
                    hashCode = hashCode * 59 + DoneAt.GetHashCode();
                if (Error != null)
                    hashCode = hashCode * 59 + Error.GetHashCode();
                if (From != null)
                    hashCode = hashCode * 59 + From.GetHashCode();
                if (MccMnc != null)
                    hashCode = hashCode * 59 + MccMnc.GetHashCode();
                if (MessageId != null)
                    hashCode = hashCode * 59 + MessageId.GetHashCode();
                if (Price != null)
                    hashCode = hashCode * 59 + Price.GetHashCode();
                if (SentAt != null)
                    hashCode = hashCode * 59 + SentAt.GetHashCode();
                hashCode = hashCode * 59 + SmsCount.GetHashCode();
                if (Status != null)
                    hashCode = hashCode * 59 + Status.GetHashCode();
                if (To != null)
                    hashCode = hashCode * 59 + To.GetHashCode();
                return hashCode;
            }
        }
    }
}