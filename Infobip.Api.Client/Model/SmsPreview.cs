/*
 * Infobip Client API Libraries OpenAPI Specification
 * OpenAPI specification containing public endpoints supported in client API libraries.
 *
 * Contact: support@infobip.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;

namespace Infobip.Api.Client.Model
{
    /// <summary>
    ///     SmsPreview
    /// </summary>
    [DataContract(Name = "SmsPreview")]
    public class SmsPreview : IEquatable<SmsPreview>
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="SmsPreview" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public SmsPreview()
        {
        }

        /// <summary>
        ///     Number of remaining characters in the last SMS part.
        /// </summary>
        /// <value>Number of remaining characters in the last SMS part.</value>
        [DataMember(Name = "charactersRemaining", EmitDefaultValue = false)]
        public int CharactersRemaining { get; private set; }

        /// <summary>
        ///     Configuration that, when sent with the original text, results in this preview.
        /// </summary>
        /// <value>Configuration that, when sent with the original text, results in this preview.</value>
        [DataMember(Name = "configuration", EmitDefaultValue = false)]
        public SmsLanguageConfiguration Configuration { get; private set; }

        /// <summary>
        ///     Number of SMS message parts required to deliver the message.
        /// </summary>
        /// <value>Number of SMS message parts required to deliver the message.</value>
        [DataMember(Name = "messageCount", EmitDefaultValue = false)]
        public int MessageCount { get; private set; }

        /// <summary>
        ///     Preview of the text as it should appear on the recipient’s device.
        /// </summary>
        /// <value>Preview of the text as it should appear on the recipient’s device.</value>
        [DataMember(Name = "textPreview", EmitDefaultValue = false)]
        public string TextPreview { get; private set; }

        /// <summary>
        ///     Returns false as CharactersRemaining should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCharactersRemaining()
        {
            return false;
        }

        /// <summary>
        ///     Returns false as Configuration should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeConfiguration()
        {
            return false;
        }

        /// <summary>
        ///     Returns false as MessageCount should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeMessageCount()
        {
            return false;
        }

        /// <summary>
        ///     Returns false as TextPreview should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeTextPreview()
        {
            return false;
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SmsPreview {\n");
            sb.Append("  CharactersRemaining: ").Append(CharactersRemaining).Append("\n");
            sb.Append("  Configuration: ").Append(Configuration).Append("\n");
            sb.Append("  MessageCount: ").Append(MessageCount).Append("\n");
            sb.Append("  TextPreview: ").Append(TextPreview).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as SmsPreview);
        }

        /// <summary>
        ///     Returns true if SmsPreview instances are equal
        /// </summary>
        /// <param name="input">Instance of SmsPreview to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SmsPreview input)
        {
            if (input == null)
                return false;

            return
                (
                    CharactersRemaining == input.CharactersRemaining ||
                    CharactersRemaining.Equals(input.CharactersRemaining)
                ) &&
                (
                    Configuration == input.Configuration ||
                    Configuration != null &&
                    Configuration.Equals(input.Configuration)
                ) &&
                (
                    MessageCount == input.MessageCount ||
                    MessageCount.Equals(input.MessageCount)
                ) &&
                (
                    TextPreview == input.TextPreview ||
                    TextPreview != null &&
                    TextPreview.Equals(input.TextPreview)
                );
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + CharactersRemaining.GetHashCode();
                if (Configuration != null)
                    hashCode = hashCode * 59 + Configuration.GetHashCode();
                hashCode = hashCode * 59 + MessageCount.GetHashCode();
                if (TextPreview != null)
                    hashCode = hashCode * 59 + TextPreview.GetHashCode();
                return hashCode;
            }
        }
    }
}