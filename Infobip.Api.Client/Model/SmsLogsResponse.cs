/*
 * Infobip Client API Libraries OpenAPI Specification
 * OpenAPI specification containing public endpoints supported in client API libraries.
 *
 * Contact: support@infobip.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;

namespace Infobip.Api.Client.Model
{
    /// <summary>
    ///     SmsLogsResponse
    /// </summary>
    [DataContract(Name = "SmsLogsResponse")]
    public class SmsLogsResponse : IEquatable<SmsLogsResponse>
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="SmsLogsResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public SmsLogsResponse()
        {
        }

        /// <summary>
        ///     Collection of logs.
        /// </summary>
        /// <value>Collection of logs.</value>
        [DataMember(Name = "results", EmitDefaultValue = false)]
        public List<SmsLog> Results { get; private set; }

        /// <summary>
        ///     Returns false as Results should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeResults()
        {
            return false;
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SmsLogsResponse {\n");
            sb.Append("  Results: ").Append(Results).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as SmsLogsResponse);
        }

        /// <summary>
        ///     Returns true if SmsLogsResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of SmsLogsResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SmsLogsResponse input)
        {
            if (input == null)
                return false;

            return
                Results == input.Results ||
                Results != null &&
                input.Results != null &&
                Results.SequenceEqual(input.Results);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (Results != null)
                    hashCode = hashCode * 59 + Results.GetHashCode();
                return hashCode;
            }
        }
    }
}