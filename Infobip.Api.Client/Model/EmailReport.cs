/*
 * Infobip Client API Libraries OpenAPI Specification
 * OpenAPI specification containing public endpoints supported in client API libraries.
 *
 * Contact: support@infobip.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;

namespace Infobip.Api.Client.Model
{
    /// <summary>
    ///     EmailReport
    /// </summary>
    [DataContract(Name = "EmailReport")]
    public class EmailReport : IEquatable<EmailReport>
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="EmailReport" /> class.
        /// </summary>
        /// <param name="bulkId">The ID that uniquely identifies bulks of request..</param>
        /// <param name="messageId">The ID that uniquely identifies the sent email request..</param>
        /// <param name="to">The recipient email address..</param>
        /// <param name="sentAt">
        ///     Tells when the email was initiated. Has the following format: &#x60;yyyy-MM-dd&#39;T&#39;
        ///     HH:mm:ss.SSSZ&#x60;..
        /// </param>
        /// <param name="doneAt">Tells when the email request was processed by Infobip.</param>
        /// <param name="messageCount">Email request count..</param>
        /// <param name="price">price.</param>
        /// <param name="status">status.</param>
        /// <param name="error">error.</param>
        /// <param name="channel">Infobip channel..</param>
        public EmailReport(string bulkId = default(string), string messageId = default(string),
            string to = default(string), DateTimeOffset sentAt = default(DateTimeOffset),
            DateTimeOffset doneAt = default(DateTimeOffset), int messageCount = default(int),
            EmailPrice price = default, EmailStatus status = default, EmailReportError error = default,
            string channel = default(string))
        {
            BulkId = bulkId;
            MessageId = messageId;
            To = to;
            SentAt = sentAt;
            DoneAt = doneAt;
            MessageCount = messageCount;
            Price = price;
            Status = status;
            Error = error;
            Channel = channel;
        }

        /// <summary>
        ///     The ID that uniquely identifies bulks of request.
        /// </summary>
        /// <value>The ID that uniquely identifies bulks of request.</value>
        [DataMember(Name = "bulkId", EmitDefaultValue = false)]
        public string BulkId { get; set; }

        /// <summary>
        ///     The ID that uniquely identifies the sent email request.
        /// </summary>
        /// <value>The ID that uniquely identifies the sent email request.</value>
        [DataMember(Name = "messageId", EmitDefaultValue = false)]
        public string MessageId { get; set; }

        /// <summary>
        ///     The recipient email address.
        /// </summary>
        /// <value>The recipient email address.</value>
        [DataMember(Name = "to", EmitDefaultValue = false)]
        public string To { get; set; }

        /// <summary>
        ///     Tells when the email was initiated. Has the following format: &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;.
        /// </summary>
        /// <value>Tells when the email was initiated. Has the following format: &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;.</value>
        [DataMember(Name = "sentAt", EmitDefaultValue = false)]
        public DateTimeOffset SentAt { get; set; }

        /// <summary>
        ///     Tells when the email request was processed by Infobip
        /// </summary>
        /// <value>Tells when the email request was processed by Infobip</value>
        [DataMember(Name = "doneAt", EmitDefaultValue = false)]
        public DateTimeOffset DoneAt { get; set; }

        /// <summary>
        ///     Email request count.
        /// </summary>
        /// <value>Email request count.</value>
        [DataMember(Name = "messageCount", EmitDefaultValue = false)]
        public int MessageCount { get; set; }

        /// <summary>
        ///     Gets or Sets Price
        /// </summary>
        [DataMember(Name = "price", EmitDefaultValue = false)]
        public EmailPrice Price { get; set; }

        /// <summary>
        ///     Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public EmailStatus Status { get; set; }

        /// <summary>
        ///     Gets or Sets Error
        /// </summary>
        [DataMember(Name = "error", EmitDefaultValue = false)]
        public EmailReportError Error { get; set; }

        /// <summary>
        ///     Infobip channel.
        /// </summary>
        /// <value>Infobip channel.</value>
        [DataMember(Name = "channel", EmitDefaultValue = false)]
        public string Channel { get; set; }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EmailReport {\n");
            sb.Append("  BulkId: ").Append(BulkId).Append("\n");
            sb.Append("  MessageId: ").Append(MessageId).Append("\n");
            sb.Append("  To: ").Append(To).Append("\n");
            sb.Append("  SentAt: ").Append(SentAt).Append("\n");
            sb.Append("  DoneAt: ").Append(DoneAt).Append("\n");
            sb.Append("  MessageCount: ").Append(MessageCount).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Error: ").Append(Error).Append("\n");
            sb.Append("  Channel: ").Append(Channel).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as EmailReport);
        }

        /// <summary>
        ///     Returns true if EmailReport instances are equal
        /// </summary>
        /// <param name="input">Instance of EmailReport to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EmailReport input)
        {
            if (input == null)
                return false;

            return
                (
                    BulkId == input.BulkId ||
                    BulkId != null &&
                    BulkId.Equals(input.BulkId)
                ) &&
                (
                    MessageId == input.MessageId ||
                    MessageId != null &&
                    MessageId.Equals(input.MessageId)
                ) &&
                (
                    To == input.To ||
                    To != null &&
                    To.Equals(input.To)
                ) &&
                (
                    SentAt == input.SentAt ||
                    SentAt != null &&
                    SentAt.Equals(input.SentAt)
                ) &&
                (
                    DoneAt == input.DoneAt ||
                    DoneAt != null &&
                    DoneAt.Equals(input.DoneAt)
                ) &&
                (
                    MessageCount == input.MessageCount ||
                    MessageCount.Equals(input.MessageCount)
                ) &&
                (
                    Price == input.Price ||
                    Price != null &&
                    Price.Equals(input.Price)
                ) &&
                (
                    Status == input.Status ||
                    Status != null &&
                    Status.Equals(input.Status)
                ) &&
                (
                    Error == input.Error ||
                    Error != null &&
                    Error.Equals(input.Error)
                ) &&
                (
                    Channel == input.Channel ||
                    Channel != null &&
                    Channel.Equals(input.Channel)
                );
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (BulkId != null)
                    hashCode = hashCode * 59 + BulkId.GetHashCode();
                if (MessageId != null)
                    hashCode = hashCode * 59 + MessageId.GetHashCode();
                if (To != null)
                    hashCode = hashCode * 59 + To.GetHashCode();
                if (SentAt != null)
                    hashCode = hashCode * 59 + SentAt.GetHashCode();
                if (DoneAt != null)
                    hashCode = hashCode * 59 + DoneAt.GetHashCode();
                hashCode = hashCode * 59 + MessageCount.GetHashCode();
                if (Price != null)
                    hashCode = hashCode * 59 + Price.GetHashCode();
                if (Status != null)
                    hashCode = hashCode * 59 + Status.GetHashCode();
                if (Error != null)
                    hashCode = hashCode * 59 + Error.GetHashCode();
                if (Channel != null)
                    hashCode = hashCode * 59 + Channel.GetHashCode();
                return hashCode;
            }
        }
    }
}