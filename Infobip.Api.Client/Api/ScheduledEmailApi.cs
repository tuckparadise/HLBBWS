/*
 * Infobip Client API Libraries OpenAPI Specification
 * OpenAPI specification containing public endpoints supported in client API libraries.
 *
 * Contact: support@infobip.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using System.Threading;
using System.Threading.Tasks;
using Infobip.Api.Client;
using ClientConfiguration = Infobip.Api.Client.Configuration;
using Infobip.Api.Client.Model;

namespace Infobip.Api.Client.Api
{
    /// <summary>
    ///     Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IScheduledEmailApiSync : IApiAccessor
    {
        #region Synchronous Operations

        /// <summary>
        ///     Get sent email bulks status
        /// </summary>
        /// <remarks>
        ///     See the status of scheduled email messages.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkId"></param>
        /// <returns>EmailBulkStatusResponse</returns>
        EmailBulkStatusResponse GetScheduledEmailStatuses(string bulkId);

        /// <summary>
        ///     Get sent email bulks status
        /// </summary>
        /// <remarks>
        ///     See the status of scheduled email messages.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkId"></param>
        /// <returns>ApiResponse of EmailBulkStatusResponse</returns>
        ApiResponse<EmailBulkStatusResponse> GetScheduledEmailStatusesWithHttpInfo(string bulkId);

        /// <summary>
        ///     Get sent email bulks
        /// </summary>
        /// <remarks>
        ///     See the scheduled time of your Email messages.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkId"></param>
        /// <returns>EmailBulkScheduleResponse</returns>
        EmailBulkScheduleResponse GetScheduledEmails(string bulkId);

        /// <summary>
        ///     Get sent email bulks
        /// </summary>
        /// <remarks>
        ///     See the scheduled time of your Email messages.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkId"></param>
        /// <returns>ApiResponse of EmailBulkScheduleResponse</returns>
        ApiResponse<EmailBulkScheduleResponse> GetScheduledEmailsWithHttpInfo(string bulkId);

        /// <summary>
        ///     Reschedule Email messages
        /// </summary>
        /// <remarks>
        ///     Change the date and time for sending scheduled messages.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkId"></param>
        /// <param name="emailBulkRescheduleRequest"></param>
        /// <returns>EmailBulkRescheduleResponse</returns>
        EmailBulkRescheduleResponse RescheduleEmails(string bulkId,
            EmailBulkRescheduleRequest emailBulkRescheduleRequest);

        /// <summary>
        ///     Reschedule Email messages
        /// </summary>
        /// <remarks>
        ///     Change the date and time for sending scheduled messages.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkId"></param>
        /// <param name="emailBulkRescheduleRequest"></param>
        /// <returns>ApiResponse of EmailBulkRescheduleResponse</returns>
        ApiResponse<EmailBulkRescheduleResponse> RescheduleEmailsWithHttpInfo(string bulkId,
            EmailBulkRescheduleRequest emailBulkRescheduleRequest);

        /// <summary>
        ///     Update scheduled Email messages status
        /// </summary>
        /// <remarks>
        ///     Change status or completely cancel sending of scheduled messages.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkId"></param>
        /// <param name="emailBulkUpdateStatusRequest"></param>
        /// <returns>EmailBulkUpdateStatusResponse</returns>
        EmailBulkUpdateStatusResponse UpdateScheduledEmailStatuses(string bulkId,
            EmailBulkUpdateStatusRequest emailBulkUpdateStatusRequest);

        /// <summary>
        ///     Update scheduled Email messages status
        /// </summary>
        /// <remarks>
        ///     Change status or completely cancel sending of scheduled messages.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkId"></param>
        /// <param name="emailBulkUpdateStatusRequest"></param>
        /// <returns>ApiResponse of EmailBulkUpdateStatusResponse</returns>
        ApiResponse<EmailBulkUpdateStatusResponse> UpdateScheduledEmailStatusesWithHttpInfo(string bulkId,
            EmailBulkUpdateStatusRequest emailBulkUpdateStatusRequest);

        #endregion Synchronous Operations
    }

    /// <summary>
    ///     Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IScheduledEmailApiAsync : IApiAccessor
    {
        #region Asynchronous Operations

        /// <summary>
        ///     Get sent email bulks status
        /// </summary>
        /// <remarks>
        ///     See the status of scheduled email messages.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EmailBulkStatusResponse</returns>
        Task<EmailBulkStatusResponse> GetScheduledEmailStatusesAsync(string bulkId,
            CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        ///     Get sent email bulks status
        /// </summary>
        /// <remarks>
        ///     See the status of scheduled email messages.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EmailBulkStatusResponse)</returns>
        Task<ApiResponse<EmailBulkStatusResponse>> GetScheduledEmailStatusesWithHttpInfoAsync(string bulkId,
            CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        ///     Get sent email bulks
        /// </summary>
        /// <remarks>
        ///     See the scheduled time of your Email messages.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EmailBulkScheduleResponse</returns>
        Task<EmailBulkScheduleResponse> GetScheduledEmailsAsync(string bulkId,
            CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        ///     Get sent email bulks
        /// </summary>
        /// <remarks>
        ///     See the scheduled time of your Email messages.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EmailBulkScheduleResponse)</returns>
        Task<ApiResponse<EmailBulkScheduleResponse>> GetScheduledEmailsWithHttpInfoAsync(string bulkId,
            CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        ///     Reschedule Email messages
        /// </summary>
        /// <remarks>
        ///     Change the date and time for sending scheduled messages.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkId"></param>
        /// <param name="emailBulkRescheduleRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EmailBulkRescheduleResponse</returns>
        Task<EmailBulkRescheduleResponse> RescheduleEmailsAsync(string bulkId,
            EmailBulkRescheduleRequest emailBulkRescheduleRequest,
            CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        ///     Reschedule Email messages
        /// </summary>
        /// <remarks>
        ///     Change the date and time for sending scheduled messages.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkId"></param>
        /// <param name="emailBulkRescheduleRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EmailBulkRescheduleResponse)</returns>
        Task<ApiResponse<EmailBulkRescheduleResponse>> RescheduleEmailsWithHttpInfoAsync(string bulkId,
            EmailBulkRescheduleRequest emailBulkRescheduleRequest,
            CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        ///     Update scheduled Email messages status
        /// </summary>
        /// <remarks>
        ///     Change status or completely cancel sending of scheduled messages.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkId"></param>
        /// <param name="emailBulkUpdateStatusRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EmailBulkUpdateStatusResponse</returns>
        Task<EmailBulkUpdateStatusResponse> UpdateScheduledEmailStatusesAsync(string bulkId,
            EmailBulkUpdateStatusRequest emailBulkUpdateStatusRequest,
            CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        ///     Update scheduled Email messages status
        /// </summary>
        /// <remarks>
        ///     Change status or completely cancel sending of scheduled messages.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkId"></param>
        /// <param name="emailBulkUpdateStatusRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EmailBulkUpdateStatusResponse)</returns>
        Task<ApiResponse<EmailBulkUpdateStatusResponse>> UpdateScheduledEmailStatusesWithHttpInfoAsync(string bulkId,
            EmailBulkUpdateStatusRequest emailBulkUpdateStatusRequest,
            CancellationToken cancellationToken = default(CancellationToken));

        #endregion Asynchronous Operations
    }

    /// <summary>
    ///     Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IScheduledEmailApi : IScheduledEmailApiSync, IScheduledEmailApiAsync
    {
    }

    /// <summary>
    ///     Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class ScheduledEmailApi : IScheduledEmailApi
    {
        private ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        ///     Initializes a new instance of the <see cref="ScheduledEmailApi" /> class.
        /// </summary>
        /// <returns></returns>
        public ScheduledEmailApi() : this((string)null)
        {
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="ScheduledEmailApi" /> class.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public ScheduledEmailApi(string basePath)
        {
            Configuration = ClientConfiguration.MergeConfigurations(
                GlobalConfiguration.Instance,
                new Configuration { BasePath = basePath }
            );
            ApiClient = new ApiClient(Configuration.BasePath);
            Client = ApiClient;
            AsynchronousClient = ApiClient;
            ExceptionFactory = ClientConfiguration.DefaultExceptionFactory;
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="ScheduledEmailApi" /> class using Configuration object.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public ScheduledEmailApi(Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException(nameof(configuration));

            Configuration = ClientConfiguration.MergeConfigurations(
                GlobalConfiguration.Instance,
                configuration
            );
            ApiClient = new ApiClient(Configuration.BasePath);
            Client = ApiClient;
            AsynchronousClient = ApiClient;
            ExceptionFactory = ClientConfiguration.DefaultExceptionFactory;
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="ScheduledEmailApi" /> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        ///     Some configuration settings will not be applied without passing an HttpClientHandler.
        ///     The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public ScheduledEmailApi(HttpClient client) : this(client, (string)null)
        {
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="ScheduledEmailApi" /> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        /// <remarks>
        ///     Some configuration settings will not be applied without passing an HttpClientHandler.
        ///     The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public ScheduledEmailApi(HttpClient client, string basePath)
        {
            if (client == null) throw new ArgumentNullException(nameof(client));

            Configuration = ClientConfiguration.MergeConfigurations(
                GlobalConfiguration.Instance,
                new Configuration { BasePath = basePath }
            );
            ApiClient = new ApiClient(client, Configuration.BasePath);
            Client = ApiClient;
            AsynchronousClient = ApiClient;
            ExceptionFactory = ClientConfiguration.DefaultExceptionFactory;
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="ScheduledEmailApi" /> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        ///     Some configuration settings will not be applied without passing an HttpClientHandler.
        ///     The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public ScheduledEmailApi(HttpClient client, Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException(nameof(configuration));
            if (client == null) throw new ArgumentNullException(nameof(client));

            Configuration = ClientConfiguration.MergeConfigurations(
                GlobalConfiguration.Instance,
                configuration
            );
            ApiClient = new ApiClient(client, Configuration.BasePath);
            Client = ApiClient;
            AsynchronousClient = ApiClient;
            ExceptionFactory = ClientConfiguration.DefaultExceptionFactory;
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="ScheduledEmailApi" /> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public ScheduledEmailApi(HttpClient client, HttpClientHandler handler) : this(client, handler, (string)null)
        {
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="ScheduledEmailApi" /> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An instance of HttpClientHandler that is used by HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public ScheduledEmailApi(HttpClient client, HttpClientHandler handler, string basePath)
        {
            if (client == null) throw new ArgumentNullException(nameof(client));
            if (handler == null) throw new ArgumentNullException(nameof(handler));

            Configuration = ClientConfiguration.MergeConfigurations(
                GlobalConfiguration.Instance,
                new Configuration { BasePath = basePath }
            );
            ApiClient = new ApiClient(client, handler, Configuration.BasePath);
            Client = ApiClient;
            AsynchronousClient = ApiClient;
            ExceptionFactory = ClientConfiguration.DefaultExceptionFactory;
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="ScheduledEmailApi" /> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An instance of HttpClientHandler that is used by HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public ScheduledEmailApi(HttpClient client, HttpClientHandler handler, Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException(nameof(configuration));
            if (client == null) throw new ArgumentNullException(nameof(client));
            if (handler == null) throw new ArgumentNullException(nameof(handler));

            Configuration = ClientConfiguration.MergeConfigurations(
                GlobalConfiguration.Instance,
                configuration
            );
            ApiClient = new ApiClient(client, handler, Configuration.BasePath);
            Client = ApiClient;
            AsynchronousClient = ApiClient;
            ExceptionFactory = ClientConfiguration.DefaultExceptionFactory;
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="ScheduledEmailApi" /> class
        ///     using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public ScheduledEmailApi(ISynchronousClient client, IAsynchronousClient asyncClient,
            IReadableConfiguration configuration)
        {
            Client = client ?? throw new ArgumentNullException(nameof(client));
            AsynchronousClient = asyncClient ?? throw new ArgumentNullException(nameof(asyncClient));
            Configuration = configuration ?? throw new ArgumentNullException(nameof(configuration));
            ExceptionFactory = ClientConfiguration.DefaultExceptionFactory;
        }

        /// <summary>
        ///     Holds the ApiClient if created
        /// </summary>
        public ApiClient ApiClient { get; set; }

        /// <summary>
        ///     The client for accessing this underlying API asynchronously.
        /// </summary>
        public IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        ///     The client for accessing this underlying API synchronously.
        /// </summary>
        public ISynchronousClient Client { get; set; }

        /// <summary>
        ///     Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return Configuration.BasePath;
        }

        /// <summary>
        ///     Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IReadableConfiguration Configuration { get; set; }

        /// <summary>
        ///     Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                return _exceptionFactory;
            }
            set => _exceptionFactory = value;
        }

        /// <summary>
        ///     Get sent email bulks status See the status of scheduled email messages.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkId"></param>
        /// <returns>EmailBulkStatusResponse</returns>
        public EmailBulkStatusResponse GetScheduledEmailStatuses(string bulkId)
        {
            var localVarResponse = GetScheduledEmailStatusesWithHttpInfo(bulkId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Get sent email bulks status See the status of scheduled email messages.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkId"></param>
        /// <returns>ApiResponse of EmailBulkStatusResponse</returns>
        public ApiResponse<EmailBulkStatusResponse> GetScheduledEmailStatusesWithHttpInfo(string bulkId)
        {
            // verify the required parameter 'bulkId' is set
            if (bulkId == null)
                throw new ApiException(400,
                    "Missing required parameter 'bulkId' when calling ScheduledEmailApi->GetScheduledEmailStatuses");

            var localVarRequestOptions = new RequestOptions();

            string[] contentTypes =
            {
            };

            // to determine the Accept header
            string[] accepts =
            {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(contentTypes);
            if (localVarContentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "bulkId", bulkId));

            // authentication (APIKeyHeader) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                    localVarRequestOptions.HeaderParameters.Add("Authorization",
                        Configuration.GetApiKeyWithPrefix("Authorization"));
            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(Configuration.Username) || !string.IsNullOrEmpty(Configuration.Password))
                localVarRequestOptions.HeaderParameters.Add("Authorization",
                    "Basic " + ClientUtils.Base64Encode(Configuration.Username + ":" + Configuration.Password));
            // authentication (IBSSOTokenHeader) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                    localVarRequestOptions.HeaderParameters.Add("Authorization",
                        Configuration.GetApiKeyWithPrefix("Authorization"));
            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(Configuration.AccessToken))
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + Configuration.AccessToken);

            // make the HTTP request
            var localVarResponse =
                Client.Get<EmailBulkStatusResponse>("/email/1/bulks/status", localVarRequestOptions, Configuration);

            Exception exception = ExceptionFactory?.Invoke("GetScheduledEmailStatuses", localVarResponse);
            if (exception != null) throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Get sent email bulks status See the status of scheduled email messages.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EmailBulkStatusResponse</returns>
        public async Task<EmailBulkStatusResponse> GetScheduledEmailStatusesAsync(string bulkId,
            CancellationToken cancellationToken = default(CancellationToken))
        {
            ApiResponse<EmailBulkStatusResponse> localVarResponse =
                await GetScheduledEmailStatusesWithHttpInfoAsync(bulkId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Get sent email bulks status See the status of scheduled email messages.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EmailBulkStatusResponse)</returns>
        public async Task<ApiResponse<EmailBulkStatusResponse>> GetScheduledEmailStatusesWithHttpInfoAsync(
            string bulkId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'bulkId' is set
            if (bulkId == null)
                throw new ApiException(400,
                    "Missing required parameter 'bulkId' when calling ScheduledEmailApi->GetScheduledEmailStatuses");


            var localVarRequestOptions = new RequestOptions();

            string[] contentTypes =
            {
            };

            // to determine the Accept header
            string[] accepts =
            {
                "application/json"
            };


            var localVarContentType = ClientUtils.SelectHeaderContentType(contentTypes);
            if (localVarContentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "bulkId", bulkId));

            // authentication (APIKeyHeader) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                    localVarRequestOptions.HeaderParameters.Add("Authorization",
                        Configuration.GetApiKeyWithPrefix("Authorization"));
            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(Configuration.Username) || !string.IsNullOrEmpty(Configuration.Password))
                localVarRequestOptions.HeaderParameters.Add("Authorization",
                    "Basic " + ClientUtils.Base64Encode(Configuration.Username + ":" + Configuration.Password));
            // authentication (IBSSOTokenHeader) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                    localVarRequestOptions.HeaderParameters.Add("Authorization",
                        Configuration.GetApiKeyWithPrefix("Authorization"));
            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(Configuration.AccessToken))
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + Configuration.AccessToken);

            // make the HTTP request

            var localVarResponse = await AsynchronousClient
                .GetAsync<EmailBulkStatusResponse>("/email/1/bulks/status", localVarRequestOptions, Configuration,
                    cancellationToken).ConfigureAwait(false);

            Exception exception = ExceptionFactory?.Invoke("GetScheduledEmailStatuses", localVarResponse);
            if (exception != null) throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Get sent email bulks See the scheduled time of your Email messages.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkId"></param>
        /// <returns>EmailBulkScheduleResponse</returns>
        public EmailBulkScheduleResponse GetScheduledEmails(string bulkId)
        {
            var localVarResponse = GetScheduledEmailsWithHttpInfo(bulkId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Get sent email bulks See the scheduled time of your Email messages.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkId"></param>
        /// <returns>ApiResponse of EmailBulkScheduleResponse</returns>
        public ApiResponse<EmailBulkScheduleResponse> GetScheduledEmailsWithHttpInfo(string bulkId)
        {
            // verify the required parameter 'bulkId' is set
            if (bulkId == null)
                throw new ApiException(400,
                    "Missing required parameter 'bulkId' when calling ScheduledEmailApi->GetScheduledEmails");

            var localVarRequestOptions = new RequestOptions();

            string[] contentTypes =
            {
            };

            // to determine the Accept header
            string[] accepts =
            {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(contentTypes);
            if (localVarContentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "bulkId", bulkId));

            // authentication (APIKeyHeader) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                    localVarRequestOptions.HeaderParameters.Add("Authorization",
                        Configuration.GetApiKeyWithPrefix("Authorization"));
            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(Configuration.Username) || !string.IsNullOrEmpty(Configuration.Password))
                localVarRequestOptions.HeaderParameters.Add("Authorization",
                    "Basic " + ClientUtils.Base64Encode(Configuration.Username + ":" + Configuration.Password));
            // authentication (IBSSOTokenHeader) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                    localVarRequestOptions.HeaderParameters.Add("Authorization",
                        Configuration.GetApiKeyWithPrefix("Authorization"));
            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(Configuration.AccessToken))
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + Configuration.AccessToken);

            // make the HTTP request
            var localVarResponse =
                Client.Get<EmailBulkScheduleResponse>("/email/1/bulks", localVarRequestOptions, Configuration);

            Exception exception = ExceptionFactory?.Invoke("GetScheduledEmails", localVarResponse);
            if (exception != null) throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Get sent email bulks See the scheduled time of your Email messages.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EmailBulkScheduleResponse</returns>
        public async Task<EmailBulkScheduleResponse> GetScheduledEmailsAsync(string bulkId,
            CancellationToken cancellationToken = default(CancellationToken))
        {
            ApiResponse<EmailBulkScheduleResponse> localVarResponse =
                await GetScheduledEmailsWithHttpInfoAsync(bulkId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Get sent email bulks See the scheduled time of your Email messages.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EmailBulkScheduleResponse)</returns>
        public async Task<ApiResponse<EmailBulkScheduleResponse>> GetScheduledEmailsWithHttpInfoAsync(string bulkId,
            CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'bulkId' is set
            if (bulkId == null)
                throw new ApiException(400,
                    "Missing required parameter 'bulkId' when calling ScheduledEmailApi->GetScheduledEmails");


            var localVarRequestOptions = new RequestOptions();

            string[] contentTypes =
            {
            };

            // to determine the Accept header
            string[] accepts =
            {
                "application/json"
            };


            var localVarContentType = ClientUtils.SelectHeaderContentType(contentTypes);
            if (localVarContentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "bulkId", bulkId));

            // authentication (APIKeyHeader) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                    localVarRequestOptions.HeaderParameters.Add("Authorization",
                        Configuration.GetApiKeyWithPrefix("Authorization"));
            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(Configuration.Username) || !string.IsNullOrEmpty(Configuration.Password))
                localVarRequestOptions.HeaderParameters.Add("Authorization",
                    "Basic " + ClientUtils.Base64Encode(Configuration.Username + ":" + Configuration.Password));
            // authentication (IBSSOTokenHeader) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                    localVarRequestOptions.HeaderParameters.Add("Authorization",
                        Configuration.GetApiKeyWithPrefix("Authorization"));
            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(Configuration.AccessToken))
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + Configuration.AccessToken);

            // make the HTTP request

            var localVarResponse = await AsynchronousClient
                .GetAsync<EmailBulkScheduleResponse>("/email/1/bulks", localVarRequestOptions, Configuration,
                    cancellationToken).ConfigureAwait(false);

            Exception exception = ExceptionFactory?.Invoke("GetScheduledEmails", localVarResponse);
            if (exception != null) throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Reschedule Email messages Change the date and time for sending scheduled messages.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkId"></param>
        /// <param name="emailBulkRescheduleRequest"></param>
        /// <returns>EmailBulkRescheduleResponse</returns>
        public EmailBulkRescheduleResponse RescheduleEmails(string bulkId,
            EmailBulkRescheduleRequest emailBulkRescheduleRequest)
        {
            var localVarResponse = RescheduleEmailsWithHttpInfo(bulkId, emailBulkRescheduleRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Reschedule Email messages Change the date and time for sending scheduled messages.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkId"></param>
        /// <param name="emailBulkRescheduleRequest"></param>
        /// <returns>ApiResponse of EmailBulkRescheduleResponse</returns>
        public ApiResponse<EmailBulkRescheduleResponse> RescheduleEmailsWithHttpInfo(string bulkId,
            EmailBulkRescheduleRequest emailBulkRescheduleRequest)
        {
            // verify the required parameter 'bulkId' is set
            if (bulkId == null)
                throw new ApiException(400,
                    "Missing required parameter 'bulkId' when calling ScheduledEmailApi->RescheduleEmails");

            // verify the required parameter 'emailBulkRescheduleRequest' is set
            if (emailBulkRescheduleRequest == null)
                throw new ApiException(400,
                    "Missing required parameter 'emailBulkRescheduleRequest' when calling ScheduledEmailApi->RescheduleEmails");

            var localVarRequestOptions = new RequestOptions();

            string[] contentTypes =
            {
                "application/json"
            };

            // to determine the Accept header
            string[] accepts =
            {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(contentTypes);
            if (localVarContentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "bulkId", bulkId));
            localVarRequestOptions.Data = emailBulkRescheduleRequest;

            // authentication (APIKeyHeader) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                    localVarRequestOptions.HeaderParameters.Add("Authorization",
                        Configuration.GetApiKeyWithPrefix("Authorization"));
            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(Configuration.Username) || !string.IsNullOrEmpty(Configuration.Password))
                localVarRequestOptions.HeaderParameters.Add("Authorization",
                    "Basic " + ClientUtils.Base64Encode(Configuration.Username + ":" + Configuration.Password));
            // authentication (IBSSOTokenHeader) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                    localVarRequestOptions.HeaderParameters.Add("Authorization",
                        Configuration.GetApiKeyWithPrefix("Authorization"));
            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(Configuration.AccessToken))
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + Configuration.AccessToken);

            // make the HTTP request
            var localVarResponse =
                Client.Put<EmailBulkRescheduleResponse>("/email/1/bulks", localVarRequestOptions, Configuration);

            Exception exception = ExceptionFactory?.Invoke("RescheduleEmails", localVarResponse);
            if (exception != null) throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Reschedule Email messages Change the date and time for sending scheduled messages.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkId"></param>
        /// <param name="emailBulkRescheduleRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EmailBulkRescheduleResponse</returns>
        public async Task<EmailBulkRescheduleResponse> RescheduleEmailsAsync(string bulkId,
            EmailBulkRescheduleRequest emailBulkRescheduleRequest,
            CancellationToken cancellationToken = default(CancellationToken))
        {
            ApiResponse<EmailBulkRescheduleResponse> localVarResponse =
                await RescheduleEmailsWithHttpInfoAsync(bulkId, emailBulkRescheduleRequest, cancellationToken)
                    .ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Reschedule Email messages Change the date and time for sending scheduled messages.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkId"></param>
        /// <param name="emailBulkRescheduleRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EmailBulkRescheduleResponse)</returns>
        public async Task<ApiResponse<EmailBulkRescheduleResponse>> RescheduleEmailsWithHttpInfoAsync(string bulkId,
            EmailBulkRescheduleRequest emailBulkRescheduleRequest,
            CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'bulkId' is set
            if (bulkId == null)
                throw new ApiException(400,
                    "Missing required parameter 'bulkId' when calling ScheduledEmailApi->RescheduleEmails");

            // verify the required parameter 'emailBulkRescheduleRequest' is set
            if (emailBulkRescheduleRequest == null)
                throw new ApiException(400,
                    "Missing required parameter 'emailBulkRescheduleRequest' when calling ScheduledEmailApi->RescheduleEmails");


            var localVarRequestOptions = new RequestOptions();

            string[] contentTypes =
            {
                "application/json"
            };

            // to determine the Accept header
            string[] accepts =
            {
                "application/json"
            };


            var localVarContentType = ClientUtils.SelectHeaderContentType(contentTypes);
            if (localVarContentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "bulkId", bulkId));
            localVarRequestOptions.Data = emailBulkRescheduleRequest;

            // authentication (APIKeyHeader) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                    localVarRequestOptions.HeaderParameters.Add("Authorization",
                        Configuration.GetApiKeyWithPrefix("Authorization"));
            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(Configuration.Username) || !string.IsNullOrEmpty(Configuration.Password))
                localVarRequestOptions.HeaderParameters.Add("Authorization",
                    "Basic " + ClientUtils.Base64Encode(Configuration.Username + ":" + Configuration.Password));
            // authentication (IBSSOTokenHeader) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                    localVarRequestOptions.HeaderParameters.Add("Authorization",
                        Configuration.GetApiKeyWithPrefix("Authorization"));
            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(Configuration.AccessToken))
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + Configuration.AccessToken);

            // make the HTTP request

            var localVarResponse = await AsynchronousClient
                .PutAsync<EmailBulkRescheduleResponse>("/email/1/bulks", localVarRequestOptions, Configuration,
                    cancellationToken).ConfigureAwait(false);

            Exception exception = ExceptionFactory?.Invoke("RescheduleEmails", localVarResponse);
            if (exception != null) throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Update scheduled Email messages status Change status or completely cancel sending of scheduled messages.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkId"></param>
        /// <param name="emailBulkUpdateStatusRequest"></param>
        /// <returns>EmailBulkUpdateStatusResponse</returns>
        public EmailBulkUpdateStatusResponse UpdateScheduledEmailStatuses(string bulkId,
            EmailBulkUpdateStatusRequest emailBulkUpdateStatusRequest)
        {
            var localVarResponse = UpdateScheduledEmailStatusesWithHttpInfo(bulkId, emailBulkUpdateStatusRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Update scheduled Email messages status Change status or completely cancel sending of scheduled messages.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkId"></param>
        /// <param name="emailBulkUpdateStatusRequest"></param>
        /// <returns>ApiResponse of EmailBulkUpdateStatusResponse</returns>
        public ApiResponse<EmailBulkUpdateStatusResponse> UpdateScheduledEmailStatusesWithHttpInfo(string bulkId,
            EmailBulkUpdateStatusRequest emailBulkUpdateStatusRequest)
        {
            // verify the required parameter 'bulkId' is set
            if (bulkId == null)
                throw new ApiException(400,
                    "Missing required parameter 'bulkId' when calling ScheduledEmailApi->UpdateScheduledEmailStatuses");

            // verify the required parameter 'emailBulkUpdateStatusRequest' is set
            if (emailBulkUpdateStatusRequest == null)
                throw new ApiException(400,
                    "Missing required parameter 'emailBulkUpdateStatusRequest' when calling ScheduledEmailApi->UpdateScheduledEmailStatuses");

            var localVarRequestOptions = new RequestOptions();

            string[] contentTypes =
            {
                "application/json"
            };

            // to determine the Accept header
            string[] accepts =
            {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(contentTypes);
            if (localVarContentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "bulkId", bulkId));
            localVarRequestOptions.Data = emailBulkUpdateStatusRequest;

            // authentication (APIKeyHeader) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                    localVarRequestOptions.HeaderParameters.Add("Authorization",
                        Configuration.GetApiKeyWithPrefix("Authorization"));
            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(Configuration.Username) || !string.IsNullOrEmpty(Configuration.Password))
                localVarRequestOptions.HeaderParameters.Add("Authorization",
                    "Basic " + ClientUtils.Base64Encode(Configuration.Username + ":" + Configuration.Password));
            // authentication (IBSSOTokenHeader) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                    localVarRequestOptions.HeaderParameters.Add("Authorization",
                        Configuration.GetApiKeyWithPrefix("Authorization"));
            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(Configuration.AccessToken))
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + Configuration.AccessToken);

            // make the HTTP request
            var localVarResponse =
                Client.Put<EmailBulkUpdateStatusResponse>("/email/1/bulks/status", localVarRequestOptions,
                    Configuration);

            Exception exception = ExceptionFactory?.Invoke("UpdateScheduledEmailStatuses", localVarResponse);
            if (exception != null) throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Update scheduled Email messages status Change status or completely cancel sending of scheduled messages.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkId"></param>
        /// <param name="emailBulkUpdateStatusRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EmailBulkUpdateStatusResponse</returns>
        public async Task<EmailBulkUpdateStatusResponse> UpdateScheduledEmailStatusesAsync(string bulkId,
            EmailBulkUpdateStatusRequest emailBulkUpdateStatusRequest,
            CancellationToken cancellationToken = default(CancellationToken))
        {
            ApiResponse<EmailBulkUpdateStatusResponse> localVarResponse =
                await UpdateScheduledEmailStatusesWithHttpInfoAsync(bulkId, emailBulkUpdateStatusRequest,
                    cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Update scheduled Email messages status Change status or completely cancel sending of scheduled messages.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkId"></param>
        /// <param name="emailBulkUpdateStatusRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EmailBulkUpdateStatusResponse)</returns>
        public async Task<ApiResponse<EmailBulkUpdateStatusResponse>> UpdateScheduledEmailStatusesWithHttpInfoAsync(
            string bulkId, EmailBulkUpdateStatusRequest emailBulkUpdateStatusRequest,
            CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'bulkId' is set
            if (bulkId == null)
                throw new ApiException(400,
                    "Missing required parameter 'bulkId' when calling ScheduledEmailApi->UpdateScheduledEmailStatuses");

            // verify the required parameter 'emailBulkUpdateStatusRequest' is set
            if (emailBulkUpdateStatusRequest == null)
                throw new ApiException(400,
                    "Missing required parameter 'emailBulkUpdateStatusRequest' when calling ScheduledEmailApi->UpdateScheduledEmailStatuses");


            var localVarRequestOptions = new RequestOptions();

            string[] contentTypes =
            {
                "application/json"
            };

            // to determine the Accept header
            string[] accepts =
            {
                "application/json"
            };


            var localVarContentType = ClientUtils.SelectHeaderContentType(contentTypes);
            if (localVarContentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "bulkId", bulkId));
            localVarRequestOptions.Data = emailBulkUpdateStatusRequest;

            // authentication (APIKeyHeader) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                    localVarRequestOptions.HeaderParameters.Add("Authorization",
                        Configuration.GetApiKeyWithPrefix("Authorization"));
            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(Configuration.Username) || !string.IsNullOrEmpty(Configuration.Password))
                localVarRequestOptions.HeaderParameters.Add("Authorization",
                    "Basic " + ClientUtils.Base64Encode(Configuration.Username + ":" + Configuration.Password));
            // authentication (IBSSOTokenHeader) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                    localVarRequestOptions.HeaderParameters.Add("Authorization",
                        Configuration.GetApiKeyWithPrefix("Authorization"));
            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(Configuration.AccessToken))
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + Configuration.AccessToken);

            // make the HTTP request

            var localVarResponse = await AsynchronousClient
                .PutAsync<EmailBulkUpdateStatusResponse>("/email/1/bulks/status", localVarRequestOptions, Configuration,
                    cancellationToken).ConfigureAwait(false);

            Exception exception = ExceptionFactory?.Invoke("UpdateScheduledEmailStatuses", localVarResponse);
            if (exception != null) throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            ApiClient?.Dispose();
        }
    }
}