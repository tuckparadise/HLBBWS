/*
 * Infobip Client API Libraries OpenAPI Specification
 * OpenAPI specification containing public endpoints supported in client API libraries.
 *
 * Contact: support@infobip.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using System.Threading;
using System.Threading.Tasks;
using Infobip.Api.Client;
using ClientConfiguration = Infobip.Api.Client.Configuration;
using Infobip.Api.Client.Model;

namespace Infobip.Api.Client.Api
{
    /// <summary>
    ///     Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISendSmsApiSync : IApiAccessor
    {
        #region Synchronous Operations

        /// <summary>
        ///     Get outbound SMS message delivery reports
        /// </summary>
        /// <remarks>
        ///     If you are for any reason unable to receive real time delivery reports on your endpoint, you can use this API
        ///     method to learn if and when the message has been delivered to the recipient. Each request will return a batch of
        ///     delivery reports - only once. The following API request will return only new reports that arrived since the last
        ///     API request in the last 48 hours.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkId">ID of bulk which delivery report is requested. (optional)</param>
        /// <param name="messageId">ID of SMS which delivery report is requested. (optional)</param>
        /// <param name="limit">Maximal number of delivery reports that will be returned. (optional)</param>
        /// <returns>SmsDeliveryResult</returns>
        SmsDeliveryResult GetOutboundSmsMessageDeliveryReports(string bulkId = default(string),
            string messageId = default(string), int? limit = default(int?));

        /// <summary>
        ///     Get outbound SMS message delivery reports
        /// </summary>
        /// <remarks>
        ///     If you are for any reason unable to receive real time delivery reports on your endpoint, you can use this API
        ///     method to learn if and when the message has been delivered to the recipient. Each request will return a batch of
        ///     delivery reports - only once. The following API request will return only new reports that arrived since the last
        ///     API request in the last 48 hours.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkId">ID of bulk which delivery report is requested. (optional)</param>
        /// <param name="messageId">ID of SMS which delivery report is requested. (optional)</param>
        /// <param name="limit">Maximal number of delivery reports that will be returned. (optional)</param>
        /// <returns>ApiResponse of SmsDeliveryResult</returns>
        ApiResponse<SmsDeliveryResult> GetOutboundSmsMessageDeliveryReportsWithHttpInfo(string bulkId = default(string),
            string messageId = default(string), int? limit = default(int?));

        /// <summary>
        ///     Get outbound SMS message logs
        /// </summary>
        /// <remarks>
        ///     You should use this method for displaying logs in the user interface or for some other less frequent usage. Logs
        ///     are available for the last 48 hours. See [message delivery
        ///     reports](#channels/sms/get-outbound-sms-message-delivery-reports) if your use case is to verify message delivery.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">Sender address. (optional)</param>
        /// <param name="to">Destination address. (optional)</param>
        /// <param name="bulkId">Bulk ID for which log is requested. (optional)</param>
        /// <param name="messageId">SMS ID for which log is requested. (optional)</param>
        /// <param name="generalStatus">Sent SMS status. (optional)</param>
        /// <param name="sentSince">
        ///     Lower limit on date and time of sending SMS. Has the following format: &#x60;yyyy-MM-dd&#39;T
        ///     &#39;HH:mm:ss.SSSZ&#x60;. (optional)
        /// </param>
        /// <param name="sentUntil">
        ///     Upper limit on date and time of sending SMS. Has the following format: &#x60;yyyy-MM-dd&#39;T
        ///     &#39;HH:mm:ss.SSSZ&#x60;. (optional)
        /// </param>
        /// <param name="limit">
        ///     Maximal number of messages in returned logs. Limit should be between &#x60;1&#x60; and &#x60;1000
        ///     &#x60;. If you want to fetch more than 1000 logs you can retrieve them in pages using &#x60;sentSince&#x60; and
        ///     &#x60;sentUntil&#x60; parameters. Defaults to &#x60;50&#x60;. (optional)
        /// </param>
        /// <param name="mcc">Mobile country code. (optional)</param>
        /// <param name="mnc">Mobile network code. (optional)</param>
        /// <returns>SmsLogsResponse</returns>
        SmsLogsResponse GetOutboundSmsMessageLogs(string from = default(string), string to = default(string),
            List<string> bulkId = default(List<string>), List<string> messageId = default(List<string>),
            string generalStatus = default(string), DateTimeOffset? sentSince = default(DateTimeOffset?),
            DateTimeOffset? sentUntil = default(DateTimeOffset?), int? limit = default(int?),
            string mcc = default(string), string mnc = default(string));

        /// <summary>
        ///     Get outbound SMS message logs
        /// </summary>
        /// <remarks>
        ///     You should use this method for displaying logs in the user interface or for some other less frequent usage. Logs
        ///     are available for the last 48 hours. See [message delivery
        ///     reports](#channels/sms/get-outbound-sms-message-delivery-reports) if your use case is to verify message delivery.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">Sender address. (optional)</param>
        /// <param name="to">Destination address. (optional)</param>
        /// <param name="bulkId">Bulk ID for which log is requested. (optional)</param>
        /// <param name="messageId">SMS ID for which log is requested. (optional)</param>
        /// <param name="generalStatus">Sent SMS status. (optional)</param>
        /// <param name="sentSince">
        ///     Lower limit on date and time of sending SMS. Has the following format: &#x60;yyyy-MM-dd&#39;T
        ///     &#39;HH:mm:ss.SSSZ&#x60;. (optional)
        /// </param>
        /// <param name="sentUntil">
        ///     Upper limit on date and time of sending SMS. Has the following format: &#x60;yyyy-MM-dd&#39;T
        ///     &#39;HH:mm:ss.SSSZ&#x60;. (optional)
        /// </param>
        /// <param name="limit">
        ///     Maximal number of messages in returned logs. Limit should be between &#x60;1&#x60; and &#x60;1000
        ///     &#x60;. If you want to fetch more than 1000 logs you can retrieve them in pages using &#x60;sentSince&#x60; and
        ///     &#x60;sentUntil&#x60; parameters. Defaults to &#x60;50&#x60;. (optional)
        /// </param>
        /// <param name="mcc">Mobile country code. (optional)</param>
        /// <param name="mnc">Mobile network code. (optional)</param>
        /// <returns>ApiResponse of SmsLogsResponse</returns>
        ApiResponse<SmsLogsResponse> GetOutboundSmsMessageLogsWithHttpInfo(string from = default(string),
            string to = default(string), List<string> bulkId = default(List<string>),
            List<string> messageId = default(List<string>), string generalStatus = default(string),
            DateTimeOffset? sentSince = default(DateTimeOffset?), DateTimeOffset? sentUntil = default(DateTimeOffset?),
            int? limit = default(int?), string mcc = default(string), string mnc = default(string));

        /// <summary>
        ///     Preview SMS message
        /// </summary>
        /// <remarks>
        ///     Avoid unpleasant surprises and check how different message configurations will affect your message text, number of
        ///     characters and message parts.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="smsPreviewRequest"> (optional)</param>
        /// <returns>SmsPreviewResponse</returns>
        SmsPreviewResponse PreviewSmsMessage(SmsPreviewRequest smsPreviewRequest = default);

        /// <summary>
        ///     Preview SMS message
        /// </summary>
        /// <remarks>
        ///     Avoid unpleasant surprises and check how different message configurations will affect your message text, number of
        ///     characters and message parts.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="smsPreviewRequest"> (optional)</param>
        /// <returns>ApiResponse of SmsPreviewResponse</returns>
        ApiResponse<SmsPreviewResponse> PreviewSmsMessageWithHttpInfo(SmsPreviewRequest smsPreviewRequest = default);

        /// <summary>
        ///     Send binary SMS message
        /// </summary>
        /// <remarks>
        ///     Send single or multiple binary messages to one or more destination address.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="smsAdvancedBinaryRequest"> (optional)</param>
        /// <returns>SmsResponse</returns>
        SmsResponse SendBinarySmsMessage(SmsAdvancedBinaryRequest smsAdvancedBinaryRequest = default);

        /// <summary>
        ///     Send binary SMS message
        /// </summary>
        /// <remarks>
        ///     Send single or multiple binary messages to one or more destination address.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="smsAdvancedBinaryRequest"> (optional)</param>
        /// <returns>ApiResponse of SmsResponse</returns>
        ApiResponse<SmsResponse> SendBinarySmsMessageWithHttpInfo(
            SmsAdvancedBinaryRequest smsAdvancedBinaryRequest = default);

        /// <summary>
        ///     Send SMS message
        /// </summary>
        /// <remarks>
        ///     99% of all use cases can be achieved by using this API method. Everything from sending a simple single message to a
        ///     single destination, up to batch sending of personalized messages to the thousands of recipients with a single API
        ///     request. Language, transliteration, scheduling and every advanced feature you can think of is supported.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="smsAdvancedTextualRequest"> (optional)</param>
        /// <returns>SmsResponse</returns>
        SmsResponse SendSmsMessage(SmsAdvancedTextualRequest smsAdvancedTextualRequest = default);

        /// <summary>
        ///     Send SMS message
        /// </summary>
        /// <remarks>
        ///     99% of all use cases can be achieved by using this API method. Everything from sending a simple single message to a
        ///     single destination, up to batch sending of personalized messages to the thousands of recipients with a single API
        ///     request. Language, transliteration, scheduling and every advanced feature you can think of is supported.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="smsAdvancedTextualRequest"> (optional)</param>
        /// <returns>ApiResponse of SmsResponse</returns>
        ApiResponse<SmsResponse> SendSmsMessageWithHttpInfo(
            SmsAdvancedTextualRequest smsAdvancedTextualRequest = default);

        #endregion Synchronous Operations
    }

    /// <summary>
    ///     Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISendSmsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations

        /// <summary>
        ///     Get outbound SMS message delivery reports
        /// </summary>
        /// <remarks>
        ///     If you are for any reason unable to receive real time delivery reports on your endpoint, you can use this API
        ///     method to learn if and when the message has been delivered to the recipient. Each request will return a batch of
        ///     delivery reports - only once. The following API request will return only new reports that arrived since the last
        ///     API request in the last 48 hours.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkId">ID of bulk which delivery report is requested. (optional)</param>
        /// <param name="messageId">ID of SMS which delivery report is requested. (optional)</param>
        /// <param name="limit">Maximal number of delivery reports that will be returned. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SmsDeliveryResult</returns>
        Task<SmsDeliveryResult> GetOutboundSmsMessageDeliveryReportsAsync(string bulkId = default(string),
            string messageId = default(string), int? limit = default(int?),
            CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        ///     Get outbound SMS message delivery reports
        /// </summary>
        /// <remarks>
        ///     If you are for any reason unable to receive real time delivery reports on your endpoint, you can use this API
        ///     method to learn if and when the message has been delivered to the recipient. Each request will return a batch of
        ///     delivery reports - only once. The following API request will return only new reports that arrived since the last
        ///     API request in the last 48 hours.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkId">ID of bulk which delivery report is requested. (optional)</param>
        /// <param name="messageId">ID of SMS which delivery report is requested. (optional)</param>
        /// <param name="limit">Maximal number of delivery reports that will be returned. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SmsDeliveryResult)</returns>
        Task<ApiResponse<SmsDeliveryResult>> GetOutboundSmsMessageDeliveryReportsWithHttpInfoAsync(
            string bulkId = default(string), string messageId = default(string), int? limit = default(int?),
            CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        ///     Get outbound SMS message logs
        /// </summary>
        /// <remarks>
        ///     You should use this method for displaying logs in the user interface or for some other less frequent usage. Logs
        ///     are available for the last 48 hours. See [message delivery
        ///     reports](#channels/sms/get-outbound-sms-message-delivery-reports) if your use case is to verify message delivery.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">Sender address. (optional)</param>
        /// <param name="to">Destination address. (optional)</param>
        /// <param name="bulkId">Bulk ID for which log is requested. (optional)</param>
        /// <param name="messageId">SMS ID for which log is requested. (optional)</param>
        /// <param name="generalStatus">Sent SMS status. (optional)</param>
        /// <param name="sentSince">
        ///     Lower limit on date and time of sending SMS. Has the following format: &#x60;yyyy-MM-dd&#39;T
        ///     &#39;HH:mm:ss.SSSZ&#x60;. (optional)
        /// </param>
        /// <param name="sentUntil">
        ///     Upper limit on date and time of sending SMS. Has the following format: &#x60;yyyy-MM-dd&#39;T
        ///     &#39;HH:mm:ss.SSSZ&#x60;. (optional)
        /// </param>
        /// <param name="limit">
        ///     Maximal number of messages in returned logs. Limit should be between &#x60;1&#x60; and &#x60;1000
        ///     &#x60;. If you want to fetch more than 1000 logs you can retrieve them in pages using &#x60;sentSince&#x60; and
        ///     &#x60;sentUntil&#x60; parameters. Defaults to &#x60;50&#x60;. (optional)
        /// </param>
        /// <param name="mcc">Mobile country code. (optional)</param>
        /// <param name="mnc">Mobile network code. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SmsLogsResponse</returns>
        Task<SmsLogsResponse> GetOutboundSmsMessageLogsAsync(string from = default(string), string to = default(string),
            List<string> bulkId = default(List<string>), List<string> messageId = default(List<string>),
            string generalStatus = default(string), DateTimeOffset? sentSince = default(DateTimeOffset?),
            DateTimeOffset? sentUntil = default(DateTimeOffset?), int? limit = default(int?),
            string mcc = default(string), string mnc = default(string),
            CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        ///     Get outbound SMS message logs
        /// </summary>
        /// <remarks>
        ///     You should use this method for displaying logs in the user interface or for some other less frequent usage. Logs
        ///     are available for the last 48 hours. See [message delivery
        ///     reports](#channels/sms/get-outbound-sms-message-delivery-reports) if your use case is to verify message delivery.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">Sender address. (optional)</param>
        /// <param name="to">Destination address. (optional)</param>
        /// <param name="bulkId">Bulk ID for which log is requested. (optional)</param>
        /// <param name="messageId">SMS ID for which log is requested. (optional)</param>
        /// <param name="generalStatus">Sent SMS status. (optional)</param>
        /// <param name="sentSince">
        ///     Lower limit on date and time of sending SMS. Has the following format: &#x60;yyyy-MM-dd&#39;T
        ///     &#39;HH:mm:ss.SSSZ&#x60;. (optional)
        /// </param>
        /// <param name="sentUntil">
        ///     Upper limit on date and time of sending SMS. Has the following format: &#x60;yyyy-MM-dd&#39;T
        ///     &#39;HH:mm:ss.SSSZ&#x60;. (optional)
        /// </param>
        /// <param name="limit">
        ///     Maximal number of messages in returned logs. Limit should be between &#x60;1&#x60; and &#x60;1000
        ///     &#x60;. If you want to fetch more than 1000 logs you can retrieve them in pages using &#x60;sentSince&#x60; and
        ///     &#x60;sentUntil&#x60; parameters. Defaults to &#x60;50&#x60;. (optional)
        /// </param>
        /// <param name="mcc">Mobile country code. (optional)</param>
        /// <param name="mnc">Mobile network code. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SmsLogsResponse)</returns>
        Task<ApiResponse<SmsLogsResponse>> GetOutboundSmsMessageLogsWithHttpInfoAsync(string from = default(string),
            string to = default(string), List<string> bulkId = default(List<string>),
            List<string> messageId = default(List<string>), string generalStatus = default(string),
            DateTimeOffset? sentSince = default(DateTimeOffset?), DateTimeOffset? sentUntil = default(DateTimeOffset?),
            int? limit = default(int?), string mcc = default(string), string mnc = default(string),
            CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        ///     Preview SMS message
        /// </summary>
        /// <remarks>
        ///     Avoid unpleasant surprises and check how different message configurations will affect your message text, number of
        ///     characters and message parts.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="smsPreviewRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SmsPreviewResponse</returns>
        Task<SmsPreviewResponse> PreviewSmsMessageAsync(SmsPreviewRequest smsPreviewRequest = default,
            CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        ///     Preview SMS message
        /// </summary>
        /// <remarks>
        ///     Avoid unpleasant surprises and check how different message configurations will affect your message text, number of
        ///     characters and message parts.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="smsPreviewRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SmsPreviewResponse)</returns>
        Task<ApiResponse<SmsPreviewResponse>> PreviewSmsMessageWithHttpInfoAsync(
            SmsPreviewRequest smsPreviewRequest = default,
            CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        ///     Send binary SMS message
        /// </summary>
        /// <remarks>
        ///     Send single or multiple binary messages to one or more destination address.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="smsAdvancedBinaryRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SmsResponse</returns>
        Task<SmsResponse> SendBinarySmsMessageAsync(SmsAdvancedBinaryRequest smsAdvancedBinaryRequest = default,
            CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        ///     Send binary SMS message
        /// </summary>
        /// <remarks>
        ///     Send single or multiple binary messages to one or more destination address.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="smsAdvancedBinaryRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SmsResponse)</returns>
        Task<ApiResponse<SmsResponse>> SendBinarySmsMessageWithHttpInfoAsync(
            SmsAdvancedBinaryRequest smsAdvancedBinaryRequest = default,
            CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        ///     Send SMS message
        /// </summary>
        /// <remarks>
        ///     99% of all use cases can be achieved by using this API method. Everything from sending a simple single message to a
        ///     single destination, up to batch sending of personalized messages to the thousands of recipients with a single API
        ///     request. Language, transliteration, scheduling and every advanced feature you can think of is supported.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="smsAdvancedTextualRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SmsResponse</returns>
        Task<SmsResponse> SendSmsMessageAsync(SmsAdvancedTextualRequest smsAdvancedTextualRequest = default,
            CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        ///     Send SMS message
        /// </summary>
        /// <remarks>
        ///     99% of all use cases can be achieved by using this API method. Everything from sending a simple single message to a
        ///     single destination, up to batch sending of personalized messages to the thousands of recipients with a single API
        ///     request. Language, transliteration, scheduling and every advanced feature you can think of is supported.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="smsAdvancedTextualRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SmsResponse)</returns>
        Task<ApiResponse<SmsResponse>> SendSmsMessageWithHttpInfoAsync(
            SmsAdvancedTextualRequest smsAdvancedTextualRequest = default,
            CancellationToken cancellationToken = default(CancellationToken));

        #endregion Asynchronous Operations
    }

    /// <summary>
    ///     Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISendSmsApi : ISendSmsApiSync, ISendSmsApiAsync
    {
    }

    /// <summary>
    ///     Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class SendSmsApi : ISendSmsApi
    {
        private ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        ///     Initializes a new instance of the <see cref="SendSmsApi" /> class.
        /// </summary>
        /// <returns></returns>
        public SendSmsApi() : this((string)null)
        {
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="SendSmsApi" /> class.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public SendSmsApi(string basePath)
        {
            Configuration = ClientConfiguration.MergeConfigurations(
                GlobalConfiguration.Instance,
                new Configuration { BasePath = basePath }
            );
            ApiClient = new ApiClient(Configuration.BasePath);
            Client = ApiClient;
            AsynchronousClient = ApiClient;
            ExceptionFactory = ClientConfiguration.DefaultExceptionFactory;
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="SendSmsApi" /> class using Configuration object.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public SendSmsApi(Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException(nameof(configuration));

            Configuration = ClientConfiguration.MergeConfigurations(
                GlobalConfiguration.Instance,
                configuration
            );
            ApiClient = new ApiClient(Configuration.BasePath);
            Client = ApiClient;
            AsynchronousClient = ApiClient;
            ExceptionFactory = ClientConfiguration.DefaultExceptionFactory;
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="SendSmsApi" /> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        ///     Some configuration settings will not be applied without passing an HttpClientHandler.
        ///     The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public SendSmsApi(HttpClient client) : this(client, (string)null)
        {
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="SendSmsApi" /> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        /// <remarks>
        ///     Some configuration settings will not be applied without passing an HttpClientHandler.
        ///     The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public SendSmsApi(HttpClient client, string basePath)
        {
            if (client == null) throw new ArgumentNullException(nameof(client));

            Configuration = ClientConfiguration.MergeConfigurations(
                GlobalConfiguration.Instance,
                new Configuration { BasePath = basePath }
            );
            ApiClient = new ApiClient(client, Configuration.BasePath);
            Client = ApiClient;
            AsynchronousClient = ApiClient;
            ExceptionFactory = ClientConfiguration.DefaultExceptionFactory;
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="SendSmsApi" /> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        ///     Some configuration settings will not be applied without passing an HttpClientHandler.
        ///     The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public SendSmsApi(HttpClient client, Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException(nameof(configuration));
            if (client == null) throw new ArgumentNullException(nameof(client));

            Configuration = ClientConfiguration.MergeConfigurations(
                GlobalConfiguration.Instance,
                configuration
            );
            ApiClient = new ApiClient(client, Configuration.BasePath);
            Client = ApiClient;
            AsynchronousClient = ApiClient;
            ExceptionFactory = ClientConfiguration.DefaultExceptionFactory;
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="SendSmsApi" /> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public SendSmsApi(HttpClient client, HttpClientHandler handler) : this(client, handler, (string)null)
        {
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="SendSmsApi" /> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An instance of HttpClientHandler that is used by HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public SendSmsApi(HttpClient client, HttpClientHandler handler, string basePath)
        {
            if (client == null) throw new ArgumentNullException(nameof(client));
            if (handler == null) throw new ArgumentNullException(nameof(handler));

            Configuration = ClientConfiguration.MergeConfigurations(
                GlobalConfiguration.Instance,
                new Configuration { BasePath = basePath }
            );
            ApiClient = new ApiClient(client, handler, Configuration.BasePath);
            Client = ApiClient;
            AsynchronousClient = ApiClient;
            ExceptionFactory = ClientConfiguration.DefaultExceptionFactory;
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="SendSmsApi" /> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An instance of HttpClientHandler that is used by HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public SendSmsApi(HttpClient client, HttpClientHandler handler, Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException(nameof(configuration));
            if (client == null) throw new ArgumentNullException(nameof(client));
            if (handler == null) throw new ArgumentNullException(nameof(handler));

            Configuration = ClientConfiguration.MergeConfigurations(
                GlobalConfiguration.Instance,
                configuration
            );
            ApiClient = new ApiClient(client, handler, Configuration.BasePath);
            Client = ApiClient;
            AsynchronousClient = ApiClient;
            ExceptionFactory = ClientConfiguration.DefaultExceptionFactory;
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="SendSmsApi" /> class
        ///     using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public SendSmsApi(ISynchronousClient client, IAsynchronousClient asyncClient,
            IReadableConfiguration configuration)
        {
            Client = client ?? throw new ArgumentNullException(nameof(client));
            AsynchronousClient = asyncClient ?? throw new ArgumentNullException(nameof(asyncClient));
            Configuration = configuration ?? throw new ArgumentNullException(nameof(configuration));
            ExceptionFactory = ClientConfiguration.DefaultExceptionFactory;
        }

        /// <summary>
        ///     Holds the ApiClient if created
        /// </summary>
        public ApiClient ApiClient { get; set; }

        /// <summary>
        ///     The client for accessing this underlying API asynchronously.
        /// </summary>
        public IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        ///     The client for accessing this underlying API synchronously.
        /// </summary>
        public ISynchronousClient Client { get; set; }

        /// <summary>
        ///     Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return Configuration.BasePath;
        }

        /// <summary>
        ///     Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IReadableConfiguration Configuration { get; set; }

        /// <summary>
        ///     Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                return _exceptionFactory;
            }
            set => _exceptionFactory = value;
        }

        /// <summary>
        ///     Get outbound SMS message delivery reports If you are for any reason unable to receive real time delivery reports on
        ///     your endpoint, you can use this API method to learn if and when the message has been delivered to the recipient.
        ///     Each request will return a batch of delivery reports - only once. The following API request will return only new
        ///     reports that arrived since the last API request in the last 48 hours.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkId">ID of bulk which delivery report is requested. (optional)</param>
        /// <param name="messageId">ID of SMS which delivery report is requested. (optional)</param>
        /// <param name="limit">Maximal number of delivery reports that will be returned. (optional)</param>
        /// <returns>SmsDeliveryResult</returns>
        public SmsDeliveryResult GetOutboundSmsMessageDeliveryReports(string bulkId = default(string),
            string messageId = default(string), int? limit = default(int?))
        {
            var localVarResponse = GetOutboundSmsMessageDeliveryReportsWithHttpInfo(bulkId, messageId, limit);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Get outbound SMS message delivery reports If you are for any reason unable to receive real time delivery reports on
        ///     your endpoint, you can use this API method to learn if and when the message has been delivered to the recipient.
        ///     Each request will return a batch of delivery reports - only once. The following API request will return only new
        ///     reports that arrived since the last API request in the last 48 hours.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkId">ID of bulk which delivery report is requested. (optional)</param>
        /// <param name="messageId">ID of SMS which delivery report is requested. (optional)</param>
        /// <param name="limit">Maximal number of delivery reports that will be returned. (optional)</param>
        /// <returns>ApiResponse of SmsDeliveryResult</returns>
        public ApiResponse<SmsDeliveryResult> GetOutboundSmsMessageDeliveryReportsWithHttpInfo(
            string bulkId = default(string), string messageId = default(string), int? limit = default(int?))
        {
            var localVarRequestOptions = new RequestOptions();

            string[] contentTypes =
            {
            };

            // to determine the Accept header
            string[] accepts =
            {
                "application/json",
                "application/xml"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(contentTypes);
            if (localVarContentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (bulkId != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "bulkId", bulkId));
            if (messageId != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "messageId", messageId));
            if (limit != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));

            // authentication (APIKeyHeader) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                    localVarRequestOptions.HeaderParameters.Add("Authorization",
                        Configuration.GetApiKeyWithPrefix("Authorization"));
            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(Configuration.Username) || !string.IsNullOrEmpty(Configuration.Password))
                localVarRequestOptions.HeaderParameters.Add("Authorization",
                    "Basic " + ClientUtils.Base64Encode(Configuration.Username + ":" + Configuration.Password));
            // authentication (IBSSOTokenHeader) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                    localVarRequestOptions.HeaderParameters.Add("Authorization",
                        Configuration.GetApiKeyWithPrefix("Authorization"));
            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(Configuration.AccessToken))
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + Configuration.AccessToken);

            // make the HTTP request
            var localVarResponse =
                Client.Get<SmsDeliveryResult>("/sms/1/reports", localVarRequestOptions, Configuration);

            Exception exception = ExceptionFactory?.Invoke("GetOutboundSmsMessageDeliveryReports", localVarResponse);
            if (exception != null) throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Get outbound SMS message delivery reports If you are for any reason unable to receive real time delivery reports on
        ///     your endpoint, you can use this API method to learn if and when the message has been delivered to the recipient.
        ///     Each request will return a batch of delivery reports - only once. The following API request will return only new
        ///     reports that arrived since the last API request in the last 48 hours.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkId">ID of bulk which delivery report is requested. (optional)</param>
        /// <param name="messageId">ID of SMS which delivery report is requested. (optional)</param>
        /// <param name="limit">Maximal number of delivery reports that will be returned. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SmsDeliveryResult</returns>
        public async Task<SmsDeliveryResult> GetOutboundSmsMessageDeliveryReportsAsync(string bulkId = default(string),
            string messageId = default(string), int? limit = default(int?),
            CancellationToken cancellationToken = default(CancellationToken))
        {
            ApiResponse<SmsDeliveryResult> localVarResponse =
                await GetOutboundSmsMessageDeliveryReportsWithHttpInfoAsync(bulkId, messageId, limit, cancellationToken)
                    .ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Get outbound SMS message delivery reports If you are for any reason unable to receive real time delivery reports on
        ///     your endpoint, you can use this API method to learn if and when the message has been delivered to the recipient.
        ///     Each request will return a batch of delivery reports - only once. The following API request will return only new
        ///     reports that arrived since the last API request in the last 48 hours.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkId">ID of bulk which delivery report is requested. (optional)</param>
        /// <param name="messageId">ID of SMS which delivery report is requested. (optional)</param>
        /// <param name="limit">Maximal number of delivery reports that will be returned. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SmsDeliveryResult)</returns>
        public async Task<ApiResponse<SmsDeliveryResult>> GetOutboundSmsMessageDeliveryReportsWithHttpInfoAsync(
            string bulkId = default(string), string messageId = default(string), int? limit = default(int?),
            CancellationToken cancellationToken = default(CancellationToken))
        {
            var localVarRequestOptions = new RequestOptions();

            string[] contentTypes =
            {
            };

            // to determine the Accept header
            string[] accepts =
            {
                "application/json",
                "application/xml"
            };


            var localVarContentType = ClientUtils.SelectHeaderContentType(contentTypes);
            if (localVarContentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (bulkId != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "bulkId", bulkId));
            if (messageId != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "messageId", messageId));
            if (limit != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));

            // authentication (APIKeyHeader) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                    localVarRequestOptions.HeaderParameters.Add("Authorization",
                        Configuration.GetApiKeyWithPrefix("Authorization"));
            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(Configuration.Username) || !string.IsNullOrEmpty(Configuration.Password))
                localVarRequestOptions.HeaderParameters.Add("Authorization",
                    "Basic " + ClientUtils.Base64Encode(Configuration.Username + ":" + Configuration.Password));
            // authentication (IBSSOTokenHeader) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                    localVarRequestOptions.HeaderParameters.Add("Authorization",
                        Configuration.GetApiKeyWithPrefix("Authorization"));
            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(Configuration.AccessToken))
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + Configuration.AccessToken);

            // make the HTTP request

            var localVarResponse = await AsynchronousClient
                .GetAsync<SmsDeliveryResult>("/sms/1/reports", localVarRequestOptions, Configuration, cancellationToken)
                .ConfigureAwait(false);

            Exception exception = ExceptionFactory?.Invoke("GetOutboundSmsMessageDeliveryReports", localVarResponse);
            if (exception != null) throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Get outbound SMS message logs You should use this method for displaying logs in the user interface or for some
        ///     other less frequent usage. Logs are available for the last 48 hours. See [message delivery
        ///     reports](#channels/sms/get-outbound-sms-message-delivery-reports) if your use case is to verify message delivery.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">Sender address. (optional)</param>
        /// <param name="to">Destination address. (optional)</param>
        /// <param name="bulkId">Bulk ID for which log is requested. (optional)</param>
        /// <param name="messageId">SMS ID for which log is requested. (optional)</param>
        /// <param name="generalStatus">Sent SMS status. (optional)</param>
        /// <param name="sentSince">
        ///     Lower limit on date and time of sending SMS. Has the following format: &#x60;yyyy-MM-dd&#39;T
        ///     &#39;HH:mm:ss.SSSZ&#x60;. (optional)
        /// </param>
        /// <param name="sentUntil">
        ///     Upper limit on date and time of sending SMS. Has the following format: &#x60;yyyy-MM-dd&#39;T
        ///     &#39;HH:mm:ss.SSSZ&#x60;. (optional)
        /// </param>
        /// <param name="limit">
        ///     Maximal number of messages in returned logs. Limit should be between &#x60;1&#x60; and &#x60;1000
        ///     &#x60;. If you want to fetch more than 1000 logs you can retrieve them in pages using &#x60;sentSince&#x60; and
        ///     &#x60;sentUntil&#x60; parameters. Defaults to &#x60;50&#x60;. (optional)
        /// </param>
        /// <param name="mcc">Mobile country code. (optional)</param>
        /// <param name="mnc">Mobile network code. (optional)</param>
        /// <returns>SmsLogsResponse</returns>
        public SmsLogsResponse GetOutboundSmsMessageLogs(string from = default(string), string to = default(string),
            List<string> bulkId = default(List<string>), List<string> messageId = default(List<string>),
            string generalStatus = default(string), DateTimeOffset? sentSince = default(DateTimeOffset?),
            DateTimeOffset? sentUntil = default(DateTimeOffset?), int? limit = default(int?),
            string mcc = default(string), string mnc = default(string))
        {
            var localVarResponse = GetOutboundSmsMessageLogsWithHttpInfo(from, to, bulkId, messageId, generalStatus,
                sentSince, sentUntil, limit, mcc, mnc);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Get outbound SMS message logs You should use this method for displaying logs in the user interface or for some
        ///     other less frequent usage. Logs are available for the last 48 hours. See [message delivery
        ///     reports](#channels/sms/get-outbound-sms-message-delivery-reports) if your use case is to verify message delivery.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">Sender address. (optional)</param>
        /// <param name="to">Destination address. (optional)</param>
        /// <param name="bulkId">Bulk ID for which log is requested. (optional)</param>
        /// <param name="messageId">SMS ID for which log is requested. (optional)</param>
        /// <param name="generalStatus">Sent SMS status. (optional)</param>
        /// <param name="sentSince">
        ///     Lower limit on date and time of sending SMS. Has the following format: &#x60;yyyy-MM-dd&#39;T
        ///     &#39;HH:mm:ss.SSSZ&#x60;. (optional)
        /// </param>
        /// <param name="sentUntil">
        ///     Upper limit on date and time of sending SMS. Has the following format: &#x60;yyyy-MM-dd&#39;T
        ///     &#39;HH:mm:ss.SSSZ&#x60;. (optional)
        /// </param>
        /// <param name="limit">
        ///     Maximal number of messages in returned logs. Limit should be between &#x60;1&#x60; and &#x60;1000
        ///     &#x60;. If you want to fetch more than 1000 logs you can retrieve them in pages using &#x60;sentSince&#x60; and
        ///     &#x60;sentUntil&#x60; parameters. Defaults to &#x60;50&#x60;. (optional)
        /// </param>
        /// <param name="mcc">Mobile country code. (optional)</param>
        /// <param name="mnc">Mobile network code. (optional)</param>
        /// <returns>ApiResponse of SmsLogsResponse</returns>
        public ApiResponse<SmsLogsResponse> GetOutboundSmsMessageLogsWithHttpInfo(string from = default(string),
            string to = default(string), List<string> bulkId = default(List<string>),
            List<string> messageId = default(List<string>), string generalStatus = default(string),
            DateTimeOffset? sentSince = default(DateTimeOffset?), DateTimeOffset? sentUntil = default(DateTimeOffset?),
            int? limit = default(int?), string mcc = default(string), string mnc = default(string))
        {
            var localVarRequestOptions = new RequestOptions();

            string[] contentTypes =
            {
            };

            // to determine the Accept header
            string[] accepts =
            {
                "application/json",
                "application/xml"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(contentTypes);
            if (localVarContentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (from != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "from", from));
            if (to != null) localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "to", to));
            if (bulkId != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("multi", "bulkId", bulkId));
            if (messageId != null)
                localVarRequestOptions.QueryParameters.Add(
                    ClientUtils.ParameterToMultiMap("multi", "messageId", messageId));
            if (generalStatus != null)
                localVarRequestOptions.QueryParameters.Add(
                    ClientUtils.ParameterToMultiMap("", "generalStatus", generalStatus));
            if (sentSince != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "sentSince", sentSince));
            if (sentUntil != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "sentUntil", sentUntil));
            if (limit != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            if (mcc != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "mcc", mcc));
            if (mnc != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "mnc", mnc));

            // authentication (APIKeyHeader) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                    localVarRequestOptions.HeaderParameters.Add("Authorization",
                        Configuration.GetApiKeyWithPrefix("Authorization"));
            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(Configuration.Username) || !string.IsNullOrEmpty(Configuration.Password))
                localVarRequestOptions.HeaderParameters.Add("Authorization",
                    "Basic " + ClientUtils.Base64Encode(Configuration.Username + ":" + Configuration.Password));
            // authentication (IBSSOTokenHeader) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                    localVarRequestOptions.HeaderParameters.Add("Authorization",
                        Configuration.GetApiKeyWithPrefix("Authorization"));
            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(Configuration.AccessToken))
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + Configuration.AccessToken);

            // make the HTTP request
            var localVarResponse = Client.Get<SmsLogsResponse>("/sms/1/logs", localVarRequestOptions, Configuration);

            Exception exception = ExceptionFactory?.Invoke("GetOutboundSmsMessageLogs", localVarResponse);
            if (exception != null) throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Get outbound SMS message logs You should use this method for displaying logs in the user interface or for some
        ///     other less frequent usage. Logs are available for the last 48 hours. See [message delivery
        ///     reports](#channels/sms/get-outbound-sms-message-delivery-reports) if your use case is to verify message delivery.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">Sender address. (optional)</param>
        /// <param name="to">Destination address. (optional)</param>
        /// <param name="bulkId">Bulk ID for which log is requested. (optional)</param>
        /// <param name="messageId">SMS ID for which log is requested. (optional)</param>
        /// <param name="generalStatus">Sent SMS status. (optional)</param>
        /// <param name="sentSince">
        ///     Lower limit on date and time of sending SMS. Has the following format: &#x60;yyyy-MM-dd&#39;T
        ///     &#39;HH:mm:ss.SSSZ&#x60;. (optional)
        /// </param>
        /// <param name="sentUntil">
        ///     Upper limit on date and time of sending SMS. Has the following format: &#x60;yyyy-MM-dd&#39;T
        ///     &#39;HH:mm:ss.SSSZ&#x60;. (optional)
        /// </param>
        /// <param name="limit">
        ///     Maximal number of messages in returned logs. Limit should be between &#x60;1&#x60; and &#x60;1000
        ///     &#x60;. If you want to fetch more than 1000 logs you can retrieve them in pages using &#x60;sentSince&#x60; and
        ///     &#x60;sentUntil&#x60; parameters. Defaults to &#x60;50&#x60;. (optional)
        /// </param>
        /// <param name="mcc">Mobile country code. (optional)</param>
        /// <param name="mnc">Mobile network code. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SmsLogsResponse</returns>
        public async Task<SmsLogsResponse> GetOutboundSmsMessageLogsAsync(string from = default(string),
            string to = default(string), List<string> bulkId = default(List<string>),
            List<string> messageId = default(List<string>), string generalStatus = default(string),
            DateTimeOffset? sentSince = default(DateTimeOffset?), DateTimeOffset? sentUntil = default(DateTimeOffset?),
            int? limit = default(int?), string mcc = default(string), string mnc = default(string),
            CancellationToken cancellationToken = default(CancellationToken))
        {
            ApiResponse<SmsLogsResponse> localVarResponse = await GetOutboundSmsMessageLogsWithHttpInfoAsync(from, to,
                    bulkId, messageId, generalStatus, sentSince, sentUntil, limit, mcc, mnc, cancellationToken)
                .ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Get outbound SMS message logs You should use this method for displaying logs in the user interface or for some
        ///     other less frequent usage. Logs are available for the last 48 hours. See [message delivery
        ///     reports](#channels/sms/get-outbound-sms-message-delivery-reports) if your use case is to verify message delivery.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">Sender address. (optional)</param>
        /// <param name="to">Destination address. (optional)</param>
        /// <param name="bulkId">Bulk ID for which log is requested. (optional)</param>
        /// <param name="messageId">SMS ID for which log is requested. (optional)</param>
        /// <param name="generalStatus">Sent SMS status. (optional)</param>
        /// <param name="sentSince">
        ///     Lower limit on date and time of sending SMS. Has the following format: &#x60;yyyy-MM-dd&#39;T
        ///     &#39;HH:mm:ss.SSSZ&#x60;. (optional)
        /// </param>
        /// <param name="sentUntil">
        ///     Upper limit on date and time of sending SMS. Has the following format: &#x60;yyyy-MM-dd&#39;T
        ///     &#39;HH:mm:ss.SSSZ&#x60;. (optional)
        /// </param>
        /// <param name="limit">
        ///     Maximal number of messages in returned logs. Limit should be between &#x60;1&#x60; and &#x60;1000
        ///     &#x60;. If you want to fetch more than 1000 logs you can retrieve them in pages using &#x60;sentSince&#x60; and
        ///     &#x60;sentUntil&#x60; parameters. Defaults to &#x60;50&#x60;. (optional)
        /// </param>
        /// <param name="mcc">Mobile country code. (optional)</param>
        /// <param name="mnc">Mobile network code. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SmsLogsResponse)</returns>
        public async Task<ApiResponse<SmsLogsResponse>> GetOutboundSmsMessageLogsWithHttpInfoAsync(
            string from = default(string), string to = default(string), List<string> bulkId = default(List<string>),
            List<string> messageId = default(List<string>), string generalStatus = default(string),
            DateTimeOffset? sentSince = default(DateTimeOffset?), DateTimeOffset? sentUntil = default(DateTimeOffset?),
            int? limit = default(int?), string mcc = default(string), string mnc = default(string),
            CancellationToken cancellationToken = default(CancellationToken))
        {
            var localVarRequestOptions = new RequestOptions();

            string[] contentTypes =
            {
            };

            // to determine the Accept header
            string[] accepts =
            {
                "application/json",
                "application/xml"
            };


            var localVarContentType = ClientUtils.SelectHeaderContentType(contentTypes);
            if (localVarContentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (from != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "from", from));
            if (to != null) localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "to", to));
            if (bulkId != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("multi", "bulkId", bulkId));
            if (messageId != null)
                localVarRequestOptions.QueryParameters.Add(
                    ClientUtils.ParameterToMultiMap("multi", "messageId", messageId));
            if (generalStatus != null)
                localVarRequestOptions.QueryParameters.Add(
                    ClientUtils.ParameterToMultiMap("", "generalStatus", generalStatus));
            if (sentSince != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "sentSince", sentSince));
            if (sentUntil != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "sentUntil", sentUntil));
            if (limit != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            if (mcc != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "mcc", mcc));
            if (mnc != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "mnc", mnc));

            // authentication (APIKeyHeader) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                    localVarRequestOptions.HeaderParameters.Add("Authorization",
                        Configuration.GetApiKeyWithPrefix("Authorization"));
            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(Configuration.Username) || !string.IsNullOrEmpty(Configuration.Password))
                localVarRequestOptions.HeaderParameters.Add("Authorization",
                    "Basic " + ClientUtils.Base64Encode(Configuration.Username + ":" + Configuration.Password));
            // authentication (IBSSOTokenHeader) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                    localVarRequestOptions.HeaderParameters.Add("Authorization",
                        Configuration.GetApiKeyWithPrefix("Authorization"));
            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(Configuration.AccessToken))
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + Configuration.AccessToken);

            // make the HTTP request

            var localVarResponse = await AsynchronousClient
                .GetAsync<SmsLogsResponse>("/sms/1/logs", localVarRequestOptions, Configuration, cancellationToken)
                .ConfigureAwait(false);

            Exception exception = ExceptionFactory?.Invoke("GetOutboundSmsMessageLogs", localVarResponse);
            if (exception != null) throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Preview SMS message Avoid unpleasant surprises and check how different message configurations will affect your
        ///     message text, number of characters and message parts.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="smsPreviewRequest"> (optional)</param>
        /// <returns>SmsPreviewResponse</returns>
        public SmsPreviewResponse PreviewSmsMessage(SmsPreviewRequest smsPreviewRequest = default)
        {
            var localVarResponse = PreviewSmsMessageWithHttpInfo(smsPreviewRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Preview SMS message Avoid unpleasant surprises and check how different message configurations will affect your
        ///     message text, number of characters and message parts.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="smsPreviewRequest"> (optional)</param>
        /// <returns>ApiResponse of SmsPreviewResponse</returns>
        public ApiResponse<SmsPreviewResponse> PreviewSmsMessageWithHttpInfo(
            SmsPreviewRequest smsPreviewRequest = default)
        {
            var localVarRequestOptions = new RequestOptions();

            string[] contentTypes =
            {
                "application/json",
                "application/xml"
            };

            // to determine the Accept header
            string[] accepts =
            {
                "application/json",
                "application/xml"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(contentTypes);
            if (localVarContentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = smsPreviewRequest;

            // authentication (APIKeyHeader) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                    localVarRequestOptions.HeaderParameters.Add("Authorization",
                        Configuration.GetApiKeyWithPrefix("Authorization"));
            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(Configuration.Username) || !string.IsNullOrEmpty(Configuration.Password))
                localVarRequestOptions.HeaderParameters.Add("Authorization",
                    "Basic " + ClientUtils.Base64Encode(Configuration.Username + ":" + Configuration.Password));
            // authentication (IBSSOTokenHeader) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                    localVarRequestOptions.HeaderParameters.Add("Authorization",
                        Configuration.GetApiKeyWithPrefix("Authorization"));
            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(Configuration.AccessToken))
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + Configuration.AccessToken);

            // make the HTTP request
            var localVarResponse =
                Client.Post<SmsPreviewResponse>("/sms/1/preview", localVarRequestOptions, Configuration);

            Exception exception = ExceptionFactory?.Invoke("PreviewSmsMessage", localVarResponse);
            if (exception != null) throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Preview SMS message Avoid unpleasant surprises and check how different message configurations will affect your
        ///     message text, number of characters and message parts.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="smsPreviewRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SmsPreviewResponse</returns>
        public async Task<SmsPreviewResponse> PreviewSmsMessageAsync(SmsPreviewRequest smsPreviewRequest = default,
            CancellationToken cancellationToken = default(CancellationToken))
        {
            ApiResponse<SmsPreviewResponse> localVarResponse =
                await PreviewSmsMessageWithHttpInfoAsync(smsPreviewRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Preview SMS message Avoid unpleasant surprises and check how different message configurations will affect your
        ///     message text, number of characters and message parts.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="smsPreviewRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SmsPreviewResponse)</returns>
        public async Task<ApiResponse<SmsPreviewResponse>> PreviewSmsMessageWithHttpInfoAsync(
            SmsPreviewRequest smsPreviewRequest = default,
            CancellationToken cancellationToken = default(CancellationToken))
        {
            var localVarRequestOptions = new RequestOptions();

            string[] contentTypes =
            {
                "application/json",
                "application/xml"
            };

            // to determine the Accept header
            string[] accepts =
            {
                "application/json",
                "application/xml"
            };


            var localVarContentType = ClientUtils.SelectHeaderContentType(contentTypes);
            if (localVarContentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = smsPreviewRequest;

            // authentication (APIKeyHeader) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                    localVarRequestOptions.HeaderParameters.Add("Authorization",
                        Configuration.GetApiKeyWithPrefix("Authorization"));
            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(Configuration.Username) || !string.IsNullOrEmpty(Configuration.Password))
                localVarRequestOptions.HeaderParameters.Add("Authorization",
                    "Basic " + ClientUtils.Base64Encode(Configuration.Username + ":" + Configuration.Password));
            // authentication (IBSSOTokenHeader) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                    localVarRequestOptions.HeaderParameters.Add("Authorization",
                        Configuration.GetApiKeyWithPrefix("Authorization"));
            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(Configuration.AccessToken))
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + Configuration.AccessToken);

            // make the HTTP request

            var localVarResponse = await AsynchronousClient
                .PostAsync<SmsPreviewResponse>("/sms/1/preview", localVarRequestOptions, Configuration,
                    cancellationToken).ConfigureAwait(false);

            Exception exception = ExceptionFactory?.Invoke("PreviewSmsMessage", localVarResponse);
            if (exception != null) throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Send binary SMS message Send single or multiple binary messages to one or more destination address.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="smsAdvancedBinaryRequest"> (optional)</param>
        /// <returns>SmsResponse</returns>
        public SmsResponse SendBinarySmsMessage(SmsAdvancedBinaryRequest smsAdvancedBinaryRequest = default)
        {
            var localVarResponse = SendBinarySmsMessageWithHttpInfo(smsAdvancedBinaryRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Send binary SMS message Send single or multiple binary messages to one or more destination address.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="smsAdvancedBinaryRequest"> (optional)</param>
        /// <returns>ApiResponse of SmsResponse</returns>
        public ApiResponse<SmsResponse> SendBinarySmsMessageWithHttpInfo(
            SmsAdvancedBinaryRequest smsAdvancedBinaryRequest = default)
        {
            var localVarRequestOptions = new RequestOptions();

            string[] contentTypes =
            {
                "application/json",
                "application/xml"
            };

            // to determine the Accept header
            string[] accepts =
            {
                "application/json",
                "application/xml"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(contentTypes);
            if (localVarContentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = smsAdvancedBinaryRequest;

            // authentication (APIKeyHeader) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                    localVarRequestOptions.HeaderParameters.Add("Authorization",
                        Configuration.GetApiKeyWithPrefix("Authorization"));
            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(Configuration.Username) || !string.IsNullOrEmpty(Configuration.Password))
                localVarRequestOptions.HeaderParameters.Add("Authorization",
                    "Basic " + ClientUtils.Base64Encode(Configuration.Username + ":" + Configuration.Password));
            // authentication (IBSSOTokenHeader) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                    localVarRequestOptions.HeaderParameters.Add("Authorization",
                        Configuration.GetApiKeyWithPrefix("Authorization"));
            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(Configuration.AccessToken))
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + Configuration.AccessToken);

            // make the HTTP request
            var localVarResponse =
                Client.Post<SmsResponse>("/sms/2/binary/advanced", localVarRequestOptions, Configuration);

            Exception exception = ExceptionFactory?.Invoke("SendBinarySmsMessage", localVarResponse);
            if (exception != null) throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Send binary SMS message Send single or multiple binary messages to one or more destination address.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="smsAdvancedBinaryRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SmsResponse</returns>
        public async Task<SmsResponse> SendBinarySmsMessageAsync(
            SmsAdvancedBinaryRequest smsAdvancedBinaryRequest = default,
            CancellationToken cancellationToken = default(CancellationToken))
        {
            ApiResponse<SmsResponse> localVarResponse =
                await SendBinarySmsMessageWithHttpInfoAsync(smsAdvancedBinaryRequest, cancellationToken)
                    .ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Send binary SMS message Send single or multiple binary messages to one or more destination address.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="smsAdvancedBinaryRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SmsResponse)</returns>
        public async Task<ApiResponse<SmsResponse>> SendBinarySmsMessageWithHttpInfoAsync(
            SmsAdvancedBinaryRequest smsAdvancedBinaryRequest = default,
            CancellationToken cancellationToken = default(CancellationToken))
        {
            var localVarRequestOptions = new RequestOptions();

            string[] contentTypes =
            {
                "application/json",
                "application/xml"
            };

            // to determine the Accept header
            string[] accepts =
            {
                "application/json",
                "application/xml"
            };


            var localVarContentType = ClientUtils.SelectHeaderContentType(contentTypes);
            if (localVarContentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = smsAdvancedBinaryRequest;

            // authentication (APIKeyHeader) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                    localVarRequestOptions.HeaderParameters.Add("Authorization",
                        Configuration.GetApiKeyWithPrefix("Authorization"));
            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(Configuration.Username) || !string.IsNullOrEmpty(Configuration.Password))
                localVarRequestOptions.HeaderParameters.Add("Authorization",
                    "Basic " + ClientUtils.Base64Encode(Configuration.Username + ":" + Configuration.Password));
            // authentication (IBSSOTokenHeader) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                    localVarRequestOptions.HeaderParameters.Add("Authorization",
                        Configuration.GetApiKeyWithPrefix("Authorization"));
            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(Configuration.AccessToken))
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + Configuration.AccessToken);

            // make the HTTP request

            var localVarResponse = await AsynchronousClient
                .PostAsync<SmsResponse>("/sms/2/binary/advanced", localVarRequestOptions, Configuration,
                    cancellationToken).ConfigureAwait(false);

            Exception exception = ExceptionFactory?.Invoke("SendBinarySmsMessage", localVarResponse);
            if (exception != null) throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Send SMS message 99% of all use cases can be achieved by using this API method. Everything from sending a simple
        ///     single message to a single destination, up to batch sending of personalized messages to the thousands of recipients
        ///     with a single API request. Language, transliteration, scheduling and every advanced feature you can think of is
        ///     supported.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="smsAdvancedTextualRequest"> (optional)</param>
        /// <returns>SmsResponse</returns>
        public SmsResponse SendSmsMessage(SmsAdvancedTextualRequest smsAdvancedTextualRequest = default)
        {
            var localVarResponse = SendSmsMessageWithHttpInfo(smsAdvancedTextualRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Send SMS message 99% of all use cases can be achieved by using this API method. Everything from sending a simple
        ///     single message to a single destination, up to batch sending of personalized messages to the thousands of recipients
        ///     with a single API request. Language, transliteration, scheduling and every advanced feature you can think of is
        ///     supported.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="smsAdvancedTextualRequest"> (optional)</param>
        /// <returns>ApiResponse of SmsResponse</returns>
        public ApiResponse<SmsResponse> SendSmsMessageWithHttpInfo(
            SmsAdvancedTextualRequest smsAdvancedTextualRequest = default)
        {
            var localVarRequestOptions = new RequestOptions();

            string[] contentTypes =
            {
                "application/json",
                "application/xml"
            };

            // to determine the Accept header
            string[] accepts =
            {
                "application/json",
                "application/xml"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(contentTypes);
            if (localVarContentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = smsAdvancedTextualRequest;

            // authentication (APIKeyHeader) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                    localVarRequestOptions.HeaderParameters.Add("Authorization",
                        Configuration.GetApiKeyWithPrefix("Authorization"));
            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(Configuration.Username) || !string.IsNullOrEmpty(Configuration.Password))
                localVarRequestOptions.HeaderParameters.Add("Authorization",
                    "Basic " + ClientUtils.Base64Encode(Configuration.Username + ":" + Configuration.Password));
            // authentication (IBSSOTokenHeader) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                    localVarRequestOptions.HeaderParameters.Add("Authorization",
                        Configuration.GetApiKeyWithPrefix("Authorization"));
            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(Configuration.AccessToken))
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + Configuration.AccessToken);

            // make the HTTP request
            var localVarResponse =
                Client.Post<SmsResponse>("/sms/2/text/advanced", localVarRequestOptions, Configuration);

            Exception exception = ExceptionFactory?.Invoke("SendSmsMessage", localVarResponse);
            if (exception != null) throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Send SMS message 99% of all use cases can be achieved by using this API method. Everything from sending a simple
        ///     single message to a single destination, up to batch sending of personalized messages to the thousands of recipients
        ///     with a single API request. Language, transliteration, scheduling and every advanced feature you can think of is
        ///     supported.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="smsAdvancedTextualRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SmsResponse</returns>
        public async Task<SmsResponse> SendSmsMessageAsync(
            SmsAdvancedTextualRequest smsAdvancedTextualRequest = default,
            CancellationToken cancellationToken = default(CancellationToken))
        {
            ApiResponse<SmsResponse> localVarResponse =
                await SendSmsMessageWithHttpInfoAsync(smsAdvancedTextualRequest, cancellationToken)
                    .ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Send SMS message 99% of all use cases can be achieved by using this API method. Everything from sending a simple
        ///     single message to a single destination, up to batch sending of personalized messages to the thousands of recipients
        ///     with a single API request. Language, transliteration, scheduling and every advanced feature you can think of is
        ///     supported.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="smsAdvancedTextualRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SmsResponse)</returns>
        public async Task<ApiResponse<SmsResponse>> SendSmsMessageWithHttpInfoAsync(
            SmsAdvancedTextualRequest smsAdvancedTextualRequest = default,
            CancellationToken cancellationToken = default(CancellationToken))
        {
            var localVarRequestOptions = new RequestOptions();

            string[] contentTypes =
            {
                "application/json",
                "application/xml"
            };

            // to determine the Accept header
            string[] accepts =
            {
                "application/json",
                "application/xml"
            };


            var localVarContentType = ClientUtils.SelectHeaderContentType(contentTypes);
            if (localVarContentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = smsAdvancedTextualRequest;

            // authentication (APIKeyHeader) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                    localVarRequestOptions.HeaderParameters.Add("Authorization",
                        Configuration.GetApiKeyWithPrefix("Authorization"));
            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(Configuration.Username) || !string.IsNullOrEmpty(Configuration.Password))
                localVarRequestOptions.HeaderParameters.Add("Authorization",
                    "Basic " + ClientUtils.Base64Encode(Configuration.Username + ":" + Configuration.Password));
            // authentication (IBSSOTokenHeader) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                    localVarRequestOptions.HeaderParameters.Add("Authorization",
                        Configuration.GetApiKeyWithPrefix("Authorization"));
            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(Configuration.AccessToken))
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + Configuration.AccessToken);

            // make the HTTP request

            var localVarResponse = await AsynchronousClient
                .PostAsync<SmsResponse>("/sms/2/text/advanced", localVarRequestOptions, Configuration,
                    cancellationToken).ConfigureAwait(false);

            Exception exception = ExceptionFactory?.Invoke("SendSmsMessage", localVarResponse);
            if (exception != null) throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            ApiClient?.Dispose();
        }
    }
}