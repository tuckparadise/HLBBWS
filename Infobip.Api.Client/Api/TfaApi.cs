/*
 * Infobip Client API Libraries OpenAPI Specification
 * OpenAPI specification containing public endpoints supported in client API libraries.
 *
 * Contact: support@infobip.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using System.Threading;
using System.Threading.Tasks;
using Infobip.Api.Client;
using ClientConfiguration = Infobip.Api.Client.Configuration;
using Infobip.Api.Client.Model;

namespace Infobip.Api.Client.Api
{
    /// <summary>
    ///     Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITfaApiSync : IApiAccessor
    {
        #region Synchronous Operations

        /// <summary>
        ///     Create 2FA application
        /// </summary>
        /// <remarks>
        ///     Create and configure a new 2FA application.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="tfaApplicationRequest"> (optional)</param>
        /// <returns>TfaApplicationResponse</returns>
        TfaApplicationResponse CreateTfaApplication(TfaApplicationRequest tfaApplicationRequest = default);

        /// <summary>
        ///     Create 2FA application
        /// </summary>
        /// <remarks>
        ///     Create and configure a new 2FA application.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="tfaApplicationRequest"> (optional)</param>
        /// <returns>ApiResponse of TfaApplicationResponse</returns>
        ApiResponse<TfaApplicationResponse> CreateTfaApplicationWithHttpInfo(
            TfaApplicationRequest tfaApplicationRequest = default);

        /// <summary>
        ///     Create 2FA message template
        /// </summary>
        /// <remarks>
        ///     Once you have your [2FA application](#channels/sms/create-2fa-message-template), create one or more message
        ///     templates where your PIN will be dynamically included when you send the PIN message.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">ID of application for which requested message was created.</param>
        /// <param name="tfaCreateMessageRequest"> (optional)</param>
        /// <returns>TfaMessage</returns>
        TfaMessage CreateTfaMessageTemplate(string appId, TfaCreateMessageRequest tfaCreateMessageRequest = default);

        /// <summary>
        ///     Create 2FA message template
        /// </summary>
        /// <remarks>
        ///     Once you have your [2FA application](#channels/sms/create-2fa-message-template), create one or more message
        ///     templates where your PIN will be dynamically included when you send the PIN message.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">ID of application for which requested message was created.</param>
        /// <param name="tfaCreateMessageRequest"> (optional)</param>
        /// <returns>ApiResponse of TfaMessage</returns>
        ApiResponse<TfaMessage> CreateTfaMessageTemplateWithHttpInfo(string appId,
            TfaCreateMessageRequest tfaCreateMessageRequest = default);

        /// <summary>
        ///     Get 2FA application
        /// </summary>
        /// <remarks>
        ///     Get a single 2FA application to see its configuration details.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">Requested application ID.</param>
        /// <returns>TfaApplicationResponse</returns>
        TfaApplicationResponse GetTfaApplication(string appId);

        /// <summary>
        ///     Get 2FA application
        /// </summary>
        /// <remarks>
        ///     Get a single 2FA application to see its configuration details.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">Requested application ID.</param>
        /// <returns>ApiResponse of TfaApplicationResponse</returns>
        ApiResponse<TfaApplicationResponse> GetTfaApplicationWithHttpInfo(string appId);

        /// <summary>
        ///     Get 2FA applications
        /// </summary>
        /// <remarks>
        ///     An application is a container for 2FA message templates. Use this method to list your applications.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;TfaApplicationResponse&gt;</returns>
        List<TfaApplicationResponse> GetTfaApplications();

        /// <summary>
        ///     Get 2FA applications
        /// </summary>
        /// <remarks>
        ///     An application is a container for 2FA message templates. Use this method to list your applications.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;TfaApplicationResponse&gt;</returns>
        ApiResponse<List<TfaApplicationResponse>> GetTfaApplicationsWithHttpInfo();

        /// <summary>
        ///     Get 2FA message template
        /// </summary>
        /// <remarks>
        ///     Get a single 2FA message template from an application to see its configuration details.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">ID of application for which requested message was created.</param>
        /// <param name="msgId">Requested message ID.</param>
        /// <returns>TfaMessage</returns>
        TfaMessage GetTfaMessageTemplate(string appId, string msgId);

        /// <summary>
        ///     Get 2FA message template
        /// </summary>
        /// <remarks>
        ///     Get a single 2FA message template from an application to see its configuration details.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">ID of application for which requested message was created.</param>
        /// <param name="msgId">Requested message ID.</param>
        /// <returns>ApiResponse of TfaMessage</returns>
        ApiResponse<TfaMessage> GetTfaMessageTemplateWithHttpInfo(string appId, string msgId);

        /// <summary>
        ///     Get 2FA message templates
        /// </summary>
        /// <remarks>
        ///     List all message templates in a 2FA application.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">ID of application for which requested message was created.</param>
        /// <returns>List&lt;TfaMessage&gt;</returns>
        List<TfaMessage> GetTfaMessageTemplates(string appId);

        /// <summary>
        ///     Get 2FA message templates
        /// </summary>
        /// <remarks>
        ///     List all message templates in a 2FA application.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">ID of application for which requested message was created.</param>
        /// <returns>ApiResponse of List&lt;TfaMessage&gt;</returns>
        ApiResponse<List<TfaMessage>> GetTfaMessageTemplatesWithHttpInfo(string appId);

        /// <summary>
        ///     Get 2FA verification status
        /// </summary>
        /// <remarks>
        ///     Check if a phone number is already verified for a specific 2FA application.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="msisdn">Filter by msisdn (phone number) for which verification status is checked.</param>
        /// <param name="appId">ID of 2-FA application for which phone number verification status is requested.</param>
        /// <param name="verified">Filter by verified (true or false). (optional)</param>
        /// <param name="sent">Filter by message sent status (true or false). (optional)</param>
        /// <returns>TfaVerificationResponse</returns>
        TfaVerificationResponse GetTfaVerificationStatus(string msisdn, string appId, bool? verified = default(bool?),
            bool? sent = default(bool?));

        /// <summary>
        ///     Get 2FA verification status
        /// </summary>
        /// <remarks>
        ///     Check if a phone number is already verified for a specific 2FA application.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="msisdn">Filter by msisdn (phone number) for which verification status is checked.</param>
        /// <param name="appId">ID of 2-FA application for which phone number verification status is requested.</param>
        /// <param name="verified">Filter by verified (true or false). (optional)</param>
        /// <param name="sent">Filter by message sent status (true or false). (optional)</param>
        /// <returns>ApiResponse of TfaVerificationResponse</returns>
        ApiResponse<TfaVerificationResponse> GetTfaVerificationStatusWithHttpInfo(string msisdn, string appId,
            bool? verified = default(bool?), bool? sent = default(bool?));

        /// <summary>
        ///     Resend 2FA PIN code over SMS
        /// </summary>
        /// <remarks>
        ///     If needed, you can resend the same (previously sent) PIN code over SMS.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="pinId">ID of the pin code that has to be verified.</param>
        /// <param name="tfaResendPinRequest"> (optional)</param>
        /// <returns>TfaStartAuthenticationResponse</returns>
        TfaStartAuthenticationResponse ResendTfaPinCodeOverSms(string pinId,
            TfaResendPinRequest tfaResendPinRequest = default);

        /// <summary>
        ///     Resend 2FA PIN code over SMS
        /// </summary>
        /// <remarks>
        ///     If needed, you can resend the same (previously sent) PIN code over SMS.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="pinId">ID of the pin code that has to be verified.</param>
        /// <param name="tfaResendPinRequest"> (optional)</param>
        /// <returns>ApiResponse of TfaStartAuthenticationResponse</returns>
        ApiResponse<TfaStartAuthenticationResponse> ResendTfaPinCodeOverSmsWithHttpInfo(string pinId,
            TfaResendPinRequest tfaResendPinRequest = default);

        /// <summary>
        ///     Resend 2FA PIN code over Voice
        /// </summary>
        /// <remarks>
        ///     If needed, you can resend the same (previously sent) PIN code over Voice.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="pinId">ID of the pin code that has to be verified.</param>
        /// <param name="tfaResendPinRequest"> (optional)</param>
        /// <returns>TfaStartAuthenticationResponse</returns>
        TfaStartAuthenticationResponse ResendTfaPinCodeOverVoice(string pinId,
            TfaResendPinRequest tfaResendPinRequest = default);

        /// <summary>
        ///     Resend 2FA PIN code over Voice
        /// </summary>
        /// <remarks>
        ///     If needed, you can resend the same (previously sent) PIN code over Voice.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="pinId">ID of the pin code that has to be verified.</param>
        /// <param name="tfaResendPinRequest"> (optional)</param>
        /// <returns>ApiResponse of TfaStartAuthenticationResponse</returns>
        ApiResponse<TfaStartAuthenticationResponse> ResendTfaPinCodeOverVoiceWithHttpInfo(string pinId,
            TfaResendPinRequest tfaResendPinRequest = default);

        /// <summary>
        ///     Send 2FA PIN code over SMS
        /// </summary>
        /// <remarks>
        ///     Send a PIN code over SMS using a previously created [message template](#channels/sms/create-2fa-message-template).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="ncNeeded">
        ///     Indicates if Number Lookup is needed before sending the 2FA message. If the parameter value is
        ///     true, Number Lookup will be requested before sending the SMS. If the value is false, the SMS will be sent without
        ///     requesting Number Lookup. Field&#39;s default value is &#x60;true&#x60;. (optional)
        /// </param>
        /// <param name="tfaStartAuthenticationRequest"> (optional)</param>
        /// <returns>TfaStartAuthenticationResponse</returns>
        TfaStartAuthenticationResponse SendTfaPinCodeOverSms(bool? ncNeeded = default(bool?),
            TfaStartAuthenticationRequest tfaStartAuthenticationRequest = default);

        /// <summary>
        ///     Send 2FA PIN code over SMS
        /// </summary>
        /// <remarks>
        ///     Send a PIN code over SMS using a previously created [message template](#channels/sms/create-2fa-message-template).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="ncNeeded">
        ///     Indicates if Number Lookup is needed before sending the 2FA message. If the parameter value is
        ///     true, Number Lookup will be requested before sending the SMS. If the value is false, the SMS will be sent without
        ///     requesting Number Lookup. Field&#39;s default value is &#x60;true&#x60;. (optional)
        /// </param>
        /// <param name="tfaStartAuthenticationRequest"> (optional)</param>
        /// <returns>ApiResponse of TfaStartAuthenticationResponse</returns>
        ApiResponse<TfaStartAuthenticationResponse> SendTfaPinCodeOverSmsWithHttpInfo(bool? ncNeeded = default(bool?),
            TfaStartAuthenticationRequest tfaStartAuthenticationRequest = default);

        /// <summary>
        ///     Send 2FA PIN code over Voice
        /// </summary>
        /// <remarks>
        ///     Send a PIN code over Voice using previously created [message template](#channels/sms/create-2fa-message-template).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="tfaStartAuthenticationRequest"> (optional)</param>
        /// <returns>TfaStartAuthenticationResponse</returns>
        TfaStartAuthenticationResponse SendTfaPinCodeOverVoice(
            TfaStartAuthenticationRequest tfaStartAuthenticationRequest = default);

        /// <summary>
        ///     Send 2FA PIN code over Voice
        /// </summary>
        /// <remarks>
        ///     Send a PIN code over Voice using previously created [message template](#channels/sms/create-2fa-message-template).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="tfaStartAuthenticationRequest"> (optional)</param>
        /// <returns>ApiResponse of TfaStartAuthenticationResponse</returns>
        ApiResponse<TfaStartAuthenticationResponse> SendTfaPinCodeOverVoiceWithHttpInfo(
            TfaStartAuthenticationRequest tfaStartAuthenticationRequest = default);

        /// <summary>
        ///     Update 2FA application
        /// </summary>
        /// <remarks>
        ///     Change configuration options for your existing 2FA application.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">ID of application that should be updated.</param>
        /// <param name="tfaApplicationRequest"> (optional)</param>
        /// <returns>TfaApplicationResponse</returns>
        TfaApplicationResponse
            UpdateTfaApplication(string appId, TfaApplicationRequest tfaApplicationRequest = default);

        /// <summary>
        ///     Update 2FA application
        /// </summary>
        /// <remarks>
        ///     Change configuration options for your existing 2FA application.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">ID of application that should be updated.</param>
        /// <param name="tfaApplicationRequest"> (optional)</param>
        /// <returns>ApiResponse of TfaApplicationResponse</returns>
        ApiResponse<TfaApplicationResponse> UpdateTfaApplicationWithHttpInfo(string appId,
            TfaApplicationRequest tfaApplicationRequest = default);

        /// <summary>
        ///     Update 2FA message template
        /// </summary>
        /// <remarks>
        ///     Change configuration options for your existing 2FA application message template.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">ID of application for which requested message was created.</param>
        /// <param name="msgId">Requested message ID.</param>
        /// <param name="tfaUpdateMessageRequest"> (optional)</param>
        /// <returns>TfaMessage</returns>
        TfaMessage UpdateTfaMessageTemplate(string appId, string msgId,
            TfaUpdateMessageRequest tfaUpdateMessageRequest = default);

        /// <summary>
        ///     Update 2FA message template
        /// </summary>
        /// <remarks>
        ///     Change configuration options for your existing 2FA application message template.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">ID of application for which requested message was created.</param>
        /// <param name="msgId">Requested message ID.</param>
        /// <param name="tfaUpdateMessageRequest"> (optional)</param>
        /// <returns>ApiResponse of TfaMessage</returns>
        ApiResponse<TfaMessage> UpdateTfaMessageTemplateWithHttpInfo(string appId, string msgId,
            TfaUpdateMessageRequest tfaUpdateMessageRequest = default);

        /// <summary>
        ///     Verify phone number
        /// </summary>
        /// <remarks>
        ///     Verify a phone number to confirm successful 2FA authentication.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="pinId">ID of the pin code that has to be verified.</param>
        /// <param name="tfaVerifyPinRequest"> (optional)</param>
        /// <returns>TfaVerifyPinResponse</returns>
        TfaVerifyPinResponse VerifyTfaPhoneNumber(string pinId, TfaVerifyPinRequest tfaVerifyPinRequest = default);

        /// <summary>
        ///     Verify phone number
        /// </summary>
        /// <remarks>
        ///     Verify a phone number to confirm successful 2FA authentication.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="pinId">ID of the pin code that has to be verified.</param>
        /// <param name="tfaVerifyPinRequest"> (optional)</param>
        /// <returns>ApiResponse of TfaVerifyPinResponse</returns>
        ApiResponse<TfaVerifyPinResponse> VerifyTfaPhoneNumberWithHttpInfo(string pinId,
            TfaVerifyPinRequest tfaVerifyPinRequest = default);

        #endregion Synchronous Operations
    }

    /// <summary>
    ///     Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITfaApiAsync : IApiAccessor
    {
        #region Asynchronous Operations

        /// <summary>
        ///     Create 2FA application
        /// </summary>
        /// <remarks>
        ///     Create and configure a new 2FA application.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="tfaApplicationRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TfaApplicationResponse</returns>
        Task<TfaApplicationResponse> CreateTfaApplicationAsync(TfaApplicationRequest tfaApplicationRequest = default,
            CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        ///     Create 2FA application
        /// </summary>
        /// <remarks>
        ///     Create and configure a new 2FA application.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="tfaApplicationRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TfaApplicationResponse)</returns>
        Task<ApiResponse<TfaApplicationResponse>> CreateTfaApplicationWithHttpInfoAsync(
            TfaApplicationRequest tfaApplicationRequest = default,
            CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        ///     Create 2FA message template
        /// </summary>
        /// <remarks>
        ///     Once you have your [2FA application](#channels/sms/create-2fa-message-template), create one or more message
        ///     templates where your PIN will be dynamically included when you send the PIN message.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">ID of application for which requested message was created.</param>
        /// <param name="tfaCreateMessageRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TfaMessage</returns>
        Task<TfaMessage> CreateTfaMessageTemplateAsync(string appId,
            TfaCreateMessageRequest tfaCreateMessageRequest = default,
            CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        ///     Create 2FA message template
        /// </summary>
        /// <remarks>
        ///     Once you have your [2FA application](#channels/sms/create-2fa-message-template), create one or more message
        ///     templates where your PIN will be dynamically included when you send the PIN message.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">ID of application for which requested message was created.</param>
        /// <param name="tfaCreateMessageRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TfaMessage)</returns>
        Task<ApiResponse<TfaMessage>> CreateTfaMessageTemplateWithHttpInfoAsync(string appId,
            TfaCreateMessageRequest tfaCreateMessageRequest = default,
            CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        ///     Get 2FA application
        /// </summary>
        /// <remarks>
        ///     Get a single 2FA application to see its configuration details.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">Requested application ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TfaApplicationResponse</returns>
        Task<TfaApplicationResponse> GetTfaApplicationAsync(string appId,
            CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        ///     Get 2FA application
        /// </summary>
        /// <remarks>
        ///     Get a single 2FA application to see its configuration details.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">Requested application ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TfaApplicationResponse)</returns>
        Task<ApiResponse<TfaApplicationResponse>> GetTfaApplicationWithHttpInfoAsync(string appId,
            CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        ///     Get 2FA applications
        /// </summary>
        /// <remarks>
        ///     An application is a container for 2FA message templates. Use this method to list your applications.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;TfaApplicationResponse&gt;</returns>
        Task<List<TfaApplicationResponse>> GetTfaApplicationsAsync(
            CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        ///     Get 2FA applications
        /// </summary>
        /// <remarks>
        ///     An application is a container for 2FA message templates. Use this method to list your applications.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;TfaApplicationResponse&gt;)</returns>
        Task<ApiResponse<List<TfaApplicationResponse>>> GetTfaApplicationsWithHttpInfoAsync(
            CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        ///     Get 2FA message template
        /// </summary>
        /// <remarks>
        ///     Get a single 2FA message template from an application to see its configuration details.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">ID of application for which requested message was created.</param>
        /// <param name="msgId">Requested message ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TfaMessage</returns>
        Task<TfaMessage> GetTfaMessageTemplateAsync(string appId, string msgId,
            CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        ///     Get 2FA message template
        /// </summary>
        /// <remarks>
        ///     Get a single 2FA message template from an application to see its configuration details.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">ID of application for which requested message was created.</param>
        /// <param name="msgId">Requested message ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TfaMessage)</returns>
        Task<ApiResponse<TfaMessage>> GetTfaMessageTemplateWithHttpInfoAsync(string appId, string msgId,
            CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        ///     Get 2FA message templates
        /// </summary>
        /// <remarks>
        ///     List all message templates in a 2FA application.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">ID of application for which requested message was created.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;TfaMessage&gt;</returns>
        Task<List<TfaMessage>> GetTfaMessageTemplatesAsync(string appId,
            CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        ///     Get 2FA message templates
        /// </summary>
        /// <remarks>
        ///     List all message templates in a 2FA application.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">ID of application for which requested message was created.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;TfaMessage&gt;)</returns>
        Task<ApiResponse<List<TfaMessage>>> GetTfaMessageTemplatesWithHttpInfoAsync(string appId,
            CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        ///     Get 2FA verification status
        /// </summary>
        /// <remarks>
        ///     Check if a phone number is already verified for a specific 2FA application.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="msisdn">Filter by msisdn (phone number) for which verification status is checked.</param>
        /// <param name="appId">ID of 2-FA application for which phone number verification status is requested.</param>
        /// <param name="verified">Filter by verified (true or false). (optional)</param>
        /// <param name="sent">Filter by message sent status (true or false). (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TfaVerificationResponse</returns>
        Task<TfaVerificationResponse> GetTfaVerificationStatusAsync(string msisdn, string appId,
            bool? verified = default(bool?), bool? sent = default(bool?),
            CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        ///     Get 2FA verification status
        /// </summary>
        /// <remarks>
        ///     Check if a phone number is already verified for a specific 2FA application.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="msisdn">Filter by msisdn (phone number) for which verification status is checked.</param>
        /// <param name="appId">ID of 2-FA application for which phone number verification status is requested.</param>
        /// <param name="verified">Filter by verified (true or false). (optional)</param>
        /// <param name="sent">Filter by message sent status (true or false). (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TfaVerificationResponse)</returns>
        Task<ApiResponse<TfaVerificationResponse>> GetTfaVerificationStatusWithHttpInfoAsync(string msisdn,
            string appId, bool? verified = default(bool?), bool? sent = default(bool?),
            CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        ///     Resend 2FA PIN code over SMS
        /// </summary>
        /// <remarks>
        ///     If needed, you can resend the same (previously sent) PIN code over SMS.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="pinId">ID of the pin code that has to be verified.</param>
        /// <param name="tfaResendPinRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TfaStartAuthenticationResponse</returns>
        Task<TfaStartAuthenticationResponse> ResendTfaPinCodeOverSmsAsync(string pinId,
            TfaResendPinRequest tfaResendPinRequest = default,
            CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        ///     Resend 2FA PIN code over SMS
        /// </summary>
        /// <remarks>
        ///     If needed, you can resend the same (previously sent) PIN code over SMS.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="pinId">ID of the pin code that has to be verified.</param>
        /// <param name="tfaResendPinRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TfaStartAuthenticationResponse)</returns>
        Task<ApiResponse<TfaStartAuthenticationResponse>> ResendTfaPinCodeOverSmsWithHttpInfoAsync(string pinId,
            TfaResendPinRequest tfaResendPinRequest = default,
            CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        ///     Resend 2FA PIN code over Voice
        /// </summary>
        /// <remarks>
        ///     If needed, you can resend the same (previously sent) PIN code over Voice.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="pinId">ID of the pin code that has to be verified.</param>
        /// <param name="tfaResendPinRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TfaStartAuthenticationResponse</returns>
        Task<TfaStartAuthenticationResponse> ResendTfaPinCodeOverVoiceAsync(string pinId,
            TfaResendPinRequest tfaResendPinRequest = default,
            CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        ///     Resend 2FA PIN code over Voice
        /// </summary>
        /// <remarks>
        ///     If needed, you can resend the same (previously sent) PIN code over Voice.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="pinId">ID of the pin code that has to be verified.</param>
        /// <param name="tfaResendPinRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TfaStartAuthenticationResponse)</returns>
        Task<ApiResponse<TfaStartAuthenticationResponse>> ResendTfaPinCodeOverVoiceWithHttpInfoAsync(string pinId,
            TfaResendPinRequest tfaResendPinRequest = default,
            CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        ///     Send 2FA PIN code over SMS
        /// </summary>
        /// <remarks>
        ///     Send a PIN code over SMS using a previously created [message template](#channels/sms/create-2fa-message-template).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="ncNeeded">
        ///     Indicates if Number Lookup is needed before sending the 2FA message. If the parameter value is
        ///     true, Number Lookup will be requested before sending the SMS. If the value is false, the SMS will be sent without
        ///     requesting Number Lookup. Field&#39;s default value is &#x60;true&#x60;. (optional)
        /// </param>
        /// <param name="tfaStartAuthenticationRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TfaStartAuthenticationResponse</returns>
        Task<TfaStartAuthenticationResponse> SendTfaPinCodeOverSmsAsync(bool? ncNeeded = default(bool?),
            TfaStartAuthenticationRequest tfaStartAuthenticationRequest = default,
            CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        ///     Send 2FA PIN code over SMS
        /// </summary>
        /// <remarks>
        ///     Send a PIN code over SMS using a previously created [message template](#channels/sms/create-2fa-message-template).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="ncNeeded">
        ///     Indicates if Number Lookup is needed before sending the 2FA message. If the parameter value is
        ///     true, Number Lookup will be requested before sending the SMS. If the value is false, the SMS will be sent without
        ///     requesting Number Lookup. Field&#39;s default value is &#x60;true&#x60;. (optional)
        /// </param>
        /// <param name="tfaStartAuthenticationRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TfaStartAuthenticationResponse)</returns>
        Task<ApiResponse<TfaStartAuthenticationResponse>> SendTfaPinCodeOverSmsWithHttpInfoAsync(
            bool? ncNeeded = default(bool?), TfaStartAuthenticationRequest tfaStartAuthenticationRequest = default,
            CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        ///     Send 2FA PIN code over Voice
        /// </summary>
        /// <remarks>
        ///     Send a PIN code over Voice using previously created [message template](#channels/sms/create-2fa-message-template).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="tfaStartAuthenticationRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TfaStartAuthenticationResponse</returns>
        Task<TfaStartAuthenticationResponse> SendTfaPinCodeOverVoiceAsync(
            TfaStartAuthenticationRequest tfaStartAuthenticationRequest = default,
            CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        ///     Send 2FA PIN code over Voice
        /// </summary>
        /// <remarks>
        ///     Send a PIN code over Voice using previously created [message template](#channels/sms/create-2fa-message-template).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="tfaStartAuthenticationRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TfaStartAuthenticationResponse)</returns>
        Task<ApiResponse<TfaStartAuthenticationResponse>> SendTfaPinCodeOverVoiceWithHttpInfoAsync(
            TfaStartAuthenticationRequest tfaStartAuthenticationRequest = default,
            CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        ///     Update 2FA application
        /// </summary>
        /// <remarks>
        ///     Change configuration options for your existing 2FA application.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">ID of application that should be updated.</param>
        /// <param name="tfaApplicationRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TfaApplicationResponse</returns>
        Task<TfaApplicationResponse> UpdateTfaApplicationAsync(string appId,
            TfaApplicationRequest tfaApplicationRequest = default,
            CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        ///     Update 2FA application
        /// </summary>
        /// <remarks>
        ///     Change configuration options for your existing 2FA application.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">ID of application that should be updated.</param>
        /// <param name="tfaApplicationRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TfaApplicationResponse)</returns>
        Task<ApiResponse<TfaApplicationResponse>> UpdateTfaApplicationWithHttpInfoAsync(string appId,
            TfaApplicationRequest tfaApplicationRequest = default,
            CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        ///     Update 2FA message template
        /// </summary>
        /// <remarks>
        ///     Change configuration options for your existing 2FA application message template.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">ID of application for which requested message was created.</param>
        /// <param name="msgId">Requested message ID.</param>
        /// <param name="tfaUpdateMessageRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TfaMessage</returns>
        Task<TfaMessage> UpdateTfaMessageTemplateAsync(string appId, string msgId,
            TfaUpdateMessageRequest tfaUpdateMessageRequest = default,
            CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        ///     Update 2FA message template
        /// </summary>
        /// <remarks>
        ///     Change configuration options for your existing 2FA application message template.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">ID of application for which requested message was created.</param>
        /// <param name="msgId">Requested message ID.</param>
        /// <param name="tfaUpdateMessageRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TfaMessage)</returns>
        Task<ApiResponse<TfaMessage>> UpdateTfaMessageTemplateWithHttpInfoAsync(string appId, string msgId,
            TfaUpdateMessageRequest tfaUpdateMessageRequest = default,
            CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        ///     Verify phone number
        /// </summary>
        /// <remarks>
        ///     Verify a phone number to confirm successful 2FA authentication.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="pinId">ID of the pin code that has to be verified.</param>
        /// <param name="tfaVerifyPinRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TfaVerifyPinResponse</returns>
        Task<TfaVerifyPinResponse> VerifyTfaPhoneNumberAsync(string pinId,
            TfaVerifyPinRequest tfaVerifyPinRequest = default,
            CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        ///     Verify phone number
        /// </summary>
        /// <remarks>
        ///     Verify a phone number to confirm successful 2FA authentication.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="pinId">ID of the pin code that has to be verified.</param>
        /// <param name="tfaVerifyPinRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TfaVerifyPinResponse)</returns>
        Task<ApiResponse<TfaVerifyPinResponse>> VerifyTfaPhoneNumberWithHttpInfoAsync(string pinId,
            TfaVerifyPinRequest tfaVerifyPinRequest = default,
            CancellationToken cancellationToken = default(CancellationToken));

        #endregion Asynchronous Operations
    }

    /// <summary>
    ///     Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITfaApi : ITfaApiSync, ITfaApiAsync
    {
    }

    /// <summary>
    ///     Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class TfaApi : ITfaApi
    {
        private ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        ///     Initializes a new instance of the <see cref="TfaApi" /> class.
        /// </summary>
        /// <returns></returns>
        public TfaApi() : this((string)null)
        {
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="TfaApi" /> class.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public TfaApi(string basePath)
        {
            Configuration = ClientConfiguration.MergeConfigurations(
                GlobalConfiguration.Instance,
                new Configuration { BasePath = basePath }
            );
            ApiClient = new ApiClient(Configuration.BasePath);
            Client = ApiClient;
            AsynchronousClient = ApiClient;
            ExceptionFactory = ClientConfiguration.DefaultExceptionFactory;
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="TfaApi" /> class using Configuration object.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public TfaApi(Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException(nameof(configuration));

            Configuration = ClientConfiguration.MergeConfigurations(
                GlobalConfiguration.Instance,
                configuration
            );
            ApiClient = new ApiClient(Configuration.BasePath);
            Client = ApiClient;
            AsynchronousClient = ApiClient;
            ExceptionFactory = ClientConfiguration.DefaultExceptionFactory;
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="TfaApi" /> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        ///     Some configuration settings will not be applied without passing an HttpClientHandler.
        ///     The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public TfaApi(HttpClient client) : this(client, (string)null)
        {
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="TfaApi" /> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        /// <remarks>
        ///     Some configuration settings will not be applied without passing an HttpClientHandler.
        ///     The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public TfaApi(HttpClient client, string basePath)
        {
            if (client == null) throw new ArgumentNullException(nameof(client));

            Configuration = ClientConfiguration.MergeConfigurations(
                GlobalConfiguration.Instance,
                new Configuration { BasePath = basePath }
            );
            ApiClient = new ApiClient(client, Configuration.BasePath);
            Client = ApiClient;
            AsynchronousClient = ApiClient;
            ExceptionFactory = ClientConfiguration.DefaultExceptionFactory;
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="TfaApi" /> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        ///     Some configuration settings will not be applied without passing an HttpClientHandler.
        ///     The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public TfaApi(HttpClient client, Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException(nameof(configuration));
            if (client == null) throw new ArgumentNullException(nameof(client));

            Configuration = ClientConfiguration.MergeConfigurations(
                GlobalConfiguration.Instance,
                configuration
            );
            ApiClient = new ApiClient(client, Configuration.BasePath);
            Client = ApiClient;
            AsynchronousClient = ApiClient;
            ExceptionFactory = ClientConfiguration.DefaultExceptionFactory;
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="TfaApi" /> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public TfaApi(HttpClient client, HttpClientHandler handler) : this(client, handler, (string)null)
        {
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="TfaApi" /> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An instance of HttpClientHandler that is used by HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public TfaApi(HttpClient client, HttpClientHandler handler, string basePath)
        {
            if (client == null) throw new ArgumentNullException(nameof(client));
            if (handler == null) throw new ArgumentNullException(nameof(handler));

            Configuration = ClientConfiguration.MergeConfigurations(
                GlobalConfiguration.Instance,
                new Configuration { BasePath = basePath }
            );
            ApiClient = new ApiClient(client, handler, Configuration.BasePath);
            Client = ApiClient;
            AsynchronousClient = ApiClient;
            ExceptionFactory = ClientConfiguration.DefaultExceptionFactory;
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="TfaApi" /> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An instance of HttpClientHandler that is used by HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public TfaApi(HttpClient client, HttpClientHandler handler, Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException(nameof(configuration));
            if (client == null) throw new ArgumentNullException(nameof(client));
            if (handler == null) throw new ArgumentNullException(nameof(handler));

            Configuration = ClientConfiguration.MergeConfigurations(
                GlobalConfiguration.Instance,
                configuration
            );
            ApiClient = new ApiClient(client, handler, Configuration.BasePath);
            Client = ApiClient;
            AsynchronousClient = ApiClient;
            ExceptionFactory = ClientConfiguration.DefaultExceptionFactory;
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="TfaApi" /> class
        ///     using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public TfaApi(ISynchronousClient client, IAsynchronousClient asyncClient, IReadableConfiguration configuration)
        {
            Client = client ?? throw new ArgumentNullException(nameof(client));
            AsynchronousClient = asyncClient ?? throw new ArgumentNullException(nameof(asyncClient));
            Configuration = configuration ?? throw new ArgumentNullException(nameof(configuration));
            ExceptionFactory = ClientConfiguration.DefaultExceptionFactory;
        }

        /// <summary>
        ///     Holds the ApiClient if created
        /// </summary>
        public ApiClient ApiClient { get; set; }

        /// <summary>
        ///     The client for accessing this underlying API asynchronously.
        /// </summary>
        public IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        ///     The client for accessing this underlying API synchronously.
        /// </summary>
        public ISynchronousClient Client { get; set; }

        /// <summary>
        ///     Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return Configuration.BasePath;
        }

        /// <summary>
        ///     Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IReadableConfiguration Configuration { get; set; }

        /// <summary>
        ///     Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                return _exceptionFactory;
            }
            set => _exceptionFactory = value;
        }

        /// <summary>
        ///     Create 2FA application Create and configure a new 2FA application.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="tfaApplicationRequest"> (optional)</param>
        /// <returns>TfaApplicationResponse</returns>
        public TfaApplicationResponse CreateTfaApplication(TfaApplicationRequest tfaApplicationRequest = default)
        {
            var localVarResponse = CreateTfaApplicationWithHttpInfo(tfaApplicationRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Create 2FA application Create and configure a new 2FA application.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="tfaApplicationRequest"> (optional)</param>
        /// <returns>ApiResponse of TfaApplicationResponse</returns>
        public ApiResponse<TfaApplicationResponse> CreateTfaApplicationWithHttpInfo(
            TfaApplicationRequest tfaApplicationRequest = default)
        {
            var localVarRequestOptions = new RequestOptions();

            string[] contentTypes =
            {
                "application/json",
                "application/xml"
            };

            // to determine the Accept header
            string[] accepts =
            {
                "application/json",
                "application/xml"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(contentTypes);
            if (localVarContentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = tfaApplicationRequest;

            // authentication (APIKeyHeader) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                    localVarRequestOptions.HeaderParameters.Add("Authorization",
                        Configuration.GetApiKeyWithPrefix("Authorization"));
            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(Configuration.Username) || !string.IsNullOrEmpty(Configuration.Password))
                localVarRequestOptions.HeaderParameters.Add("Authorization",
                    "Basic " + ClientUtils.Base64Encode(Configuration.Username + ":" + Configuration.Password));
            // authentication (IBSSOTokenHeader) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                    localVarRequestOptions.HeaderParameters.Add("Authorization",
                        Configuration.GetApiKeyWithPrefix("Authorization"));
            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(Configuration.AccessToken))
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + Configuration.AccessToken);

            // make the HTTP request
            var localVarResponse =
                Client.Post<TfaApplicationResponse>("/2fa/2/applications", localVarRequestOptions, Configuration);

            Exception exception = ExceptionFactory?.Invoke("CreateTfaApplication", localVarResponse);
            if (exception != null) throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Create 2FA application Create and configure a new 2FA application.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="tfaApplicationRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TfaApplicationResponse</returns>
        public async Task<TfaApplicationResponse> CreateTfaApplicationAsync(
            TfaApplicationRequest tfaApplicationRequest = default,
            CancellationToken cancellationToken = default(CancellationToken))
        {
            ApiResponse<TfaApplicationResponse> localVarResponse =
                await CreateTfaApplicationWithHttpInfoAsync(tfaApplicationRequest, cancellationToken)
                    .ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Create 2FA application Create and configure a new 2FA application.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="tfaApplicationRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TfaApplicationResponse)</returns>
        public async Task<ApiResponse<TfaApplicationResponse>> CreateTfaApplicationWithHttpInfoAsync(
            TfaApplicationRequest tfaApplicationRequest = default,
            CancellationToken cancellationToken = default(CancellationToken))
        {
            var localVarRequestOptions = new RequestOptions();

            string[] contentTypes =
            {
                "application/json",
                "application/xml"
            };

            // to determine the Accept header
            string[] accepts =
            {
                "application/json",
                "application/xml"
            };


            var localVarContentType = ClientUtils.SelectHeaderContentType(contentTypes);
            if (localVarContentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = tfaApplicationRequest;

            // authentication (APIKeyHeader) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                    localVarRequestOptions.HeaderParameters.Add("Authorization",
                        Configuration.GetApiKeyWithPrefix("Authorization"));
            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(Configuration.Username) || !string.IsNullOrEmpty(Configuration.Password))
                localVarRequestOptions.HeaderParameters.Add("Authorization",
                    "Basic " + ClientUtils.Base64Encode(Configuration.Username + ":" + Configuration.Password));
            // authentication (IBSSOTokenHeader) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                    localVarRequestOptions.HeaderParameters.Add("Authorization",
                        Configuration.GetApiKeyWithPrefix("Authorization"));
            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(Configuration.AccessToken))
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + Configuration.AccessToken);

            // make the HTTP request

            var localVarResponse = await AsynchronousClient
                .PostAsync<TfaApplicationResponse>("/2fa/2/applications", localVarRequestOptions, Configuration,
                    cancellationToken).ConfigureAwait(false);

            Exception exception = ExceptionFactory?.Invoke("CreateTfaApplication", localVarResponse);
            if (exception != null) throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Create 2FA message template Once you have your [2FA application](#channels/sms/create-2fa-message-template), create
        ///     one or more message templates where your PIN will be dynamically included when you send the PIN message.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">ID of application for which requested message was created.</param>
        /// <param name="tfaCreateMessageRequest"> (optional)</param>
        /// <returns>TfaMessage</returns>
        public TfaMessage CreateTfaMessageTemplate(string appId,
            TfaCreateMessageRequest tfaCreateMessageRequest = default)
        {
            var localVarResponse = CreateTfaMessageTemplateWithHttpInfo(appId, tfaCreateMessageRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Create 2FA message template Once you have your [2FA application](#channels/sms/create-2fa-message-template), create
        ///     one or more message templates where your PIN will be dynamically included when you send the PIN message.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">ID of application for which requested message was created.</param>
        /// <param name="tfaCreateMessageRequest"> (optional)</param>
        /// <returns>ApiResponse of TfaMessage</returns>
        public ApiResponse<TfaMessage> CreateTfaMessageTemplateWithHttpInfo(string appId,
            TfaCreateMessageRequest tfaCreateMessageRequest = default)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400,
                    "Missing required parameter 'appId' when calling TfaApi->CreateTfaMessageTemplate");

            var localVarRequestOptions = new RequestOptions();

            string[] contentTypes =
            {
                "application/json",
                "application/xml"
            };

            // to determine the Accept header
            string[] accepts =
            {
                "application/json",
                "application/xml"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(contentTypes);
            if (localVarContentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("appId", ClientUtils.ParameterToString(appId)); // path parameter
            localVarRequestOptions.Data = tfaCreateMessageRequest;

            // authentication (APIKeyHeader) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                    localVarRequestOptions.HeaderParameters.Add("Authorization",
                        Configuration.GetApiKeyWithPrefix("Authorization"));
            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(Configuration.Username) || !string.IsNullOrEmpty(Configuration.Password))
                localVarRequestOptions.HeaderParameters.Add("Authorization",
                    "Basic " + ClientUtils.Base64Encode(Configuration.Username + ":" + Configuration.Password));
            // authentication (IBSSOTokenHeader) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                    localVarRequestOptions.HeaderParameters.Add("Authorization",
                        Configuration.GetApiKeyWithPrefix("Authorization"));
            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(Configuration.AccessToken))
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + Configuration.AccessToken);

            // make the HTTP request
            var localVarResponse = Client.Post<TfaMessage>("/2fa/2/applications/{appId}/messages",
                localVarRequestOptions, Configuration);

            Exception exception = ExceptionFactory?.Invoke("CreateTfaMessageTemplate", localVarResponse);
            if (exception != null) throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Create 2FA message template Once you have your [2FA application](#channels/sms/create-2fa-message-template), create
        ///     one or more message templates where your PIN will be dynamically included when you send the PIN message.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">ID of application for which requested message was created.</param>
        /// <param name="tfaCreateMessageRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TfaMessage</returns>
        public async Task<TfaMessage> CreateTfaMessageTemplateAsync(string appId,
            TfaCreateMessageRequest tfaCreateMessageRequest = default,
            CancellationToken cancellationToken = default(CancellationToken))
        {
            ApiResponse<TfaMessage> localVarResponse =
                await CreateTfaMessageTemplateWithHttpInfoAsync(appId, tfaCreateMessageRequest, cancellationToken)
                    .ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Create 2FA message template Once you have your [2FA application](#channels/sms/create-2fa-message-template), create
        ///     one or more message templates where your PIN will be dynamically included when you send the PIN message.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">ID of application for which requested message was created.</param>
        /// <param name="tfaCreateMessageRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TfaMessage)</returns>
        public async Task<ApiResponse<TfaMessage>> CreateTfaMessageTemplateWithHttpInfoAsync(string appId,
            TfaCreateMessageRequest tfaCreateMessageRequest = default,
            CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400,
                    "Missing required parameter 'appId' when calling TfaApi->CreateTfaMessageTemplate");


            var localVarRequestOptions = new RequestOptions();

            string[] contentTypes =
            {
                "application/json",
                "application/xml"
            };

            // to determine the Accept header
            string[] accepts =
            {
                "application/json",
                "application/xml"
            };


            var localVarContentType = ClientUtils.SelectHeaderContentType(contentTypes);
            if (localVarContentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("appId", ClientUtils.ParameterToString(appId)); // path parameter
            localVarRequestOptions.Data = tfaCreateMessageRequest;

            // authentication (APIKeyHeader) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                    localVarRequestOptions.HeaderParameters.Add("Authorization",
                        Configuration.GetApiKeyWithPrefix("Authorization"));
            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(Configuration.Username) || !string.IsNullOrEmpty(Configuration.Password))
                localVarRequestOptions.HeaderParameters.Add("Authorization",
                    "Basic " + ClientUtils.Base64Encode(Configuration.Username + ":" + Configuration.Password));
            // authentication (IBSSOTokenHeader) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                    localVarRequestOptions.HeaderParameters.Add("Authorization",
                        Configuration.GetApiKeyWithPrefix("Authorization"));
            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(Configuration.AccessToken))
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + Configuration.AccessToken);

            // make the HTTP request

            var localVarResponse = await AsynchronousClient
                .PostAsync<TfaMessage>("/2fa/2/applications/{appId}/messages", localVarRequestOptions, Configuration,
                    cancellationToken).ConfigureAwait(false);

            Exception exception = ExceptionFactory?.Invoke("CreateTfaMessageTemplate", localVarResponse);
            if (exception != null) throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Get 2FA application Get a single 2FA application to see its configuration details.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">Requested application ID.</param>
        /// <returns>TfaApplicationResponse</returns>
        public TfaApplicationResponse GetTfaApplication(string appId)
        {
            var localVarResponse = GetTfaApplicationWithHttpInfo(appId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Get 2FA application Get a single 2FA application to see its configuration details.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">Requested application ID.</param>
        /// <returns>ApiResponse of TfaApplicationResponse</returns>
        public ApiResponse<TfaApplicationResponse> GetTfaApplicationWithHttpInfo(string appId)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400,
                    "Missing required parameter 'appId' when calling TfaApi->GetTfaApplication");

            var localVarRequestOptions = new RequestOptions();

            string[] contentTypes =
            {
            };

            // to determine the Accept header
            string[] accepts =
            {
                "application/json",
                "application/xml"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(contentTypes);
            if (localVarContentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("appId", ClientUtils.ParameterToString(appId)); // path parameter

            // authentication (APIKeyHeader) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                    localVarRequestOptions.HeaderParameters.Add("Authorization",
                        Configuration.GetApiKeyWithPrefix("Authorization"));
            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(Configuration.Username) || !string.IsNullOrEmpty(Configuration.Password))
                localVarRequestOptions.HeaderParameters.Add("Authorization",
                    "Basic " + ClientUtils.Base64Encode(Configuration.Username + ":" + Configuration.Password));
            // authentication (IBSSOTokenHeader) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                    localVarRequestOptions.HeaderParameters.Add("Authorization",
                        Configuration.GetApiKeyWithPrefix("Authorization"));
            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(Configuration.AccessToken))
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + Configuration.AccessToken);

            // make the HTTP request
            var localVarResponse =
                Client.Get<TfaApplicationResponse>("/2fa/2/applications/{appId}", localVarRequestOptions,
                    Configuration);

            Exception exception = ExceptionFactory?.Invoke("GetTfaApplication", localVarResponse);
            if (exception != null) throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Get 2FA application Get a single 2FA application to see its configuration details.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">Requested application ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TfaApplicationResponse</returns>
        public async Task<TfaApplicationResponse> GetTfaApplicationAsync(string appId,
            CancellationToken cancellationToken = default(CancellationToken))
        {
            ApiResponse<TfaApplicationResponse> localVarResponse =
                await GetTfaApplicationWithHttpInfoAsync(appId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Get 2FA application Get a single 2FA application to see its configuration details.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">Requested application ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TfaApplicationResponse)</returns>
        public async Task<ApiResponse<TfaApplicationResponse>> GetTfaApplicationWithHttpInfoAsync(string appId,
            CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400,
                    "Missing required parameter 'appId' when calling TfaApi->GetTfaApplication");


            var localVarRequestOptions = new RequestOptions();

            string[] contentTypes =
            {
            };

            // to determine the Accept header
            string[] accepts =
            {
                "application/json",
                "application/xml"
            };


            var localVarContentType = ClientUtils.SelectHeaderContentType(contentTypes);
            if (localVarContentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("appId", ClientUtils.ParameterToString(appId)); // path parameter

            // authentication (APIKeyHeader) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                    localVarRequestOptions.HeaderParameters.Add("Authorization",
                        Configuration.GetApiKeyWithPrefix("Authorization"));
            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(Configuration.Username) || !string.IsNullOrEmpty(Configuration.Password))
                localVarRequestOptions.HeaderParameters.Add("Authorization",
                    "Basic " + ClientUtils.Base64Encode(Configuration.Username + ":" + Configuration.Password));
            // authentication (IBSSOTokenHeader) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                    localVarRequestOptions.HeaderParameters.Add("Authorization",
                        Configuration.GetApiKeyWithPrefix("Authorization"));
            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(Configuration.AccessToken))
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + Configuration.AccessToken);

            // make the HTTP request

            var localVarResponse = await AsynchronousClient
                .GetAsync<TfaApplicationResponse>("/2fa/2/applications/{appId}", localVarRequestOptions, Configuration,
                    cancellationToken).ConfigureAwait(false);

            Exception exception = ExceptionFactory?.Invoke("GetTfaApplication", localVarResponse);
            if (exception != null) throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Get 2FA applications An application is a container for 2FA message templates. Use this method to list your
        ///     applications.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;TfaApplicationResponse&gt;</returns>
        public List<TfaApplicationResponse> GetTfaApplications()
        {
            ApiResponse<List<TfaApplicationResponse>> localVarResponse = GetTfaApplicationsWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Get 2FA applications An application is a container for 2FA message templates. Use this method to list your
        ///     applications.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;TfaApplicationResponse&gt;</returns>
        public ApiResponse<List<TfaApplicationResponse>> GetTfaApplicationsWithHttpInfo()
        {
            var localVarRequestOptions = new RequestOptions();

            string[] contentTypes =
            {
            };

            // to determine the Accept header
            string[] accepts =
            {
                "application/json",
                "application/xml"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(contentTypes);
            if (localVarContentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (APIKeyHeader) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                    localVarRequestOptions.HeaderParameters.Add("Authorization",
                        Configuration.GetApiKeyWithPrefix("Authorization"));
            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(Configuration.Username) || !string.IsNullOrEmpty(Configuration.Password))
                localVarRequestOptions.HeaderParameters.Add("Authorization",
                    "Basic " + ClientUtils.Base64Encode(Configuration.Username + ":" + Configuration.Password));
            // authentication (IBSSOTokenHeader) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                    localVarRequestOptions.HeaderParameters.Add("Authorization",
                        Configuration.GetApiKeyWithPrefix("Authorization"));
            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(Configuration.AccessToken))
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + Configuration.AccessToken);

            // make the HTTP request
            var localVarResponse =
                Client.Get<List<TfaApplicationResponse>>("/2fa/2/applications", localVarRequestOptions, Configuration);

            Exception exception = ExceptionFactory?.Invoke("GetTfaApplications", localVarResponse);
            if (exception != null) throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Get 2FA applications An application is a container for 2FA message templates. Use this method to list your
        ///     applications.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;TfaApplicationResponse&gt;</returns>
        public async Task<List<TfaApplicationResponse>> GetTfaApplicationsAsync(
            CancellationToken cancellationToken = default(CancellationToken))
        {
            ApiResponse<List<TfaApplicationResponse>> localVarResponse =
                await GetTfaApplicationsWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Get 2FA applications An application is a container for 2FA message templates. Use this method to list your
        ///     applications.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;TfaApplicationResponse&gt;)</returns>
        public async Task<ApiResponse<List<TfaApplicationResponse>>> GetTfaApplicationsWithHttpInfoAsync(
            CancellationToken cancellationToken = default(CancellationToken))
        {
            var localVarRequestOptions = new RequestOptions();

            string[] contentTypes =
            {
            };

            // to determine the Accept header
            string[] accepts =
            {
                "application/json",
                "application/xml"
            };


            var localVarContentType = ClientUtils.SelectHeaderContentType(contentTypes);
            if (localVarContentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (APIKeyHeader) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                    localVarRequestOptions.HeaderParameters.Add("Authorization",
                        Configuration.GetApiKeyWithPrefix("Authorization"));
            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(Configuration.Username) || !string.IsNullOrEmpty(Configuration.Password))
                localVarRequestOptions.HeaderParameters.Add("Authorization",
                    "Basic " + ClientUtils.Base64Encode(Configuration.Username + ":" + Configuration.Password));
            // authentication (IBSSOTokenHeader) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                    localVarRequestOptions.HeaderParameters.Add("Authorization",
                        Configuration.GetApiKeyWithPrefix("Authorization"));
            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(Configuration.AccessToken))
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + Configuration.AccessToken);

            // make the HTTP request

            var localVarResponse = await AsynchronousClient
                .GetAsync<List<TfaApplicationResponse>>("/2fa/2/applications", localVarRequestOptions, Configuration,
                    cancellationToken).ConfigureAwait(false);

            Exception exception = ExceptionFactory?.Invoke("GetTfaApplications", localVarResponse);
            if (exception != null) throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Get 2FA message template Get a single 2FA message template from an application to see its configuration details.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">ID of application for which requested message was created.</param>
        /// <param name="msgId">Requested message ID.</param>
        /// <returns>TfaMessage</returns>
        public TfaMessage GetTfaMessageTemplate(string appId, string msgId)
        {
            var localVarResponse = GetTfaMessageTemplateWithHttpInfo(appId, msgId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Get 2FA message template Get a single 2FA message template from an application to see its configuration details.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">ID of application for which requested message was created.</param>
        /// <param name="msgId">Requested message ID.</param>
        /// <returns>ApiResponse of TfaMessage</returns>
        public ApiResponse<TfaMessage> GetTfaMessageTemplateWithHttpInfo(string appId, string msgId)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400,
                    "Missing required parameter 'appId' when calling TfaApi->GetTfaMessageTemplate");

            // verify the required parameter 'msgId' is set
            if (msgId == null)
                throw new ApiException(400,
                    "Missing required parameter 'msgId' when calling TfaApi->GetTfaMessageTemplate");

            var localVarRequestOptions = new RequestOptions();

            string[] contentTypes =
            {
            };

            // to determine the Accept header
            string[] accepts =
            {
                "application/json",
                "application/xml"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(contentTypes);
            if (localVarContentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("appId", ClientUtils.ParameterToString(appId)); // path parameter
            localVarRequestOptions.PathParameters.Add("msgId", ClientUtils.ParameterToString(msgId)); // path parameter

            // authentication (APIKeyHeader) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                    localVarRequestOptions.HeaderParameters.Add("Authorization",
                        Configuration.GetApiKeyWithPrefix("Authorization"));
            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(Configuration.Username) || !string.IsNullOrEmpty(Configuration.Password))
                localVarRequestOptions.HeaderParameters.Add("Authorization",
                    "Basic " + ClientUtils.Base64Encode(Configuration.Username + ":" + Configuration.Password));
            // authentication (IBSSOTokenHeader) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                    localVarRequestOptions.HeaderParameters.Add("Authorization",
                        Configuration.GetApiKeyWithPrefix("Authorization"));
            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(Configuration.AccessToken))
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + Configuration.AccessToken);

            // make the HTTP request
            var localVarResponse = Client.Get<TfaMessage>("/2fa/2/applications/{appId}/messages/{msgId}",
                localVarRequestOptions, Configuration);

            Exception exception = ExceptionFactory?.Invoke("GetTfaMessageTemplate", localVarResponse);
            if (exception != null) throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Get 2FA message template Get a single 2FA message template from an application to see its configuration details.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">ID of application for which requested message was created.</param>
        /// <param name="msgId">Requested message ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TfaMessage</returns>
        public async Task<TfaMessage> GetTfaMessageTemplateAsync(string appId, string msgId,
            CancellationToken cancellationToken = default(CancellationToken))
        {
            ApiResponse<TfaMessage> localVarResponse =
                await GetTfaMessageTemplateWithHttpInfoAsync(appId, msgId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Get 2FA message template Get a single 2FA message template from an application to see its configuration details.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">ID of application for which requested message was created.</param>
        /// <param name="msgId">Requested message ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TfaMessage)</returns>
        public async Task<ApiResponse<TfaMessage>> GetTfaMessageTemplateWithHttpInfoAsync(string appId, string msgId,
            CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400,
                    "Missing required parameter 'appId' when calling TfaApi->GetTfaMessageTemplate");

            // verify the required parameter 'msgId' is set
            if (msgId == null)
                throw new ApiException(400,
                    "Missing required parameter 'msgId' when calling TfaApi->GetTfaMessageTemplate");


            var localVarRequestOptions = new RequestOptions();

            string[] contentTypes =
            {
            };

            // to determine the Accept header
            string[] accepts =
            {
                "application/json",
                "application/xml"
            };


            var localVarContentType = ClientUtils.SelectHeaderContentType(contentTypes);
            if (localVarContentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("appId", ClientUtils.ParameterToString(appId)); // path parameter
            localVarRequestOptions.PathParameters.Add("msgId", ClientUtils.ParameterToString(msgId)); // path parameter

            // authentication (APIKeyHeader) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                    localVarRequestOptions.HeaderParameters.Add("Authorization",
                        Configuration.GetApiKeyWithPrefix("Authorization"));
            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(Configuration.Username) || !string.IsNullOrEmpty(Configuration.Password))
                localVarRequestOptions.HeaderParameters.Add("Authorization",
                    "Basic " + ClientUtils.Base64Encode(Configuration.Username + ":" + Configuration.Password));
            // authentication (IBSSOTokenHeader) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                    localVarRequestOptions.HeaderParameters.Add("Authorization",
                        Configuration.GetApiKeyWithPrefix("Authorization"));
            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(Configuration.AccessToken))
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + Configuration.AccessToken);

            // make the HTTP request

            var localVarResponse = await AsynchronousClient
                .GetAsync<TfaMessage>("/2fa/2/applications/{appId}/messages/{msgId}", localVarRequestOptions,
                    Configuration, cancellationToken).ConfigureAwait(false);

            Exception exception = ExceptionFactory?.Invoke("GetTfaMessageTemplate", localVarResponse);
            if (exception != null) throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Get 2FA message templates List all message templates in a 2FA application.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">ID of application for which requested message was created.</param>
        /// <returns>List&lt;TfaMessage&gt;</returns>
        public List<TfaMessage> GetTfaMessageTemplates(string appId)
        {
            ApiResponse<List<TfaMessage>> localVarResponse = GetTfaMessageTemplatesWithHttpInfo(appId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Get 2FA message templates List all message templates in a 2FA application.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">ID of application for which requested message was created.</param>
        /// <returns>ApiResponse of List&lt;TfaMessage&gt;</returns>
        public ApiResponse<List<TfaMessage>> GetTfaMessageTemplatesWithHttpInfo(string appId)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400,
                    "Missing required parameter 'appId' when calling TfaApi->GetTfaMessageTemplates");

            var localVarRequestOptions = new RequestOptions();

            string[] contentTypes =
            {
            };

            // to determine the Accept header
            string[] accepts =
            {
                "application/json",
                "application/xml"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(contentTypes);
            if (localVarContentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("appId", ClientUtils.ParameterToString(appId)); // path parameter

            // authentication (APIKeyHeader) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                    localVarRequestOptions.HeaderParameters.Add("Authorization",
                        Configuration.GetApiKeyWithPrefix("Authorization"));
            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(Configuration.Username) || !string.IsNullOrEmpty(Configuration.Password))
                localVarRequestOptions.HeaderParameters.Add("Authorization",
                    "Basic " + ClientUtils.Base64Encode(Configuration.Username + ":" + Configuration.Password));
            // authentication (IBSSOTokenHeader) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                    localVarRequestOptions.HeaderParameters.Add("Authorization",
                        Configuration.GetApiKeyWithPrefix("Authorization"));
            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(Configuration.AccessToken))
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + Configuration.AccessToken);

            // make the HTTP request
            var localVarResponse = Client.Get<List<TfaMessage>>("/2fa/2/applications/{appId}/messages",
                localVarRequestOptions, Configuration);

            Exception exception = ExceptionFactory?.Invoke("GetTfaMessageTemplates", localVarResponse);
            if (exception != null) throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Get 2FA message templates List all message templates in a 2FA application.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">ID of application for which requested message was created.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;TfaMessage&gt;</returns>
        public async Task<List<TfaMessage>> GetTfaMessageTemplatesAsync(string appId,
            CancellationToken cancellationToken = default(CancellationToken))
        {
            ApiResponse<List<TfaMessage>> localVarResponse =
                await GetTfaMessageTemplatesWithHttpInfoAsync(appId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Get 2FA message templates List all message templates in a 2FA application.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">ID of application for which requested message was created.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;TfaMessage&gt;)</returns>
        public async Task<ApiResponse<List<TfaMessage>>> GetTfaMessageTemplatesWithHttpInfoAsync(string appId,
            CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400,
                    "Missing required parameter 'appId' when calling TfaApi->GetTfaMessageTemplates");


            var localVarRequestOptions = new RequestOptions();

            string[] contentTypes =
            {
            };

            // to determine the Accept header
            string[] accepts =
            {
                "application/json",
                "application/xml"
            };


            var localVarContentType = ClientUtils.SelectHeaderContentType(contentTypes);
            if (localVarContentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("appId", ClientUtils.ParameterToString(appId)); // path parameter

            // authentication (APIKeyHeader) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                    localVarRequestOptions.HeaderParameters.Add("Authorization",
                        Configuration.GetApiKeyWithPrefix("Authorization"));
            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(Configuration.Username) || !string.IsNullOrEmpty(Configuration.Password))
                localVarRequestOptions.HeaderParameters.Add("Authorization",
                    "Basic " + ClientUtils.Base64Encode(Configuration.Username + ":" + Configuration.Password));
            // authentication (IBSSOTokenHeader) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                    localVarRequestOptions.HeaderParameters.Add("Authorization",
                        Configuration.GetApiKeyWithPrefix("Authorization"));
            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(Configuration.AccessToken))
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + Configuration.AccessToken);

            // make the HTTP request

            var localVarResponse = await AsynchronousClient
                .GetAsync<List<TfaMessage>>("/2fa/2/applications/{appId}/messages", localVarRequestOptions,
                    Configuration, cancellationToken).ConfigureAwait(false);

            Exception exception = ExceptionFactory?.Invoke("GetTfaMessageTemplates", localVarResponse);
            if (exception != null) throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Get 2FA verification status Check if a phone number is already verified for a specific 2FA application.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="msisdn">Filter by msisdn (phone number) for which verification status is checked.</param>
        /// <param name="appId">ID of 2-FA application for which phone number verification status is requested.</param>
        /// <param name="verified">Filter by verified (true or false). (optional)</param>
        /// <param name="sent">Filter by message sent status (true or false). (optional)</param>
        /// <returns>TfaVerificationResponse</returns>
        public TfaVerificationResponse GetTfaVerificationStatus(string msisdn, string appId,
            bool? verified = default(bool?), bool? sent = default(bool?))
        {
            var localVarResponse = GetTfaVerificationStatusWithHttpInfo(msisdn, appId, verified, sent);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Get 2FA verification status Check if a phone number is already verified for a specific 2FA application.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="msisdn">Filter by msisdn (phone number) for which verification status is checked.</param>
        /// <param name="appId">ID of 2-FA application for which phone number verification status is requested.</param>
        /// <param name="verified">Filter by verified (true or false). (optional)</param>
        /// <param name="sent">Filter by message sent status (true or false). (optional)</param>
        /// <returns>ApiResponse of TfaVerificationResponse</returns>
        public ApiResponse<TfaVerificationResponse> GetTfaVerificationStatusWithHttpInfo(string msisdn, string appId,
            bool? verified = default(bool?), bool? sent = default(bool?))
        {
            // verify the required parameter 'msisdn' is set
            if (msisdn == null)
                throw new ApiException(400,
                    "Missing required parameter 'msisdn' when calling TfaApi->GetTfaVerificationStatus");

            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400,
                    "Missing required parameter 'appId' when calling TfaApi->GetTfaVerificationStatus");

            var localVarRequestOptions = new RequestOptions();

            string[] contentTypes =
            {
            };

            // to determine the Accept header
            string[] accepts =
            {
                "application/json",
                "application/xml"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(contentTypes);
            if (localVarContentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("appId", ClientUtils.ParameterToString(appId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "msisdn", msisdn));
            if (verified != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "verified", verified));
            if (sent != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "sent", sent));

            // authentication (APIKeyHeader) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                    localVarRequestOptions.HeaderParameters.Add("Authorization",
                        Configuration.GetApiKeyWithPrefix("Authorization"));
            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(Configuration.Username) || !string.IsNullOrEmpty(Configuration.Password))
                localVarRequestOptions.HeaderParameters.Add("Authorization",
                    "Basic " + ClientUtils.Base64Encode(Configuration.Username + ":" + Configuration.Password));
            // authentication (IBSSOTokenHeader) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                    localVarRequestOptions.HeaderParameters.Add("Authorization",
                        Configuration.GetApiKeyWithPrefix("Authorization"));
            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(Configuration.AccessToken))
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + Configuration.AccessToken);

            // make the HTTP request
            var localVarResponse = Client.Get<TfaVerificationResponse>("/2fa/2/applications/{appId}/verifications",
                localVarRequestOptions, Configuration);

            Exception exception = ExceptionFactory?.Invoke("GetTfaVerificationStatus", localVarResponse);
            if (exception != null) throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Get 2FA verification status Check if a phone number is already verified for a specific 2FA application.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="msisdn">Filter by msisdn (phone number) for which verification status is checked.</param>
        /// <param name="appId">ID of 2-FA application for which phone number verification status is requested.</param>
        /// <param name="verified">Filter by verified (true or false). (optional)</param>
        /// <param name="sent">Filter by message sent status (true or false). (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TfaVerificationResponse</returns>
        public async Task<TfaVerificationResponse> GetTfaVerificationStatusAsync(string msisdn, string appId,
            bool? verified = default(bool?), bool? sent = default(bool?),
            CancellationToken cancellationToken = default(CancellationToken))
        {
            ApiResponse<TfaVerificationResponse> localVarResponse =
                await GetTfaVerificationStatusWithHttpInfoAsync(msisdn, appId, verified, sent, cancellationToken)
                    .ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Get 2FA verification status Check if a phone number is already verified for a specific 2FA application.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="msisdn">Filter by msisdn (phone number) for which verification status is checked.</param>
        /// <param name="appId">ID of 2-FA application for which phone number verification status is requested.</param>
        /// <param name="verified">Filter by verified (true or false). (optional)</param>
        /// <param name="sent">Filter by message sent status (true or false). (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TfaVerificationResponse)</returns>
        public async Task<ApiResponse<TfaVerificationResponse>> GetTfaVerificationStatusWithHttpInfoAsync(string msisdn,
            string appId, bool? verified = default(bool?), bool? sent = default(bool?),
            CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'msisdn' is set
            if (msisdn == null)
                throw new ApiException(400,
                    "Missing required parameter 'msisdn' when calling TfaApi->GetTfaVerificationStatus");

            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400,
                    "Missing required parameter 'appId' when calling TfaApi->GetTfaVerificationStatus");


            var localVarRequestOptions = new RequestOptions();

            string[] contentTypes =
            {
            };

            // to determine the Accept header
            string[] accepts =
            {
                "application/json",
                "application/xml"
            };


            var localVarContentType = ClientUtils.SelectHeaderContentType(contentTypes);
            if (localVarContentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("appId", ClientUtils.ParameterToString(appId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "msisdn", msisdn));
            if (verified != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "verified", verified));
            if (sent != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "sent", sent));

            // authentication (APIKeyHeader) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                    localVarRequestOptions.HeaderParameters.Add("Authorization",
                        Configuration.GetApiKeyWithPrefix("Authorization"));
            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(Configuration.Username) || !string.IsNullOrEmpty(Configuration.Password))
                localVarRequestOptions.HeaderParameters.Add("Authorization",
                    "Basic " + ClientUtils.Base64Encode(Configuration.Username + ":" + Configuration.Password));
            // authentication (IBSSOTokenHeader) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                    localVarRequestOptions.HeaderParameters.Add("Authorization",
                        Configuration.GetApiKeyWithPrefix("Authorization"));
            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(Configuration.AccessToken))
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + Configuration.AccessToken);

            // make the HTTP request

            var localVarResponse = await AsynchronousClient
                .GetAsync<TfaVerificationResponse>("/2fa/2/applications/{appId}/verifications", localVarRequestOptions,
                    Configuration, cancellationToken).ConfigureAwait(false);

            Exception exception = ExceptionFactory?.Invoke("GetTfaVerificationStatus", localVarResponse);
            if (exception != null) throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Resend 2FA PIN code over SMS If needed, you can resend the same (previously sent) PIN code over SMS.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="pinId">ID of the pin code that has to be verified.</param>
        /// <param name="tfaResendPinRequest"> (optional)</param>
        /// <returns>TfaStartAuthenticationResponse</returns>
        public TfaStartAuthenticationResponse ResendTfaPinCodeOverSms(string pinId,
            TfaResendPinRequest tfaResendPinRequest = default)
        {
            var localVarResponse = ResendTfaPinCodeOverSmsWithHttpInfo(pinId, tfaResendPinRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Resend 2FA PIN code over SMS If needed, you can resend the same (previously sent) PIN code over SMS.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="pinId">ID of the pin code that has to be verified.</param>
        /// <param name="tfaResendPinRequest"> (optional)</param>
        /// <returns>ApiResponse of TfaStartAuthenticationResponse</returns>
        public ApiResponse<TfaStartAuthenticationResponse> ResendTfaPinCodeOverSmsWithHttpInfo(string pinId,
            TfaResendPinRequest tfaResendPinRequest = default)
        {
            // verify the required parameter 'pinId' is set
            if (pinId == null)
                throw new ApiException(400,
                    "Missing required parameter 'pinId' when calling TfaApi->ResendTfaPinCodeOverSms");

            var localVarRequestOptions = new RequestOptions();

            string[] contentTypes =
            {
                "application/json",
                "application/xml"
            };

            // to determine the Accept header
            string[] accepts =
            {
                "application/json",
                "application/xml"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(contentTypes);
            if (localVarContentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("pinId", ClientUtils.ParameterToString(pinId)); // path parameter
            localVarRequestOptions.Data = tfaResendPinRequest;

            // authentication (APIKeyHeader) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                    localVarRequestOptions.HeaderParameters.Add("Authorization",
                        Configuration.GetApiKeyWithPrefix("Authorization"));
            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(Configuration.Username) || !string.IsNullOrEmpty(Configuration.Password))
                localVarRequestOptions.HeaderParameters.Add("Authorization",
                    "Basic " + ClientUtils.Base64Encode(Configuration.Username + ":" + Configuration.Password));
            // authentication (IBSSOTokenHeader) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                    localVarRequestOptions.HeaderParameters.Add("Authorization",
                        Configuration.GetApiKeyWithPrefix("Authorization"));
            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(Configuration.AccessToken))
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + Configuration.AccessToken);

            // make the HTTP request
            var localVarResponse = Client.Post<TfaStartAuthenticationResponse>("/2fa/2/pin/{pinId}/resend",
                localVarRequestOptions, Configuration);

            Exception exception = ExceptionFactory?.Invoke("ResendTfaPinCodeOverSms", localVarResponse);
            if (exception != null) throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Resend 2FA PIN code over SMS If needed, you can resend the same (previously sent) PIN code over SMS.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="pinId">ID of the pin code that has to be verified.</param>
        /// <param name="tfaResendPinRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TfaStartAuthenticationResponse</returns>
        public async Task<TfaStartAuthenticationResponse> ResendTfaPinCodeOverSmsAsync(string pinId,
            TfaResendPinRequest tfaResendPinRequest = default,
            CancellationToken cancellationToken = default(CancellationToken))
        {
            ApiResponse<TfaStartAuthenticationResponse> localVarResponse =
                await ResendTfaPinCodeOverSmsWithHttpInfoAsync(pinId, tfaResendPinRequest, cancellationToken)
                    .ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Resend 2FA PIN code over SMS If needed, you can resend the same (previously sent) PIN code over SMS.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="pinId">ID of the pin code that has to be verified.</param>
        /// <param name="tfaResendPinRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TfaStartAuthenticationResponse)</returns>
        public async Task<ApiResponse<TfaStartAuthenticationResponse>> ResendTfaPinCodeOverSmsWithHttpInfoAsync(
            string pinId, TfaResendPinRequest tfaResendPinRequest = default,
            CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'pinId' is set
            if (pinId == null)
                throw new ApiException(400,
                    "Missing required parameter 'pinId' when calling TfaApi->ResendTfaPinCodeOverSms");


            var localVarRequestOptions = new RequestOptions();

            string[] contentTypes =
            {
                "application/json",
                "application/xml"
            };

            // to determine the Accept header
            string[] accepts =
            {
                "application/json",
                "application/xml"
            };


            var localVarContentType = ClientUtils.SelectHeaderContentType(contentTypes);
            if (localVarContentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("pinId", ClientUtils.ParameterToString(pinId)); // path parameter
            localVarRequestOptions.Data = tfaResendPinRequest;

            // authentication (APIKeyHeader) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                    localVarRequestOptions.HeaderParameters.Add("Authorization",
                        Configuration.GetApiKeyWithPrefix("Authorization"));
            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(Configuration.Username) || !string.IsNullOrEmpty(Configuration.Password))
                localVarRequestOptions.HeaderParameters.Add("Authorization",
                    "Basic " + ClientUtils.Base64Encode(Configuration.Username + ":" + Configuration.Password));
            // authentication (IBSSOTokenHeader) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                    localVarRequestOptions.HeaderParameters.Add("Authorization",
                        Configuration.GetApiKeyWithPrefix("Authorization"));
            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(Configuration.AccessToken))
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + Configuration.AccessToken);

            // make the HTTP request

            var localVarResponse = await AsynchronousClient
                .PostAsync<TfaStartAuthenticationResponse>("/2fa/2/pin/{pinId}/resend", localVarRequestOptions,
                    Configuration, cancellationToken).ConfigureAwait(false);

            Exception exception = ExceptionFactory?.Invoke("ResendTfaPinCodeOverSms", localVarResponse);
            if (exception != null) throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Resend 2FA PIN code over Voice If needed, you can resend the same (previously sent) PIN code over Voice.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="pinId">ID of the pin code that has to be verified.</param>
        /// <param name="tfaResendPinRequest"> (optional)</param>
        /// <returns>TfaStartAuthenticationResponse</returns>
        public TfaStartAuthenticationResponse ResendTfaPinCodeOverVoice(string pinId,
            TfaResendPinRequest tfaResendPinRequest = default)
        {
            var localVarResponse = ResendTfaPinCodeOverVoiceWithHttpInfo(pinId, tfaResendPinRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Resend 2FA PIN code over Voice If needed, you can resend the same (previously sent) PIN code over Voice.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="pinId">ID of the pin code that has to be verified.</param>
        /// <param name="tfaResendPinRequest"> (optional)</param>
        /// <returns>ApiResponse of TfaStartAuthenticationResponse</returns>
        public ApiResponse<TfaStartAuthenticationResponse> ResendTfaPinCodeOverVoiceWithHttpInfo(string pinId,
            TfaResendPinRequest tfaResendPinRequest = default)
        {
            // verify the required parameter 'pinId' is set
            if (pinId == null)
                throw new ApiException(400,
                    "Missing required parameter 'pinId' when calling TfaApi->ResendTfaPinCodeOverVoice");

            var localVarRequestOptions = new RequestOptions();

            string[] contentTypes =
            {
                "application/json",
                "application/xml"
            };

            // to determine the Accept header
            string[] accepts =
            {
                "application/json",
                "application/xml"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(contentTypes);
            if (localVarContentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("pinId", ClientUtils.ParameterToString(pinId)); // path parameter
            localVarRequestOptions.Data = tfaResendPinRequest;

            // authentication (APIKeyHeader) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                    localVarRequestOptions.HeaderParameters.Add("Authorization",
                        Configuration.GetApiKeyWithPrefix("Authorization"));
            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(Configuration.Username) || !string.IsNullOrEmpty(Configuration.Password))
                localVarRequestOptions.HeaderParameters.Add("Authorization",
                    "Basic " + ClientUtils.Base64Encode(Configuration.Username + ":" + Configuration.Password));
            // authentication (IBSSOTokenHeader) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                    localVarRequestOptions.HeaderParameters.Add("Authorization",
                        Configuration.GetApiKeyWithPrefix("Authorization"));
            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(Configuration.AccessToken))
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + Configuration.AccessToken);

            // make the HTTP request
            var localVarResponse = Client.Post<TfaStartAuthenticationResponse>("/2fa/2/pin/{pinId}/resend/voice",
                localVarRequestOptions, Configuration);

            Exception exception = ExceptionFactory?.Invoke("ResendTfaPinCodeOverVoice", localVarResponse);
            if (exception != null) throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Resend 2FA PIN code over Voice If needed, you can resend the same (previously sent) PIN code over Voice.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="pinId">ID of the pin code that has to be verified.</param>
        /// <param name="tfaResendPinRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TfaStartAuthenticationResponse</returns>
        public async Task<TfaStartAuthenticationResponse> ResendTfaPinCodeOverVoiceAsync(string pinId,
            TfaResendPinRequest tfaResendPinRequest = default,
            CancellationToken cancellationToken = default(CancellationToken))
        {
            ApiResponse<TfaStartAuthenticationResponse> localVarResponse =
                await ResendTfaPinCodeOverVoiceWithHttpInfoAsync(pinId, tfaResendPinRequest, cancellationToken)
                    .ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Resend 2FA PIN code over Voice If needed, you can resend the same (previously sent) PIN code over Voice.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="pinId">ID of the pin code that has to be verified.</param>
        /// <param name="tfaResendPinRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TfaStartAuthenticationResponse)</returns>
        public async Task<ApiResponse<TfaStartAuthenticationResponse>> ResendTfaPinCodeOverVoiceWithHttpInfoAsync(
            string pinId, TfaResendPinRequest tfaResendPinRequest = default,
            CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'pinId' is set
            if (pinId == null)
                throw new ApiException(400,
                    "Missing required parameter 'pinId' when calling TfaApi->ResendTfaPinCodeOverVoice");


            var localVarRequestOptions = new RequestOptions();

            string[] contentTypes =
            {
                "application/json",
                "application/xml"
            };

            // to determine the Accept header
            string[] accepts =
            {
                "application/json",
                "application/xml"
            };


            var localVarContentType = ClientUtils.SelectHeaderContentType(contentTypes);
            if (localVarContentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("pinId", ClientUtils.ParameterToString(pinId)); // path parameter
            localVarRequestOptions.Data = tfaResendPinRequest;

            // authentication (APIKeyHeader) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                    localVarRequestOptions.HeaderParameters.Add("Authorization",
                        Configuration.GetApiKeyWithPrefix("Authorization"));
            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(Configuration.Username) || !string.IsNullOrEmpty(Configuration.Password))
                localVarRequestOptions.HeaderParameters.Add("Authorization",
                    "Basic " + ClientUtils.Base64Encode(Configuration.Username + ":" + Configuration.Password));
            // authentication (IBSSOTokenHeader) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                    localVarRequestOptions.HeaderParameters.Add("Authorization",
                        Configuration.GetApiKeyWithPrefix("Authorization"));
            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(Configuration.AccessToken))
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + Configuration.AccessToken);

            // make the HTTP request

            var localVarResponse = await AsynchronousClient
                .PostAsync<TfaStartAuthenticationResponse>("/2fa/2/pin/{pinId}/resend/voice", localVarRequestOptions,
                    Configuration, cancellationToken).ConfigureAwait(false);

            Exception exception = ExceptionFactory?.Invoke("ResendTfaPinCodeOverVoice", localVarResponse);
            if (exception != null) throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Send 2FA PIN code over SMS Send a PIN code over SMS using a previously created [message
        ///     template](#channels/sms/create-2fa-message-template).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="ncNeeded">
        ///     Indicates if Number Lookup is needed before sending the 2FA message. If the parameter value is
        ///     true, Number Lookup will be requested before sending the SMS. If the value is false, the SMS will be sent without
        ///     requesting Number Lookup. Field&#39;s default value is &#x60;true&#x60;. (optional)
        /// </param>
        /// <param name="tfaStartAuthenticationRequest"> (optional)</param>
        /// <returns>TfaStartAuthenticationResponse</returns>
        public TfaStartAuthenticationResponse SendTfaPinCodeOverSms(bool? ncNeeded = default(bool?),
            TfaStartAuthenticationRequest tfaStartAuthenticationRequest = default)
        {
            var localVarResponse = SendTfaPinCodeOverSmsWithHttpInfo(ncNeeded, tfaStartAuthenticationRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Send 2FA PIN code over SMS Send a PIN code over SMS using a previously created [message
        ///     template](#channels/sms/create-2fa-message-template).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="ncNeeded">
        ///     Indicates if Number Lookup is needed before sending the 2FA message. If the parameter value is
        ///     true, Number Lookup will be requested before sending the SMS. If the value is false, the SMS will be sent without
        ///     requesting Number Lookup. Field&#39;s default value is &#x60;true&#x60;. (optional)
        /// </param>
        /// <param name="tfaStartAuthenticationRequest"> (optional)</param>
        /// <returns>ApiResponse of TfaStartAuthenticationResponse</returns>
        public ApiResponse<TfaStartAuthenticationResponse> SendTfaPinCodeOverSmsWithHttpInfo(
            bool? ncNeeded = default(bool?), TfaStartAuthenticationRequest tfaStartAuthenticationRequest = default)
        {
            var localVarRequestOptions = new RequestOptions();

            string[] contentTypes =
            {
                "application/json",
                "application/xml"
            };

            // to determine the Accept header
            string[] accepts =
            {
                "application/json",
                "application/xml"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(contentTypes);
            if (localVarContentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (ncNeeded != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "ncNeeded", ncNeeded));
            localVarRequestOptions.Data = tfaStartAuthenticationRequest;

            // authentication (APIKeyHeader) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                    localVarRequestOptions.HeaderParameters.Add("Authorization",
                        Configuration.GetApiKeyWithPrefix("Authorization"));
            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(Configuration.Username) || !string.IsNullOrEmpty(Configuration.Password))
                localVarRequestOptions.HeaderParameters.Add("Authorization",
                    "Basic " + ClientUtils.Base64Encode(Configuration.Username + ":" + Configuration.Password));
            // authentication (IBSSOTokenHeader) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                    localVarRequestOptions.HeaderParameters.Add("Authorization",
                        Configuration.GetApiKeyWithPrefix("Authorization"));
            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(Configuration.AccessToken))
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + Configuration.AccessToken);

            // make the HTTP request
            var localVarResponse =
                Client.Post<TfaStartAuthenticationResponse>("/2fa/2/pin", localVarRequestOptions, Configuration);

            Exception exception = ExceptionFactory?.Invoke("SendTfaPinCodeOverSms", localVarResponse);
            if (exception != null) throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Send 2FA PIN code over SMS Send a PIN code over SMS using a previously created [message
        ///     template](#channels/sms/create-2fa-message-template).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="ncNeeded">
        ///     Indicates if Number Lookup is needed before sending the 2FA message. If the parameter value is
        ///     true, Number Lookup will be requested before sending the SMS. If the value is false, the SMS will be sent without
        ///     requesting Number Lookup. Field&#39;s default value is &#x60;true&#x60;. (optional)
        /// </param>
        /// <param name="tfaStartAuthenticationRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TfaStartAuthenticationResponse</returns>
        public async Task<TfaStartAuthenticationResponse> SendTfaPinCodeOverSmsAsync(bool? ncNeeded = default(bool?),
            TfaStartAuthenticationRequest tfaStartAuthenticationRequest = default,
            CancellationToken cancellationToken = default(CancellationToken))
        {
            ApiResponse<TfaStartAuthenticationResponse> localVarResponse =
                await SendTfaPinCodeOverSmsWithHttpInfoAsync(ncNeeded, tfaStartAuthenticationRequest, cancellationToken)
                    .ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Send 2FA PIN code over SMS Send a PIN code over SMS using a previously created [message
        ///     template](#channels/sms/create-2fa-message-template).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="ncNeeded">
        ///     Indicates if Number Lookup is needed before sending the 2FA message. If the parameter value is
        ///     true, Number Lookup will be requested before sending the SMS. If the value is false, the SMS will be sent without
        ///     requesting Number Lookup. Field&#39;s default value is &#x60;true&#x60;. (optional)
        /// </param>
        /// <param name="tfaStartAuthenticationRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TfaStartAuthenticationResponse)</returns>
        public async Task<ApiResponse<TfaStartAuthenticationResponse>> SendTfaPinCodeOverSmsWithHttpInfoAsync(
            bool? ncNeeded = default(bool?), TfaStartAuthenticationRequest tfaStartAuthenticationRequest = default,
            CancellationToken cancellationToken = default(CancellationToken))
        {
            var localVarRequestOptions = new RequestOptions();

            string[] contentTypes =
            {
                "application/json",
                "application/xml"
            };

            // to determine the Accept header
            string[] accepts =
            {
                "application/json",
                "application/xml"
            };


            var localVarContentType = ClientUtils.SelectHeaderContentType(contentTypes);
            if (localVarContentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (ncNeeded != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "ncNeeded", ncNeeded));
            localVarRequestOptions.Data = tfaStartAuthenticationRequest;

            // authentication (APIKeyHeader) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                    localVarRequestOptions.HeaderParameters.Add("Authorization",
                        Configuration.GetApiKeyWithPrefix("Authorization"));
            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(Configuration.Username) || !string.IsNullOrEmpty(Configuration.Password))
                localVarRequestOptions.HeaderParameters.Add("Authorization",
                    "Basic " + ClientUtils.Base64Encode(Configuration.Username + ":" + Configuration.Password));
            // authentication (IBSSOTokenHeader) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                    localVarRequestOptions.HeaderParameters.Add("Authorization",
                        Configuration.GetApiKeyWithPrefix("Authorization"));
            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(Configuration.AccessToken))
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + Configuration.AccessToken);

            // make the HTTP request

            var localVarResponse = await AsynchronousClient
                .PostAsync<TfaStartAuthenticationResponse>("/2fa/2/pin", localVarRequestOptions, Configuration,
                    cancellationToken).ConfigureAwait(false);

            Exception exception = ExceptionFactory?.Invoke("SendTfaPinCodeOverSms", localVarResponse);
            if (exception != null) throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Send 2FA PIN code over Voice Send a PIN code over Voice using previously created [message
        ///     template](#channels/sms/create-2fa-message-template).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="tfaStartAuthenticationRequest"> (optional)</param>
        /// <returns>TfaStartAuthenticationResponse</returns>
        public TfaStartAuthenticationResponse SendTfaPinCodeOverVoice(
            TfaStartAuthenticationRequest tfaStartAuthenticationRequest = default)
        {
            var localVarResponse = SendTfaPinCodeOverVoiceWithHttpInfo(tfaStartAuthenticationRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Send 2FA PIN code over Voice Send a PIN code over Voice using previously created [message
        ///     template](#channels/sms/create-2fa-message-template).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="tfaStartAuthenticationRequest"> (optional)</param>
        /// <returns>ApiResponse of TfaStartAuthenticationResponse</returns>
        public ApiResponse<TfaStartAuthenticationResponse> SendTfaPinCodeOverVoiceWithHttpInfo(
            TfaStartAuthenticationRequest tfaStartAuthenticationRequest = default)
        {
            var localVarRequestOptions = new RequestOptions();

            string[] contentTypes =
            {
                "application/json",
                "application/xml"
            };

            // to determine the Accept header
            string[] accepts =
            {
                "application/json",
                "application/xml"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(contentTypes);
            if (localVarContentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = tfaStartAuthenticationRequest;

            // authentication (APIKeyHeader) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                    localVarRequestOptions.HeaderParameters.Add("Authorization",
                        Configuration.GetApiKeyWithPrefix("Authorization"));
            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(Configuration.Username) || !string.IsNullOrEmpty(Configuration.Password))
                localVarRequestOptions.HeaderParameters.Add("Authorization",
                    "Basic " + ClientUtils.Base64Encode(Configuration.Username + ":" + Configuration.Password));
            // authentication (IBSSOTokenHeader) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                    localVarRequestOptions.HeaderParameters.Add("Authorization",
                        Configuration.GetApiKeyWithPrefix("Authorization"));
            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(Configuration.AccessToken))
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + Configuration.AccessToken);

            // make the HTTP request
            var localVarResponse =
                Client.Post<TfaStartAuthenticationResponse>("/2fa/2/pin/voice", localVarRequestOptions, Configuration);

            Exception exception = ExceptionFactory?.Invoke("SendTfaPinCodeOverVoice", localVarResponse);
            if (exception != null) throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Send 2FA PIN code over Voice Send a PIN code over Voice using previously created [message
        ///     template](#channels/sms/create-2fa-message-template).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="tfaStartAuthenticationRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TfaStartAuthenticationResponse</returns>
        public async Task<TfaStartAuthenticationResponse> SendTfaPinCodeOverVoiceAsync(
            TfaStartAuthenticationRequest tfaStartAuthenticationRequest = default,
            CancellationToken cancellationToken = default(CancellationToken))
        {
            ApiResponse<TfaStartAuthenticationResponse> localVarResponse =
                await SendTfaPinCodeOverVoiceWithHttpInfoAsync(tfaStartAuthenticationRequest, cancellationToken)
                    .ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Send 2FA PIN code over Voice Send a PIN code over Voice using previously created [message
        ///     template](#channels/sms/create-2fa-message-template).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="tfaStartAuthenticationRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TfaStartAuthenticationResponse)</returns>
        public async Task<ApiResponse<TfaStartAuthenticationResponse>> SendTfaPinCodeOverVoiceWithHttpInfoAsync(
            TfaStartAuthenticationRequest tfaStartAuthenticationRequest = default,
            CancellationToken cancellationToken = default(CancellationToken))
        {
            var localVarRequestOptions = new RequestOptions();

            string[] contentTypes =
            {
                "application/json",
                "application/xml"
            };

            // to determine the Accept header
            string[] accepts =
            {
                "application/json",
                "application/xml"
            };


            var localVarContentType = ClientUtils.SelectHeaderContentType(contentTypes);
            if (localVarContentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = tfaStartAuthenticationRequest;

            // authentication (APIKeyHeader) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                    localVarRequestOptions.HeaderParameters.Add("Authorization",
                        Configuration.GetApiKeyWithPrefix("Authorization"));
            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(Configuration.Username) || !string.IsNullOrEmpty(Configuration.Password))
                localVarRequestOptions.HeaderParameters.Add("Authorization",
                    "Basic " + ClientUtils.Base64Encode(Configuration.Username + ":" + Configuration.Password));
            // authentication (IBSSOTokenHeader) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                    localVarRequestOptions.HeaderParameters.Add("Authorization",
                        Configuration.GetApiKeyWithPrefix("Authorization"));
            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(Configuration.AccessToken))
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + Configuration.AccessToken);

            // make the HTTP request

            var localVarResponse = await AsynchronousClient
                .PostAsync<TfaStartAuthenticationResponse>("/2fa/2/pin/voice", localVarRequestOptions, Configuration,
                    cancellationToken).ConfigureAwait(false);

            Exception exception = ExceptionFactory?.Invoke("SendTfaPinCodeOverVoice", localVarResponse);
            if (exception != null) throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Update 2FA application Change configuration options for your existing 2FA application.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">ID of application that should be updated.</param>
        /// <param name="tfaApplicationRequest"> (optional)</param>
        /// <returns>TfaApplicationResponse</returns>
        public TfaApplicationResponse UpdateTfaApplication(string appId,
            TfaApplicationRequest tfaApplicationRequest = default)
        {
            var localVarResponse = UpdateTfaApplicationWithHttpInfo(appId, tfaApplicationRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Update 2FA application Change configuration options for your existing 2FA application.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">ID of application that should be updated.</param>
        /// <param name="tfaApplicationRequest"> (optional)</param>
        /// <returns>ApiResponse of TfaApplicationResponse</returns>
        public ApiResponse<TfaApplicationResponse> UpdateTfaApplicationWithHttpInfo(string appId,
            TfaApplicationRequest tfaApplicationRequest = default)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400,
                    "Missing required parameter 'appId' when calling TfaApi->UpdateTfaApplication");

            var localVarRequestOptions = new RequestOptions();

            string[] contentTypes =
            {
                "application/json",
                "application/xml"
            };

            // to determine the Accept header
            string[] accepts =
            {
                "application/json",
                "application/xml"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(contentTypes);
            if (localVarContentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("appId", ClientUtils.ParameterToString(appId)); // path parameter
            localVarRequestOptions.Data = tfaApplicationRequest;

            // authentication (APIKeyHeader) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                    localVarRequestOptions.HeaderParameters.Add("Authorization",
                        Configuration.GetApiKeyWithPrefix("Authorization"));
            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(Configuration.Username) || !string.IsNullOrEmpty(Configuration.Password))
                localVarRequestOptions.HeaderParameters.Add("Authorization",
                    "Basic " + ClientUtils.Base64Encode(Configuration.Username + ":" + Configuration.Password));
            // authentication (IBSSOTokenHeader) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                    localVarRequestOptions.HeaderParameters.Add("Authorization",
                        Configuration.GetApiKeyWithPrefix("Authorization"));
            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(Configuration.AccessToken))
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + Configuration.AccessToken);

            // make the HTTP request
            var localVarResponse =
                Client.Put<TfaApplicationResponse>("/2fa/2/applications/{appId}", localVarRequestOptions,
                    Configuration);

            Exception exception = ExceptionFactory?.Invoke("UpdateTfaApplication", localVarResponse);
            if (exception != null) throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Update 2FA application Change configuration options for your existing 2FA application.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">ID of application that should be updated.</param>
        /// <param name="tfaApplicationRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TfaApplicationResponse</returns>
        public async Task<TfaApplicationResponse> UpdateTfaApplicationAsync(string appId,
            TfaApplicationRequest tfaApplicationRequest = default,
            CancellationToken cancellationToken = default(CancellationToken))
        {
            ApiResponse<TfaApplicationResponse> localVarResponse =
                await UpdateTfaApplicationWithHttpInfoAsync(appId, tfaApplicationRequest, cancellationToken)
                    .ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Update 2FA application Change configuration options for your existing 2FA application.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">ID of application that should be updated.</param>
        /// <param name="tfaApplicationRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TfaApplicationResponse)</returns>
        public async Task<ApiResponse<TfaApplicationResponse>> UpdateTfaApplicationWithHttpInfoAsync(string appId,
            TfaApplicationRequest tfaApplicationRequest = default,
            CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400,
                    "Missing required parameter 'appId' when calling TfaApi->UpdateTfaApplication");


            var localVarRequestOptions = new RequestOptions();

            string[] contentTypes =
            {
                "application/json",
                "application/xml"
            };

            // to determine the Accept header
            string[] accepts =
            {
                "application/json",
                "application/xml"
            };


            var localVarContentType = ClientUtils.SelectHeaderContentType(contentTypes);
            if (localVarContentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("appId", ClientUtils.ParameterToString(appId)); // path parameter
            localVarRequestOptions.Data = tfaApplicationRequest;

            // authentication (APIKeyHeader) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                    localVarRequestOptions.HeaderParameters.Add("Authorization",
                        Configuration.GetApiKeyWithPrefix("Authorization"));
            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(Configuration.Username) || !string.IsNullOrEmpty(Configuration.Password))
                localVarRequestOptions.HeaderParameters.Add("Authorization",
                    "Basic " + ClientUtils.Base64Encode(Configuration.Username + ":" + Configuration.Password));
            // authentication (IBSSOTokenHeader) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                    localVarRequestOptions.HeaderParameters.Add("Authorization",
                        Configuration.GetApiKeyWithPrefix("Authorization"));
            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(Configuration.AccessToken))
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + Configuration.AccessToken);

            // make the HTTP request

            var localVarResponse = await AsynchronousClient
                .PutAsync<TfaApplicationResponse>("/2fa/2/applications/{appId}", localVarRequestOptions, Configuration,
                    cancellationToken).ConfigureAwait(false);

            Exception exception = ExceptionFactory?.Invoke("UpdateTfaApplication", localVarResponse);
            if (exception != null) throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Update 2FA message template Change configuration options for your existing 2FA application message template.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">ID of application for which requested message was created.</param>
        /// <param name="msgId">Requested message ID.</param>
        /// <param name="tfaUpdateMessageRequest"> (optional)</param>
        /// <returns>TfaMessage</returns>
        public TfaMessage UpdateTfaMessageTemplate(string appId, string msgId,
            TfaUpdateMessageRequest tfaUpdateMessageRequest = default)
        {
            var localVarResponse = UpdateTfaMessageTemplateWithHttpInfo(appId, msgId, tfaUpdateMessageRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Update 2FA message template Change configuration options for your existing 2FA application message template.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">ID of application for which requested message was created.</param>
        /// <param name="msgId">Requested message ID.</param>
        /// <param name="tfaUpdateMessageRequest"> (optional)</param>
        /// <returns>ApiResponse of TfaMessage</returns>
        public ApiResponse<TfaMessage> UpdateTfaMessageTemplateWithHttpInfo(string appId, string msgId,
            TfaUpdateMessageRequest tfaUpdateMessageRequest = default)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400,
                    "Missing required parameter 'appId' when calling TfaApi->UpdateTfaMessageTemplate");

            // verify the required parameter 'msgId' is set
            if (msgId == null)
                throw new ApiException(400,
                    "Missing required parameter 'msgId' when calling TfaApi->UpdateTfaMessageTemplate");

            var localVarRequestOptions = new RequestOptions();

            string[] contentTypes =
            {
                "application/json",
                "application/xml"
            };

            // to determine the Accept header
            string[] accepts =
            {
                "application/json",
                "application/xml"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(contentTypes);
            if (localVarContentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("appId", ClientUtils.ParameterToString(appId)); // path parameter
            localVarRequestOptions.PathParameters.Add("msgId", ClientUtils.ParameterToString(msgId)); // path parameter
            localVarRequestOptions.Data = tfaUpdateMessageRequest;

            // authentication (APIKeyHeader) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                    localVarRequestOptions.HeaderParameters.Add("Authorization",
                        Configuration.GetApiKeyWithPrefix("Authorization"));
            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(Configuration.Username) || !string.IsNullOrEmpty(Configuration.Password))
                localVarRequestOptions.HeaderParameters.Add("Authorization",
                    "Basic " + ClientUtils.Base64Encode(Configuration.Username + ":" + Configuration.Password));
            // authentication (IBSSOTokenHeader) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                    localVarRequestOptions.HeaderParameters.Add("Authorization",
                        Configuration.GetApiKeyWithPrefix("Authorization"));
            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(Configuration.AccessToken))
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + Configuration.AccessToken);

            // make the HTTP request
            var localVarResponse = Client.Put<TfaMessage>("/2fa/2/applications/{appId}/messages/{msgId}",
                localVarRequestOptions, Configuration);

            Exception exception = ExceptionFactory?.Invoke("UpdateTfaMessageTemplate", localVarResponse);
            if (exception != null) throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Update 2FA message template Change configuration options for your existing 2FA application message template.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">ID of application for which requested message was created.</param>
        /// <param name="msgId">Requested message ID.</param>
        /// <param name="tfaUpdateMessageRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TfaMessage</returns>
        public async Task<TfaMessage> UpdateTfaMessageTemplateAsync(string appId, string msgId,
            TfaUpdateMessageRequest tfaUpdateMessageRequest = default,
            CancellationToken cancellationToken = default(CancellationToken))
        {
            ApiResponse<TfaMessage> localVarResponse =
                await UpdateTfaMessageTemplateWithHttpInfoAsync(appId, msgId, tfaUpdateMessageRequest,
                    cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Update 2FA message template Change configuration options for your existing 2FA application message template.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">ID of application for which requested message was created.</param>
        /// <param name="msgId">Requested message ID.</param>
        /// <param name="tfaUpdateMessageRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TfaMessage)</returns>
        public async Task<ApiResponse<TfaMessage>> UpdateTfaMessageTemplateWithHttpInfoAsync(string appId, string msgId,
            TfaUpdateMessageRequest tfaUpdateMessageRequest = default,
            CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400,
                    "Missing required parameter 'appId' when calling TfaApi->UpdateTfaMessageTemplate");

            // verify the required parameter 'msgId' is set
            if (msgId == null)
                throw new ApiException(400,
                    "Missing required parameter 'msgId' when calling TfaApi->UpdateTfaMessageTemplate");


            var localVarRequestOptions = new RequestOptions();

            string[] contentTypes =
            {
                "application/json",
                "application/xml"
            };

            // to determine the Accept header
            string[] accepts =
            {
                "application/json",
                "application/xml"
            };


            var localVarContentType = ClientUtils.SelectHeaderContentType(contentTypes);
            if (localVarContentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("appId", ClientUtils.ParameterToString(appId)); // path parameter
            localVarRequestOptions.PathParameters.Add("msgId", ClientUtils.ParameterToString(msgId)); // path parameter
            localVarRequestOptions.Data = tfaUpdateMessageRequest;

            // authentication (APIKeyHeader) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                    localVarRequestOptions.HeaderParameters.Add("Authorization",
                        Configuration.GetApiKeyWithPrefix("Authorization"));
            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(Configuration.Username) || !string.IsNullOrEmpty(Configuration.Password))
                localVarRequestOptions.HeaderParameters.Add("Authorization",
                    "Basic " + ClientUtils.Base64Encode(Configuration.Username + ":" + Configuration.Password));
            // authentication (IBSSOTokenHeader) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                    localVarRequestOptions.HeaderParameters.Add("Authorization",
                        Configuration.GetApiKeyWithPrefix("Authorization"));
            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(Configuration.AccessToken))
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + Configuration.AccessToken);

            // make the HTTP request

            var localVarResponse = await AsynchronousClient
                .PutAsync<TfaMessage>("/2fa/2/applications/{appId}/messages/{msgId}", localVarRequestOptions,
                    Configuration, cancellationToken).ConfigureAwait(false);

            Exception exception = ExceptionFactory?.Invoke("UpdateTfaMessageTemplate", localVarResponse);
            if (exception != null) throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Verify phone number Verify a phone number to confirm successful 2FA authentication.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="pinId">ID of the pin code that has to be verified.</param>
        /// <param name="tfaVerifyPinRequest"> (optional)</param>
        /// <returns>TfaVerifyPinResponse</returns>
        public TfaVerifyPinResponse VerifyTfaPhoneNumber(string pinId,
            TfaVerifyPinRequest tfaVerifyPinRequest = default)
        {
            var localVarResponse = VerifyTfaPhoneNumberWithHttpInfo(pinId, tfaVerifyPinRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Verify phone number Verify a phone number to confirm successful 2FA authentication.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="pinId">ID of the pin code that has to be verified.</param>
        /// <param name="tfaVerifyPinRequest"> (optional)</param>
        /// <returns>ApiResponse of TfaVerifyPinResponse</returns>
        public ApiResponse<TfaVerifyPinResponse> VerifyTfaPhoneNumberWithHttpInfo(string pinId,
            TfaVerifyPinRequest tfaVerifyPinRequest = default)
        {
            // verify the required parameter 'pinId' is set
            if (pinId == null)
                throw new ApiException(400,
                    "Missing required parameter 'pinId' when calling TfaApi->VerifyTfaPhoneNumber");

            var localVarRequestOptions = new RequestOptions();

            string[] contentTypes =
            {
                "application/json",
                "application/xml"
            };

            // to determine the Accept header
            string[] accepts =
            {
                "application/json",
                "application/xml"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(contentTypes);
            if (localVarContentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("pinId", ClientUtils.ParameterToString(pinId)); // path parameter
            localVarRequestOptions.Data = tfaVerifyPinRequest;

            // authentication (APIKeyHeader) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                    localVarRequestOptions.HeaderParameters.Add("Authorization",
                        Configuration.GetApiKeyWithPrefix("Authorization"));
            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(Configuration.Username) || !string.IsNullOrEmpty(Configuration.Password))
                localVarRequestOptions.HeaderParameters.Add("Authorization",
                    "Basic " + ClientUtils.Base64Encode(Configuration.Username + ":" + Configuration.Password));
            // authentication (IBSSOTokenHeader) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                    localVarRequestOptions.HeaderParameters.Add("Authorization",
                        Configuration.GetApiKeyWithPrefix("Authorization"));
            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(Configuration.AccessToken))
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + Configuration.AccessToken);

            // make the HTTP request
            var localVarResponse =
                Client.Post<TfaVerifyPinResponse>("/2fa/2/pin/{pinId}/verify", localVarRequestOptions, Configuration);

            Exception exception = ExceptionFactory?.Invoke("VerifyTfaPhoneNumber", localVarResponse);
            if (exception != null) throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Verify phone number Verify a phone number to confirm successful 2FA authentication.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="pinId">ID of the pin code that has to be verified.</param>
        /// <param name="tfaVerifyPinRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TfaVerifyPinResponse</returns>
        public async Task<TfaVerifyPinResponse> VerifyTfaPhoneNumberAsync(string pinId,
            TfaVerifyPinRequest tfaVerifyPinRequest = default,
            CancellationToken cancellationToken = default(CancellationToken))
        {
            ApiResponse<TfaVerifyPinResponse> localVarResponse =
                await VerifyTfaPhoneNumberWithHttpInfoAsync(pinId, tfaVerifyPinRequest, cancellationToken)
                    .ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Verify phone number Verify a phone number to confirm successful 2FA authentication.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="pinId">ID of the pin code that has to be verified.</param>
        /// <param name="tfaVerifyPinRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TfaVerifyPinResponse)</returns>
        public async Task<ApiResponse<TfaVerifyPinResponse>> VerifyTfaPhoneNumberWithHttpInfoAsync(string pinId,
            TfaVerifyPinRequest tfaVerifyPinRequest = default,
            CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'pinId' is set
            if (pinId == null)
                throw new ApiException(400,
                    "Missing required parameter 'pinId' when calling TfaApi->VerifyTfaPhoneNumber");


            var localVarRequestOptions = new RequestOptions();

            string[] contentTypes =
            {
                "application/json",
                "application/xml"
            };

            // to determine the Accept header
            string[] accepts =
            {
                "application/json",
                "application/xml"
            };


            var localVarContentType = ClientUtils.SelectHeaderContentType(contentTypes);
            if (localVarContentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("pinId", ClientUtils.ParameterToString(pinId)); // path parameter
            localVarRequestOptions.Data = tfaVerifyPinRequest;

            // authentication (APIKeyHeader) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                    localVarRequestOptions.HeaderParameters.Add("Authorization",
                        Configuration.GetApiKeyWithPrefix("Authorization"));
            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(Configuration.Username) || !string.IsNullOrEmpty(Configuration.Password))
                localVarRequestOptions.HeaderParameters.Add("Authorization",
                    "Basic " + ClientUtils.Base64Encode(Configuration.Username + ":" + Configuration.Password));
            // authentication (IBSSOTokenHeader) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                    localVarRequestOptions.HeaderParameters.Add("Authorization",
                        Configuration.GetApiKeyWithPrefix("Authorization"));
            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(Configuration.AccessToken))
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + Configuration.AccessToken);

            // make the HTTP request

            var localVarResponse = await AsynchronousClient.PostAsync<TfaVerifyPinResponse>("/2fa/2/pin/{pinId}/verify",
                localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

            Exception exception = ExceptionFactory?.Invoke("VerifyTfaPhoneNumber", localVarResponse);
            if (exception != null) throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            ApiClient?.Dispose();
        }
    }
}